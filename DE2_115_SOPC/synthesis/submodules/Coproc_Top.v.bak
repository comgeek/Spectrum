// This module interface memory-maps into the Nios processor address space.
//    It allows the Nios to read the output values of the FFT (via the dual-port RAM).
// This module instantiates and controls the audio interface, audio-to-FIFO,
//    FIFO-to-FFT, and then FFT-dual-port-RAM.
// The Nios then reads the dual-port RAM to get the data (amplitudes in each audio
//    frequency bin).  The Nios will draw the bars into the VGA memory to create
//    the image.

// Number of samples that the FFT works on.
`define FFT_POINTS 16
// log2 of the number of points in the FFT. Used by counters of fft words.
`define FFT_BUS 4

module Coproc_Top (
   //	NIOS Host Side
// input	[31:0] avs_s1_writedata_iDATA,
	output reg[31:0] avs_s1_readdata_oDATA,
   input	[`FFT_BUS-1:0] avs_s1_address_iADDR,
//	input avs_s1_write_iWR,
	input avs_s1_read_iRD,
	input avs_s1_chipselect_iCS,
	input rsi_reset_n,
	input csi_clk,		//	Host processor clock
//	input avs_s1_state_CLK,     // Clock for calculator engine
   // Audio codec interface
   input avs_s2_export_adcdata,
   input avs_s2_export_adclrc,    // 48.0 ksps clock
   input avs_s2_export_bclk,       // 48 kHz * 4. The audio bit clock.
   // FFT clock. Not sure this part of the chain can run at 50 MHz.
   input avs_s2_export_fft_clk
);

//reg [31:0] avs_s1_readdata_oDATA;

//parameter RegRe_ADDR    = 3'b000;
//parameter RegIm_ADDR    = 3'b001;
//parameter MaxItr_ADDR   = 3'b010;
//parameter Commands_ADDR = 3'b011;
//parameter ItrCntr_ADDR  = 3'b100;   // Dual-port memory. In Engine.v module.
//parameter Status2Nios_ADDR  = 3'b101;  // Dual-port memory. In Engine.v module.

//reg [31:0] RegRe, RegIm;
//reg [15:0] MaxItr;
//reg [7:0] Commands;

//wire [15:0] RAM_data_bus;
//wire done;
wire reset = ~rsi_reset_n;

// Register reads and writes
/*
always@(negedge avs_s1_clk_iCLK or negedge avs_s1_reset_n_iRST_N) begin
   if(!avs_s1_reset_n_iRST_N) begin
	   RegRe <= 0;
		RegIm <= 0;
		MaxItr <= 0;
		Commands <= 0;
   end
   else begin
      if(avs_s1_chipselect_iCS ) begin
         if(avs_s1_write_iWR) begin
            case(avs_s1_address_iADDR)
               RegRe_ADDR  : RegRe  <= avs_s1_writedata_iDATA;
               RegIm_ADDR  : RegIm 	<=	avs_s1_writedata_iDATA;
               MaxItr_ADDR : MaxItr <=	avs_s1_writedata_iDATA;
					Commands_ADDR : Commands <= avs_s1_writedata_iDATA;
            endcase
         end
         else if(avs_s1_read_iRD) begin
            case(avs_s1_address_iADDR)
               RegRe_ADDR		: avs_s1_readdata_oDATA	<=	RegRe;
               RegIm_ADDR		: avs_s1_readdata_oDATA	<=	RegIm;
               MaxItr_ADDR		: avs_s1_readdata_oDATA	<=	MaxItr;
					Commands_ADDR  : avs_s1_readdata_oDATA	<=	Commands;
					ItrCntr_ADDR   : avs_s1_readdata_oDATA	<=	RAM_data_bus;
					Status2Nios_ADDR  : avs_s1_readdata_oDATA	<=	done;
					default			: avs_s1_readdata_oDATA <= 32'b0;
            endcase
         end
      end
   end
end
*/

wire fifo_wrreq, fifo_wrempty, fifo_wrfull;
wire fifo_rdempty, fifo_rdfull, fifio_rdreq;
wire fft_ready2receive;
wire [15:0] data_to_fifo, data_fifo_to_fft;
wire signed [31:0] real2, imag2, sum;
wire tstart2fill, tsink_valid, tsink_sop, tsink_eop;
wire tsource_valid, tsource_error, tsource_eop, tsource_sop;
wire fifo_rdreq;
wire ram_wr_address;
wire signed [15:0] tsource_imag, tsource_real;
wire [15:0] power;

// The audio2fifo module takes the audio from the codec, de-serializes it, and
//    puts it into the FIFO. It automatically stops when the FIFO is full.
audio2fifo u1 (
   .reset( reset ),
   .start2fill( tstart2fill ),
   .adcdata( adcdata ),
   .bclk( bclk ),
   .adclrc( adclrc ),
   .wrempty( fifo_wrempty ),
   .wrfull( fifo_wrfull ),
   .audiodata( data_to_fifo ),
   .wrclk(),         // is just bclk.
   .wrreq( fifo_wrreq )
);

fifo2fft #( .FFT_POINTS(`FFT_POINTS), .FFT_BUS(`FFT_BUS) )
   u2 (
   .reset( reset ),
   .clk( fft_clk ),
   .start2fill( tstart2fill ),
   .adclrc( adclrc ),
   // FIFO interface
   .fifo_rdempty( fifo_rdempty ),
   .fifo_wrempty( fifo_wrempty ),
   .fifo_rdfull( fifo_rdfull ),
   .fifo_wrfull( fifo_wrfull ),
   .fifo_rdreq( fifo_rdreq ),
   // FFT interface
   .sink_ready( fft_ready2receive ),
   .source_valid( tsource_valid ),
   .sink_valid( tsink_valid ),
   .sink_sop( tsink_sop ),
   .sink_eop( tsink_eop )
);

// FIFO. Audio in at 48 ksps. Audio out to FFT at 50 Msps.
audioFIFO u3 (
	.data( data_to_fifo ),
	.rdclk( fft_clk ),
	.rdreq( fifo_rdreq ),
	.wrclk( bclk ),
	.wrreq( fifo_wrreq ),
	.q( data_fifo_to_fft ),
	.rdempty( fifo_rdempty ),
	.rdfull( fifo_rdfull),
	.wrempty( fifo_wrempty ),
	.wrfull( fifo_wrfull )
);

myfft anfft (
   .clk( fft_clk ),
	.reset_n( rsi_reset_n ),
	.inverse( 1'b0 ),          // set the fft for forward transform
	.sink_valid( tsink_valid ),
	.sink_sop( tsink_sop ),
	.sink_eop( tsink_eop ),
	.sink_real( data_fifo_to_fft ),
	.sink_imag( 16'h0000 ),
	.sink_error( 2'b00 ),             // The fifo is always doing it's job.
	.source_ready( 1'b1 ),        // The fifo2fft state machine is always ready for the fft to work.
	.sink_ready( fft_ready2receive ),
	.source_error( tsource_error ),
	.source_sop( tsource_sop ),
	.source_eop( tsource_eop ),
	.source_valid( tsource_valid ),
	.source_real( tsource_real ),
   .source_imag( tsource_imag ),
   .fftpts_in( 5'b10000 ),       // simulate with 16 points at first
   .fftpts_out()
);

Mod_counter #( .N(`FFT_BUS), .M(`FFT_POINTS) )   // N = N-bit counter, M = count modulo
   ram_wr_addr ( 
		.clk( fft_clk ),  // Must be FFT clock
		.clk_en( tsource_valid ),
		.reset( ~tsource_valid ),
		.max_tick(),              // not used
		.q( ram_wr_address ),
		.pause( 1'b0 )           // addresses will be either held in reset, or running.
 );

fftram myram ( 
	.wrclock( fft_clk ),
	.data( power ),
	.rdaddress( avs_s1_address_iADDR ),
   .rdclock( csi_clk ),
	.rden( avs_s1_read_iRD /*&& (avs_s1_address_iADDR < RAM_SIZE)*/ && avs_s1_chipselect_iCS  ),
	.wraddress( ram_wr_address ),
	.wren( tsource_valid ),
	.q( avs_s1_readdata_oDATA )
);

// This next section calculates the power in each fft bin.
// Power = sqrt( real^2 + imag^2 )
assign real2 = tsource_real * tsource_real;
assign imag2 = tsource_imag * tsource_imag;
assign sum = real2 + imag2;

mysqrt sqrt ( 
	.radical( sum ),
	.q( power ),
	.remainder()
);

endmodule
