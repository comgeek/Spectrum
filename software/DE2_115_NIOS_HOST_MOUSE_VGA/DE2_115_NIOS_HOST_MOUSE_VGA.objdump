
DE2_115_NIOS_HOST_MOUSE_VGA.elf:     file format elf32-littlenios2
DE2_115_NIOS_HOST_MOUSE_VGA.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000545c memsz 0x0000545c flags r-x
    LOAD off    0x0000647c vaddr 0x0000547c paddr 0x00006bfc align 2**12
         filesz 0x00001780 memsz 0x00001780 flags rw-
    LOAD off    0x0000837c vaddr 0x0000837c paddr 0x0000837c align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004f00  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003bc  000050c0  000050c0  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001780  0000547c  00006bfc  0000647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000837c  0000837c  0000837c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00008498  00008498  00007bfc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007bfc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000760  00000000  00000000  00007c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000097aa  00000000  00000000  00008380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000365c  00000000  00000000  00011b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003ae1  00000000  00000000  00015186  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f7c  00000000  00000000  00018c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002046  00000000  00000000  00019be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000030ab  00000000  00000000  0001bc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001ecd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000388  00000000  00000000  0001ed38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000210ec  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000210ef  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000210f2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000210f3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000210f4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000210fc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00021109  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00021112  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0002111b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  00021127  2**0
                  CONTENTS, READONLY
 29 .jdi          00004706  00000000  00000000  00021151  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
000050c0 l    d  .rodata	00000000 .rodata
0000547c l    d  .rwdata	00000000 .rwdata
0000837c l    d  .bss	00000000 .bss
00008498 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE2_115_NIOS_HOST_MOUSE_VGA_bsp//obj/HAL/src/crt0.o
00000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 DE2_115_NIOS_HOST_MOUSE_VGA.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
00001d00 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001e98 l     F .text	00000034 alt_dev_reg
0000547c l     O .rwdata	00001060 jtag_uart
000064dc l     O .rwdata	00000120 lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000021a4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000023b0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00006bc8 l     O .rwdata	00000004 colstart
000029e8 l     F .text	000000b8 lcd_write_command
00002aa0 l     F .text	000000d8 lcd_write_data
00002b78 l     F .text	000000d0 lcd_clear_screen
00002c48 l     F .text	000001ec lcd_repaint_screen
00002e34 l     F .text	000000cc lcd_scroll_up
00002f00 l     F .text	000002ac lcd_handle_escape
00003684 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000038c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00003c3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00003d90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00003dbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004230 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004370 l     F .text	0000003c alt_get_errno
000043ac l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
000052f7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000067a4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001dec g     F .text	0000007c alt_main
00008398 g     O .bss	00000100 alt_irq
00006bfc g       *ABS*	00000000 __flash_rwdata_start
00000e0c g     F .text	000000a4 LCD_Test
000047cc g     F .text	00000024 altera_nios2_gen2_irq_init
00000f54 g     F .text	0000005c Set_Pixel_On_Color
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008394 g     O .bss	00000004 errno
00008380 g     O .bss	00000004 alt_argv
0000ebc8 g       *ABS*	00000000 _gp
00001e68 g     F .text	00000030 usleep
00006624 g     O .rwdata	00000180 alt_fd_list
0000020c g     F .text	00000090 Vga_clear_screen
000047f0 g     F .text	00000090 alt_find_dev
00004b84 g     F .text	00000148 memcpy
00001974 g     F .text	000000dc .hidden __floatsidf
000042f4 g     F .text	0000007c alt_io_redirect
000050c0 g       *ABS*	00000000 __DTOR_END__
000025a8 g     F .text	0000021c altera_avalon_jtag_uart_read
00001bac g     F .text	00000064 .hidden __udivsi3
00004a2c g     F .text	00000090 alt_icache_flush
00006bdc g     O .rwdata	00000004 alt_max_fd
00006bf4 g     O .rwdata	00000004 _global_impure_ptr
00008498 g       *ABS*	00000000 __bss_end
00004140 g     F .text	000000f0 alt_iic_isr_register
000046c4 g     F .text	00000108 alt_tick
000040f4 g     F .text	0000004c alt_ic_irq_enabled
00004628 g     F .text	0000009c alt_alarm_stop
00008388 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d4 alt_irq_handler
000065fc g     O .rwdata	00000028 alt_dev_null
00000eb0 g     F .text	00000048 Set_Cursor_XY
00003d48 g     F .text	00000048 alt_dcache_flush_all
000018f4 g     F .text	00000080 .hidden __fixdfsi
00006bfc g       *ABS*	00000000 __ram_rwdata_end
00006bd4 g     O .rwdata	00000008 alt_dev_list
0000547c g       *ABS*	00000000 __ram_rodata_end
00001c10 g     F .text	00000058 .hidden __umodsi3
00008498 g       *ABS*	00000000 end
000031ac g     F .text	000004d8 altera_avalon_lcd_16207_write
000020e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000050c0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000393c g     F .text	0000007c alt_avalon_timer_sc_init
00001a50 g     F .text	00000064 .hidden __clzsi2
000027c4 g     F .text	00000224 altera_avalon_jtag_uart_write
00004f0c g     F .text	00000180 __call_exitprocs
000001c0 g     F .text	0000004c _start
0000838c g     O .bss	00000004 _alt_tick_rate
00008390 g     O .bss	00000004 _alt_nticks
00001f04 g     F .text	0000007c alt_sys_init
00004df4 g     F .text	00000118 __register_exitproc
00002450 g     F .text	00000068 altera_avalon_jtag_uart_close
0000547c g       *ABS*	00000000 __ram_rwdata_start
000050c0 g       *ABS*	00000000 __ram_rodata_start
00001f80 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00004988 g     F .text	000000a4 alt_get_fd
00003ae4 g     F .text	00000158 alt_busy_sleep
00004b08 g     F .text	0000007c memcmp
00002040 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008498 g       *ABS*	00000000 __alt_stack_base
00002090 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000100c g     F .text	000008e8 .hidden __divdf3
00004880 g     F .text	00000108 alt_find_file
00003df8 g     F .text	000000a4 alt_dev_llist_insert
0000837c g       *ABS*	00000000 __bss_start
00000ca8 g     F .text	000000a0 LCD_Init
00004ccc g     F .text	00000128 memset
0000029c g     F .text	00000a0c main
00008384 g     O .bss	00000004 alt_envp
00001fe0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000ef8 g     F .text	0000005c Set_Cursor_Color
00003730 g     F .text	00000134 altera_avalon_lcd_16207_init
00000dcc g     F .text	00000040 LCD_Line2
00006be0 g     O .rwdata	00000004 alt_errno
00001ab4 g     F .text	00000084 .hidden __divsi3
000050c0 g       *ABS*	00000000 __CTOR_END__
000050c0 g       *ABS*	00000000 __flash_rodata_start
000050c0 g       *ABS*	00000000 __DTOR_LIST__
00001ecc g     F .text	00000038 alt_irq_init
00000d48 g     F .text	00000084 LCD_Show_Text
000045c4 g     F .text	00000064 alt_release_fd
000050c0 g     O .rodata	00000100 .hidden __clz_tab
00004abc g     F .text	00000014 atexit
00006bf8 g     O .rwdata	00000004 _impure_ptr
0000837c g     O .bss	00000004 alt_argc
00003efc g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00003864 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00006bcc g     O .rwdata	00000008 alt_fs_list
00000fb0 g     F .text	0000005c Set_Pixel_Off_Color
00000020 g       *ABS*	00000000 __ram_exceptions_start
00003f90 g     F .text	00000050 alt_ic_isr_register
00006bfc g       *ABS*	00000000 _edata
00008498 g       *ABS*	00000000 _end
000001c0 g       *ABS*	00000000 __ram_exceptions_end
000024b8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00004068 g     F .text	0000008c alt_ic_irq_disable
00004ad0 g     F .text	00000038 exit
00001b38 g     F .text	00000074 .hidden __modsi3
00006bf0 g     O .rwdata	00000004 __ctype_ptr__
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000051f6 g     O .rodata	00000101 _ctype_
0000508c g     F .text	00000034 _exit
000039b8 g     F .text	0000012c alt_alarm_start
00001c68 g     F .text	00000098 strlen
00004470 g     F .text	00000154 open
00003f5c g     F .text	00000034 alt_icache_flush_all
00006be4 g     O .rwdata	00000004 alt_priority_mask
00003fe0 g     F .text	00000088 alt_ic_irq_enable
00006be8 g     O .rwdata	00000008 alt_alarm_list
00003e9c g     F .text	00000060 _do_ctors
00003c78 g     F .text	000000d0 close
00001d68 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10a0e604 	addi	r2,r2,-31848
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10a0e604 	addi	r2,r2,-31848
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1cc:	00bffd16 	blt	zero,r2,1c4 <__alt_data_end+0xf80001c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1dc:	d6baf214 	ori	gp,gp,60360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1e4:	10a0df14 	ori	r2,r2,33660

    movhi r3, %hi(__bss_end)
     1e8:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1ec:	18e12614 	ori	r3,r3,33944

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x40>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <__alt_data_end+0xf80001f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	0001d680 	call	1d68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	0001dec0 	call	1dec <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <__alt_data_end+0xf8000208>

0000020c <Vga_clear_screen>:
#define number_of_bars 19

//--------------------------------------
//----------clear screen----------------
void Vga_clear_screen(unsigned int base)
{
     20c:	defffd04 	addi	sp,sp,-12
     210:	df000215 	stw	fp,8(sp)
     214:	df000204 	addi	fp,sp,8
     218:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
     21c:	e03ffe8d 	sth	zero,-6(fp)
     220:	00001606 	br	27c <Vga_clear_screen+0x70>
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
     224:	e03ffe0d 	sth	zero,-8(fp)
     228:	00000e06 	br	264 <Vga_clear_screen+0x58>
        {
            Vga_Clr_Pixel(base,x_col,y_col);
     22c:	e0bffe8b 	ldhu	r2,-6(fp)
     230:	10c0a024 	muli	r3,r2,640
     234:	e0bffe0b 	ldhu	r2,-8(fp)
     238:	1885883a 	add	r2,r3,r2
     23c:	1085883a 	add	r2,r2,r2
     240:	1085883a 	add	r2,r2,r2
     244:	1007883a 	mov	r3,r2
     248:	e0bfff17 	ldw	r2,-4(fp)
     24c:	1885883a 	add	r2,r3,r2
     250:	0007883a 	mov	r3,zero
     254:	10c00035 	stwio	r3,0(r2)
void Vga_clear_screen(unsigned int base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
     258:	e0bffe0b 	ldhu	r2,-8(fp)
     25c:	10800044 	addi	r2,r2,1
     260:	e0bffe0d 	sth	r2,-8(fp)
     264:	e0bffe0b 	ldhu	r2,-8(fp)
     268:	1080a030 	cmpltui	r2,r2,640
     26c:	103fef1e 	bne	r2,zero,22c <__alt_data_end+0xf800022c>
//--------------------------------------
//----------clear screen----------------
void Vga_clear_screen(unsigned int base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
     270:	e0bffe8b 	ldhu	r2,-6(fp)
     274:	10800044 	addi	r2,r2,1
     278:	e0bffe8d 	sth	r2,-6(fp)
     27c:	e0bffe8b 	ldhu	r2,-6(fp)
     280:	10807830 	cmpltui	r2,r2,480
     284:	103fe71e 	bne	r2,zero,224 <__alt_data_end+0xf8000224>
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
        {
            Vga_Clr_Pixel(base,x_col,y_col);
        }
      }
}
     288:	0001883a 	nop
     28c:	e037883a 	mov	sp,fp
     290:	df000017 	ldw	fp,0(sp)
     294:	dec00104 	addi	sp,sp,4
     298:	f800283a 	ret

0000029c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     29c:	defee404 	addi	sp,sp,-1136
     2a0:	dfc11b15 	stw	ra,1132(sp)
     2a4:	df011a15 	stw	fp,1128(sp)
     2a8:	df011a04 	addi	fp,sp,1128

    //Initialize the VGA display
    
    VGA_Ctrl_Reg vga_ctrl_set;

    vga_ctrl_set.VGA_Ctrl_Flags.RED_ON    = 1;
     2ac:	e0bfff03 	ldbu	r2,-4(fp)
     2b0:	10800054 	ori	r2,r2,1
     2b4:	e0bfff05 	stb	r2,-4(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.GREEN_ON  = 1;
     2b8:	e0bfff03 	ldbu	r2,-4(fp)
     2bc:	10800094 	ori	r2,r2,2
     2c0:	e0bfff05 	stb	r2,-4(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.BLUE_ON   = 1;
     2c4:	e0bfff03 	ldbu	r2,-4(fp)
     2c8:	10800114 	ori	r2,r2,4
     2cc:	e0bfff05 	stb	r2,-4(fp)
    vga_ctrl_set.VGA_Ctrl_Flags.CURSOR_ON = 0;
     2d0:	e0ffff03 	ldbu	r3,-4(fp)
     2d4:	00bffdc4 	movi	r2,-9
     2d8:	1884703a 	and	r2,r3,r2
     2dc:	e0bfff05 	stb	r2,-4(fp)

    Vga_Write_Ctrl(VPG_BASE, vga_ctrl_set.Value);
     2e0:	e0bfff03 	ldbu	r2,-4(fp)
     2e4:	10c03fcc 	andi	r3,r2,255
     2e8:	008244f4 	movhi	r2,2323
     2ec:	10b00004 	addi	r2,r2,-16384
     2f0:	10c00035 	stwio	r3,0(r2)
    Vga_clear_screen(VPG_BASE); //clear the screen
     2f4:	01024034 	movhi	r4,2304
     2f8:	000020c0 	call	20c <Vga_clear_screen>
    Set_Pixel_On_Color(512,512,512);
     2fc:	01808004 	movi	r6,512
     300:	01408004 	movi	r5,512
     304:	01008004 	movi	r4,512
     308:	0000f540 	call	f54 <Set_Pixel_On_Color>
    Set_Pixel_Off_Color(0,0,0);
     30c:	000d883a 	mov	r6,zero
     310:	000b883a 	mov	r5,zero
     314:	0009883a 	mov	r4,zero
     318:	0000fb00 	call	fb0 <Set_Pixel_Off_Color>
    Set_Cursor_Color(0,1023,0);
     31c:	000d883a 	mov	r6,zero
     320:	0140ffc4 	movi	r5,1023
     324:	0009883a 	mov	r4,zero
     328:	0000ef80 	call	ef8 <Set_Cursor_Color>

    while(1)
    {
    // Read the FFT values
    for( myint=0; myint < (half_fft_size-1); myint++)
     32c:	e03ee615 	stw	zero,-1128(fp)
     330:	00001106 	br	378 <main+0xdc>
    {
    	mydata[myint] = IORD(COPROC_TOP_0_BASE, myint);
     334:	e0bee617 	ldw	r2,-1128(fp)
     338:	1085883a 	add	r2,r2,r2
     33c:	1085883a 	add	r2,r2,r2
     340:	1007883a 	mov	r3,r2
     344:	00824834 	movhi	r2,2336
     348:	1885883a 	add	r2,r3,r2
     34c:	10c00037 	ldwio	r3,0(r2)
     350:	e0bee617 	ldw	r2,-1128(fp)
     354:	1085883a 	add	r2,r2,r2
     358:	1085883a 	add	r2,r2,r2
     35c:	e13ee604 	addi	r4,fp,-1128
     360:	2085883a 	add	r2,r4,r2
     364:	10800504 	addi	r2,r2,20
     368:	10c00015 	stw	r3,0(r2)
    Set_Cursor_Color(0,1023,0);

    while(1)
    {
    // Read the FFT values
    for( myint=0; myint < (half_fft_size-1); myint++)
     36c:	e0bee617 	ldw	r2,-1128(fp)
     370:	10800044 	addi	r2,r2,1
     374:	e0bee615 	stw	r2,-1128(fp)
     378:	e0bee617 	ldw	r2,-1128(fp)
     37c:	10803fd0 	cmplti	r2,r2,255
     380:	103fec1e 	bne	r2,zero,334 <__alt_data_end+0xf8000334>
    //printf("mydata[0] = %x\n",mydata[3]);
    //-----------------------------------------------------------------
    // Now do a fake log(freq) binning of the linear frequency values.
    // Looks similar to a log/log Real-time Analyzer (RTA) plot.
    //-----------------------------------------------------------------
    myfreq[0] = mydata[0] / 1.5;
     384:	e0beeb17 	ldw	r2,-1108(fp)
     388:	1009883a 	mov	r4,r2
     38c:	00019740 	call	1974 <__floatsidf>
     390:	1011883a 	mov	r8,r2
     394:	1813883a 	mov	r9,r3
     398:	000d883a 	mov	r6,zero
     39c:	01cffe34 	movhi	r7,16376
     3a0:	4009883a 	mov	r4,r8
     3a4:	480b883a 	mov	r5,r9
     3a8:	000100c0 	call	100c <__divdf3>
     3ac:	1009883a 	mov	r4,r2
     3b0:	180b883a 	mov	r5,r3
     3b4:	2005883a 	mov	r2,r4
     3b8:	2807883a 	mov	r3,r5
     3bc:	1009883a 	mov	r4,r2
     3c0:	180b883a 	mov	r5,r3
     3c4:	00018f40 	call	18f4 <__fixdfsi>
     3c8:	e0bfeb15 	stw	r2,-84(fp)
    myfreq[1] = mydata[1];
     3cc:	e0beec17 	ldw	r2,-1104(fp)
     3d0:	e0bfec15 	stw	r2,-80(fp)
    myfreq[2] = mydata[2];
     3d4:	e0beed17 	ldw	r2,-1100(fp)
     3d8:	e0bfed15 	stw	r2,-76(fp)
    myfreq[3] = mydata[3];
     3dc:	e0beee17 	ldw	r2,-1096(fp)
     3e0:	e0bfee15 	stw	r2,-72(fp)
    myfreq[4] = mydata[4];
     3e4:	e0beef17 	ldw	r2,-1092(fp)
     3e8:	e0bfef15 	stw	r2,-68(fp)
    myfreq[5] = mydata[5];
     3ec:	e0bef017 	ldw	r2,-1088(fp)
     3f0:	e0bff015 	stw	r2,-64(fp)
    myfreq[6] = mydata[6] + mydata[7];
     3f4:	e0fef117 	ldw	r3,-1084(fp)
     3f8:	e0bef217 	ldw	r2,-1080(fp)
     3fc:	1885883a 	add	r2,r3,r2
     400:	e0bff115 	stw	r2,-60(fp)
    myfreq[6] /= 1.25;
     404:	e0bff117 	ldw	r2,-60(fp)
     408:	1009883a 	mov	r4,r2
     40c:	00019740 	call	1974 <__floatsidf>
     410:	1011883a 	mov	r8,r2
     414:	1813883a 	mov	r9,r3
     418:	000d883a 	mov	r6,zero
     41c:	01cffd34 	movhi	r7,16372
     420:	4009883a 	mov	r4,r8
     424:	480b883a 	mov	r5,r9
     428:	000100c0 	call	100c <__divdf3>
     42c:	1009883a 	mov	r4,r2
     430:	180b883a 	mov	r5,r3
     434:	2005883a 	mov	r2,r4
     438:	2807883a 	mov	r3,r5
     43c:	1009883a 	mov	r4,r2
     440:	180b883a 	mov	r5,r3
     444:	00018f40 	call	18f4 <__fixdfsi>
     448:	e0bff115 	stw	r2,-60(fp)
    myfreq[7] = mydata[8] + mydata[9];
     44c:	e0fef317 	ldw	r3,-1076(fp)
     450:	e0bef417 	ldw	r2,-1072(fp)
     454:	1885883a 	add	r2,r3,r2
     458:	e0bff215 	stw	r2,-56(fp)
    myfreq[7] /= 1.25;
     45c:	e0bff217 	ldw	r2,-56(fp)
     460:	1009883a 	mov	r4,r2
     464:	00019740 	call	1974 <__floatsidf>
     468:	1011883a 	mov	r8,r2
     46c:	1813883a 	mov	r9,r3
     470:	000d883a 	mov	r6,zero
     474:	01cffd34 	movhi	r7,16372
     478:	4009883a 	mov	r4,r8
     47c:	480b883a 	mov	r5,r9
     480:	000100c0 	call	100c <__divdf3>
     484:	1009883a 	mov	r4,r2
     488:	180b883a 	mov	r5,r3
     48c:	2005883a 	mov	r2,r4
     490:	2807883a 	mov	r3,r5
     494:	1009883a 	mov	r4,r2
     498:	180b883a 	mov	r5,r3
     49c:	00018f40 	call	18f4 <__fixdfsi>
     4a0:	e0bff215 	stw	r2,-56(fp)
    myfreq[8] = mydata[10] + mydata[11] + mydata[12];
     4a4:	e0fef517 	ldw	r3,-1068(fp)
     4a8:	e0bef617 	ldw	r2,-1064(fp)
     4ac:	1887883a 	add	r3,r3,r2
     4b0:	e0bef717 	ldw	r2,-1060(fp)
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	e0bff315 	stw	r2,-52(fp)
    myfreq[8] /= 1.3;
     4bc:	e0bff317 	ldw	r2,-52(fp)
     4c0:	1009883a 	mov	r4,r2
     4c4:	00019740 	call	1974 <__floatsidf>
     4c8:	1011883a 	mov	r8,r2
     4cc:	1813883a 	mov	r9,r3
     4d0:	01b33374 	movhi	r6,52429
     4d4:	31b33344 	addi	r6,r6,-13107
     4d8:	01cffd74 	movhi	r7,16373
     4dc:	39f33304 	addi	r7,r7,-13108
     4e0:	4009883a 	mov	r4,r8
     4e4:	480b883a 	mov	r5,r9
     4e8:	000100c0 	call	100c <__divdf3>
     4ec:	1009883a 	mov	r4,r2
     4f0:	180b883a 	mov	r5,r3
     4f4:	2005883a 	mov	r2,r4
     4f8:	2807883a 	mov	r3,r5
     4fc:	1009883a 	mov	r4,r2
     500:	180b883a 	mov	r5,r3
     504:	00018f40 	call	18f4 <__fixdfsi>
     508:	e0bff315 	stw	r2,-52(fp)
    myfreq[9] = mydata[13] + mydata[14] + mydata[15];
     50c:	e0fef817 	ldw	r3,-1056(fp)
     510:	e0bef917 	ldw	r2,-1052(fp)
     514:	1887883a 	add	r3,r3,r2
     518:	e0befa17 	ldw	r2,-1048(fp)
     51c:	1885883a 	add	r2,r3,r2
     520:	e0bff415 	stw	r2,-48(fp)
    myfreq[9] /= 1.3;
     524:	e0bff417 	ldw	r2,-48(fp)
     528:	1009883a 	mov	r4,r2
     52c:	00019740 	call	1974 <__floatsidf>
     530:	1011883a 	mov	r8,r2
     534:	1813883a 	mov	r9,r3
     538:	01b33374 	movhi	r6,52429
     53c:	31b33344 	addi	r6,r6,-13107
     540:	01cffd74 	movhi	r7,16373
     544:	39f33304 	addi	r7,r7,-13108
     548:	4009883a 	mov	r4,r8
     54c:	480b883a 	mov	r5,r9
     550:	000100c0 	call	100c <__divdf3>
     554:	1009883a 	mov	r4,r2
     558:	180b883a 	mov	r5,r3
     55c:	2005883a 	mov	r2,r4
     560:	2807883a 	mov	r3,r5
     564:	1009883a 	mov	r4,r2
     568:	180b883a 	mov	r5,r3
     56c:	00018f40 	call	18f4 <__fixdfsi>
     570:	e0bff415 	stw	r2,-48(fp)
    myfreq[10] = mydata[16] + mydata[17] + mydata[18] + mydata[19];
     574:	e0fefb17 	ldw	r3,-1044(fp)
     578:	e0befc17 	ldw	r2,-1040(fp)
     57c:	1887883a 	add	r3,r3,r2
     580:	e0befd17 	ldw	r2,-1036(fp)
     584:	1887883a 	add	r3,r3,r2
     588:	e0befe17 	ldw	r2,-1032(fp)
     58c:	1885883a 	add	r2,r3,r2
     590:	e0bff515 	stw	r2,-44(fp)
    myfreq[10] /= 1.4;
     594:	e0bff517 	ldw	r2,-44(fp)
     598:	1009883a 	mov	r4,r2
     59c:	00019740 	call	1974 <__floatsidf>
     5a0:	1011883a 	mov	r8,r2
     5a4:	1813883a 	mov	r9,r3
     5a8:	019999b4 	movhi	r6,26214
     5ac:	31999984 	addi	r6,r6,26214
     5b0:	01cffdb4 	movhi	r7,16374
     5b4:	39d99984 	addi	r7,r7,26214
     5b8:	4009883a 	mov	r4,r8
     5bc:	480b883a 	mov	r5,r9
     5c0:	000100c0 	call	100c <__divdf3>
     5c4:	1009883a 	mov	r4,r2
     5c8:	180b883a 	mov	r5,r3
     5cc:	2005883a 	mov	r2,r4
     5d0:	2807883a 	mov	r3,r5
     5d4:	1009883a 	mov	r4,r2
     5d8:	180b883a 	mov	r5,r3
     5dc:	00018f40 	call	18f4 <__fixdfsi>
     5e0:	e0bff515 	stw	r2,-44(fp)
    myfreq[11] = mydata[20] + mydata[21] + mydata[22] + mydata[23] + mydata[24];
     5e4:	e0feff17 	ldw	r3,-1028(fp)
     5e8:	e0bf0017 	ldw	r2,-1024(fp)
     5ec:	1887883a 	add	r3,r3,r2
     5f0:	e0bf0117 	ldw	r2,-1020(fp)
     5f4:	1887883a 	add	r3,r3,r2
     5f8:	e0bf0217 	ldw	r2,-1016(fp)
     5fc:	1887883a 	add	r3,r3,r2
     600:	e0bf0317 	ldw	r2,-1012(fp)
     604:	1885883a 	add	r2,r3,r2
     608:	e0bff615 	stw	r2,-40(fp)
    myfreq[11] /= 1.6;
     60c:	e0bff617 	ldw	r2,-40(fp)
     610:	1009883a 	mov	r4,r2
     614:	00019740 	call	1974 <__floatsidf>
     618:	1011883a 	mov	r8,r2
     61c:	1813883a 	mov	r9,r3
     620:	01a666b4 	movhi	r6,39322
     624:	31a66684 	addi	r6,r6,-26214
     628:	01cffeb4 	movhi	r7,16378
     62c:	39e66644 	addi	r7,r7,-26215
     630:	4009883a 	mov	r4,r8
     634:	480b883a 	mov	r5,r9
     638:	000100c0 	call	100c <__divdf3>
     63c:	1009883a 	mov	r4,r2
     640:	180b883a 	mov	r5,r3
     644:	2005883a 	mov	r2,r4
     648:	2807883a 	mov	r3,r5
     64c:	1009883a 	mov	r4,r2
     650:	180b883a 	mov	r5,r3
     654:	00018f40 	call	18f4 <__fixdfsi>
     658:	e0bff615 	stw	r2,-40(fp)
    myfreq[12] = 0;
     65c:	e03ff715 	stw	zero,-36(fp)
    for( xval=25; xval<=29; xval++)
     660:	00800644 	movi	r2,25
     664:	e0bee715 	stw	r2,-1124(fp)
     668:	00000d06 	br	6a0 <main+0x404>
    {
    	myfreq[12] += mydata[xval];
     66c:	e0fff717 	ldw	r3,-36(fp)
     670:	e0bee717 	ldw	r2,-1124(fp)
     674:	1085883a 	add	r2,r2,r2
     678:	1085883a 	add	r2,r2,r2
     67c:	e13ee604 	addi	r4,fp,-1128
     680:	2085883a 	add	r2,r4,r2
     684:	10800504 	addi	r2,r2,20
     688:	10800017 	ldw	r2,0(r2)
     68c:	1885883a 	add	r2,r3,r2
     690:	e0bff715 	stw	r2,-36(fp)
    myfreq[10] = mydata[16] + mydata[17] + mydata[18] + mydata[19];
    myfreq[10] /= 1.4;
    myfreq[11] = mydata[20] + mydata[21] + mydata[22] + mydata[23] + mydata[24];
    myfreq[11] /= 1.6;
    myfreq[12] = 0;
    for( xval=25; xval<=29; xval++)
     694:	e0bee717 	ldw	r2,-1124(fp)
     698:	10800044 	addi	r2,r2,1
     69c:	e0bee715 	stw	r2,-1124(fp)
     6a0:	e0bee717 	ldw	r2,-1124(fp)
     6a4:	10800790 	cmplti	r2,r2,30
     6a8:	103ff01e 	bne	r2,zero,66c <__alt_data_end+0xf800066c>
    {
    	myfreq[12] += mydata[xval];
    }
    myfreq[12] /= 1.7;
     6ac:	e0bff717 	ldw	r2,-36(fp)
     6b0:	1009883a 	mov	r4,r2
     6b4:	00019740 	call	1974 <__floatsidf>
     6b8:	1011883a 	mov	r8,r2
     6bc:	1813883a 	mov	r9,r3
     6c0:	018cccf4 	movhi	r6,13107
     6c4:	318cccc4 	addi	r6,r6,13107
     6c8:	01cffef4 	movhi	r7,16379
     6cc:	39ccccc4 	addi	r7,r7,13107
     6d0:	4009883a 	mov	r4,r8
     6d4:	480b883a 	mov	r5,r9
     6d8:	000100c0 	call	100c <__divdf3>
     6dc:	1009883a 	mov	r4,r2
     6e0:	180b883a 	mov	r5,r3
     6e4:	2005883a 	mov	r2,r4
     6e8:	2807883a 	mov	r3,r5
     6ec:	1009883a 	mov	r4,r2
     6f0:	180b883a 	mov	r5,r3
     6f4:	00018f40 	call	18f4 <__fixdfsi>
     6f8:	e0bff715 	stw	r2,-36(fp)
    myfreq[13] = 0;
     6fc:	e03ff815 	stw	zero,-32(fp)
    for( xval=30; xval<=38; xval++)
     700:	00800784 	movi	r2,30
     704:	e0bee715 	stw	r2,-1124(fp)
     708:	00000d06 	br	740 <main+0x4a4>
    {
       myfreq[13] += mydata[xval];
     70c:	e0fff817 	ldw	r3,-32(fp)
     710:	e0bee717 	ldw	r2,-1124(fp)
     714:	1085883a 	add	r2,r2,r2
     718:	1085883a 	add	r2,r2,r2
     71c:	e13ee604 	addi	r4,fp,-1128
     720:	2085883a 	add	r2,r4,r2
     724:	10800504 	addi	r2,r2,20
     728:	10800017 	ldw	r2,0(r2)
     72c:	1885883a 	add	r2,r3,r2
     730:	e0bff815 	stw	r2,-32(fp)
    {
    	myfreq[12] += mydata[xval];
    }
    myfreq[12] /= 1.7;
    myfreq[13] = 0;
    for( xval=30; xval<=38; xval++)
     734:	e0bee717 	ldw	r2,-1124(fp)
     738:	10800044 	addi	r2,r2,1
     73c:	e0bee715 	stw	r2,-1124(fp)
     740:	e0bee717 	ldw	r2,-1124(fp)
     744:	108009d0 	cmplti	r2,r2,39
     748:	103ff01e 	bne	r2,zero,70c <__alt_data_end+0xf800070c>
    {
       myfreq[13] += mydata[xval];
    }
    myfreq[13] /= 1.9;
     74c:	e0bff817 	ldw	r2,-32(fp)
     750:	1009883a 	mov	r4,r2
     754:	00019740 	call	1974 <__floatsidf>
     758:	1011883a 	mov	r8,r2
     75c:	1813883a 	mov	r9,r3
     760:	019999b4 	movhi	r6,26214
     764:	31999984 	addi	r6,r6,26214
     768:	01cfffb4 	movhi	r7,16382
     76c:	39d99984 	addi	r7,r7,26214
     770:	4009883a 	mov	r4,r8
     774:	480b883a 	mov	r5,r9
     778:	000100c0 	call	100c <__divdf3>
     77c:	1009883a 	mov	r4,r2
     780:	180b883a 	mov	r5,r3
     784:	2005883a 	mov	r2,r4
     788:	2807883a 	mov	r3,r5
     78c:	1009883a 	mov	r4,r2
     790:	180b883a 	mov	r5,r3
     794:	00018f40 	call	18f4 <__fixdfsi>
     798:	e0bff815 	stw	r2,-32(fp)
    myfreq[14] = 0;
     79c:	e03ff915 	stw	zero,-28(fp)
    for( xval=39; xval<=48; xval++)
     7a0:	008009c4 	movi	r2,39
     7a4:	e0bee715 	stw	r2,-1124(fp)
     7a8:	00000d06 	br	7e0 <main+0x544>
    {
        myfreq[14] += mydata[xval];
     7ac:	e0fff917 	ldw	r3,-28(fp)
     7b0:	e0bee717 	ldw	r2,-1124(fp)
     7b4:	1085883a 	add	r2,r2,r2
     7b8:	1085883a 	add	r2,r2,r2
     7bc:	e13ee604 	addi	r4,fp,-1128
     7c0:	2085883a 	add	r2,r4,r2
     7c4:	10800504 	addi	r2,r2,20
     7c8:	10800017 	ldw	r2,0(r2)
     7cc:	1885883a 	add	r2,r3,r2
     7d0:	e0bff915 	stw	r2,-28(fp)
    {
       myfreq[13] += mydata[xval];
    }
    myfreq[13] /= 1.9;
    myfreq[14] = 0;
    for( xval=39; xval<=48; xval++)
     7d4:	e0bee717 	ldw	r2,-1124(fp)
     7d8:	10800044 	addi	r2,r2,1
     7dc:	e0bee715 	stw	r2,-1124(fp)
     7e0:	e0bee717 	ldw	r2,-1124(fp)
     7e4:	10800c50 	cmplti	r2,r2,49
     7e8:	103ff01e 	bne	r2,zero,7ac <__alt_data_end+0xf80007ac>
    {
        myfreq[14] += mydata[xval];
    }
    myfreq[14] /= 2;
     7ec:	e0bff917 	ldw	r2,-28(fp)
     7f0:	1006d7fa 	srli	r3,r2,31
     7f4:	1885883a 	add	r2,r3,r2
     7f8:	1005d07a 	srai	r2,r2,1
     7fc:	e0bff915 	stw	r2,-28(fp)
    myfreq[15] = 0;
     800:	e03ffa15 	stw	zero,-24(fp)
    for( xval=49; xval<=61; xval++)
     804:	00800c44 	movi	r2,49
     808:	e0bee715 	stw	r2,-1124(fp)
     80c:	00000d06 	br	844 <main+0x5a8>
    {
         myfreq[15] += mydata[xval];
     810:	e0fffa17 	ldw	r3,-24(fp)
     814:	e0bee717 	ldw	r2,-1124(fp)
     818:	1085883a 	add	r2,r2,r2
     81c:	1085883a 	add	r2,r2,r2
     820:	e13ee604 	addi	r4,fp,-1128
     824:	2085883a 	add	r2,r4,r2
     828:	10800504 	addi	r2,r2,20
     82c:	10800017 	ldw	r2,0(r2)
     830:	1885883a 	add	r2,r3,r2
     834:	e0bffa15 	stw	r2,-24(fp)
    {
        myfreq[14] += mydata[xval];
    }
    myfreq[14] /= 2;
    myfreq[15] = 0;
    for( xval=49; xval<=61; xval++)
     838:	e0bee717 	ldw	r2,-1124(fp)
     83c:	10800044 	addi	r2,r2,1
     840:	e0bee715 	stw	r2,-1124(fp)
     844:	e0bee717 	ldw	r2,-1124(fp)
     848:	10800f90 	cmplti	r2,r2,62
     84c:	103ff01e 	bne	r2,zero,810 <__alt_data_end+0xf8000810>
    {
         myfreq[15] += mydata[xval];
    }
    myfreq[15] /= 2.1;
     850:	e0bffa17 	ldw	r2,-24(fp)
     854:	1009883a 	mov	r4,r2
     858:	00019740 	call	1974 <__floatsidf>
     85c:	1011883a 	mov	r8,r2
     860:	1813883a 	mov	r9,r3
     864:	01b33374 	movhi	r6,52429
     868:	31b33344 	addi	r6,r6,-13107
     86c:	01d00074 	movhi	r7,16385
     870:	39f33304 	addi	r7,r7,-13108
     874:	4009883a 	mov	r4,r8
     878:	480b883a 	mov	r5,r9
     87c:	000100c0 	call	100c <__divdf3>
     880:	1009883a 	mov	r4,r2
     884:	180b883a 	mov	r5,r3
     888:	2005883a 	mov	r2,r4
     88c:	2807883a 	mov	r3,r5
     890:	1009883a 	mov	r4,r2
     894:	180b883a 	mov	r5,r3
     898:	00018f40 	call	18f4 <__fixdfsi>
     89c:	e0bffa15 	stw	r2,-24(fp)
    myfreq[16] = 0;
     8a0:	e03ffb15 	stw	zero,-20(fp)
    for( xval=62; xval<=75; xval++)
     8a4:	00800f84 	movi	r2,62
     8a8:	e0bee715 	stw	r2,-1124(fp)
     8ac:	00000d06 	br	8e4 <main+0x648>
    {
        myfreq[16] += mydata[xval];
     8b0:	e0fffb17 	ldw	r3,-20(fp)
     8b4:	e0bee717 	ldw	r2,-1124(fp)
     8b8:	1085883a 	add	r2,r2,r2
     8bc:	1085883a 	add	r2,r2,r2
     8c0:	e13ee604 	addi	r4,fp,-1128
     8c4:	2085883a 	add	r2,r4,r2
     8c8:	10800504 	addi	r2,r2,20
     8cc:	10800017 	ldw	r2,0(r2)
     8d0:	1885883a 	add	r2,r3,r2
     8d4:	e0bffb15 	stw	r2,-20(fp)
    {
         myfreq[15] += mydata[xval];
    }
    myfreq[15] /= 2.1;
    myfreq[16] = 0;
    for( xval=62; xval<=75; xval++)
     8d8:	e0bee717 	ldw	r2,-1124(fp)
     8dc:	10800044 	addi	r2,r2,1
     8e0:	e0bee715 	stw	r2,-1124(fp)
     8e4:	e0bee717 	ldw	r2,-1124(fp)
     8e8:	10801310 	cmplti	r2,r2,76
     8ec:	103ff01e 	bne	r2,zero,8b0 <__alt_data_end+0xf80008b0>
    {
        myfreq[16] += mydata[xval];
    }
    myfreq[16] /= 2.1;
     8f0:	e0bffb17 	ldw	r2,-20(fp)
     8f4:	1009883a 	mov	r4,r2
     8f8:	00019740 	call	1974 <__floatsidf>
     8fc:	1011883a 	mov	r8,r2
     900:	1813883a 	mov	r9,r3
     904:	01b33374 	movhi	r6,52429
     908:	31b33344 	addi	r6,r6,-13107
     90c:	01d00074 	movhi	r7,16385
     910:	39f33304 	addi	r7,r7,-13108
     914:	4009883a 	mov	r4,r8
     918:	480b883a 	mov	r5,r9
     91c:	000100c0 	call	100c <__divdf3>
     920:	1009883a 	mov	r4,r2
     924:	180b883a 	mov	r5,r3
     928:	2005883a 	mov	r2,r4
     92c:	2807883a 	mov	r3,r5
     930:	1009883a 	mov	r4,r2
     934:	180b883a 	mov	r5,r3
     938:	00018f40 	call	18f4 <__fixdfsi>
     93c:	e0bffb15 	stw	r2,-20(fp)
    myfreq[17] = 0;
     940:	e03ffc15 	stw	zero,-16(fp)
    for( xval=76; xval<=96; xval++)
     944:	00801304 	movi	r2,76
     948:	e0bee715 	stw	r2,-1124(fp)
     94c:	00000d06 	br	984 <main+0x6e8>
    {
        myfreq[17] += mydata[xval];
     950:	e0fffc17 	ldw	r3,-16(fp)
     954:	e0bee717 	ldw	r2,-1124(fp)
     958:	1085883a 	add	r2,r2,r2
     95c:	1085883a 	add	r2,r2,r2
     960:	e13ee604 	addi	r4,fp,-1128
     964:	2085883a 	add	r2,r4,r2
     968:	10800504 	addi	r2,r2,20
     96c:	10800017 	ldw	r2,0(r2)
     970:	1885883a 	add	r2,r3,r2
     974:	e0bffc15 	stw	r2,-16(fp)
    {
        myfreq[16] += mydata[xval];
    }
    myfreq[16] /= 2.1;
    myfreq[17] = 0;
    for( xval=76; xval<=96; xval++)
     978:	e0bee717 	ldw	r2,-1124(fp)
     97c:	10800044 	addi	r2,r2,1
     980:	e0bee715 	stw	r2,-1124(fp)
     984:	e0bee717 	ldw	r2,-1124(fp)
     988:	10801850 	cmplti	r2,r2,97
     98c:	103ff01e 	bne	r2,zero,950 <__alt_data_end+0xf8000950>
    {
        myfreq[17] += mydata[xval];
    }
    myfreq[17] /= 2.4;
     990:	e0bffc17 	ldw	r2,-16(fp)
     994:	1009883a 	mov	r4,r2
     998:	00019740 	call	1974 <__floatsidf>
     99c:	1011883a 	mov	r8,r2
     9a0:	1813883a 	mov	r9,r3
     9a4:	018cccf4 	movhi	r6,13107
     9a8:	318cccc4 	addi	r6,r6,13107
     9ac:	01d000f4 	movhi	r7,16387
     9b0:	39ccccc4 	addi	r7,r7,13107
     9b4:	4009883a 	mov	r4,r8
     9b8:	480b883a 	mov	r5,r9
     9bc:	000100c0 	call	100c <__divdf3>
     9c0:	1009883a 	mov	r4,r2
     9c4:	180b883a 	mov	r5,r3
     9c8:	2005883a 	mov	r2,r4
     9cc:	2807883a 	mov	r3,r5
     9d0:	1009883a 	mov	r4,r2
     9d4:	180b883a 	mov	r5,r3
     9d8:	00018f40 	call	18f4 <__fixdfsi>
     9dc:	e0bffc15 	stw	r2,-16(fp)
    myfreq[18] = 0;
     9e0:	e03ffd15 	stw	zero,-12(fp)
    for( xval=97; xval<=120; xval++)
     9e4:	00801844 	movi	r2,97
     9e8:	e0bee715 	stw	r2,-1124(fp)
     9ec:	00000d06 	br	a24 <main+0x788>
    {
        myfreq[18] += mydata[xval];
     9f0:	e0fffd17 	ldw	r3,-12(fp)
     9f4:	e0bee717 	ldw	r2,-1124(fp)
     9f8:	1085883a 	add	r2,r2,r2
     9fc:	1085883a 	add	r2,r2,r2
     a00:	e13ee604 	addi	r4,fp,-1128
     a04:	2085883a 	add	r2,r4,r2
     a08:	10800504 	addi	r2,r2,20
     a0c:	10800017 	ldw	r2,0(r2)
     a10:	1885883a 	add	r2,r3,r2
     a14:	e0bffd15 	stw	r2,-12(fp)
    {
        myfreq[17] += mydata[xval];
    }
    myfreq[17] /= 2.4;
    myfreq[18] = 0;
    for( xval=97; xval<=120; xval++)
     a18:	e0bee717 	ldw	r2,-1124(fp)
     a1c:	10800044 	addi	r2,r2,1
     a20:	e0bee715 	stw	r2,-1124(fp)
     a24:	e0bee717 	ldw	r2,-1124(fp)
     a28:	10801e50 	cmplti	r2,r2,121
     a2c:	103ff01e 	bne	r2,zero,9f0 <__alt_data_end+0xf80009f0>
    {
        myfreq[18] += mydata[xval];
    }
    myfreq[18] /= 2.6;
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	1009883a 	mov	r4,r2
     a38:	00019740 	call	1974 <__floatsidf>
     a3c:	1011883a 	mov	r8,r2
     a40:	1813883a 	mov	r9,r3
     a44:	01b33374 	movhi	r6,52429
     a48:	31b33344 	addi	r6,r6,-13107
     a4c:	01d00174 	movhi	r7,16389
     a50:	39f33304 	addi	r7,r7,-13108
     a54:	4009883a 	mov	r4,r8
     a58:	480b883a 	mov	r5,r9
     a5c:	000100c0 	call	100c <__divdf3>
     a60:	1009883a 	mov	r4,r2
     a64:	180b883a 	mov	r5,r3
     a68:	2005883a 	mov	r2,r4
     a6c:	2807883a 	mov	r3,r5
     a70:	1009883a 	mov	r4,r2
     a74:	180b883a 	mov	r5,r3
     a78:	00018f40 	call	18f4 <__fixdfsi>
     a7c:	e0bffd15 	stw	r2,-12(fp)
    myfreq[19] = 0;
     a80:	e03ffe15 	stw	zero,-8(fp)
    for( xval=121; xval<=151; xval++)
     a84:	00801e44 	movi	r2,121
     a88:	e0bee715 	stw	r2,-1124(fp)
     a8c:	00000d06 	br	ac4 <main+0x828>
    {
        myfreq[19] += mydata[xval];
     a90:	e0fffe17 	ldw	r3,-8(fp)
     a94:	e0bee717 	ldw	r2,-1124(fp)
     a98:	1085883a 	add	r2,r2,r2
     a9c:	1085883a 	add	r2,r2,r2
     aa0:	e13ee604 	addi	r4,fp,-1128
     aa4:	2085883a 	add	r2,r4,r2
     aa8:	10800504 	addi	r2,r2,20
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	1885883a 	add	r2,r3,r2
     ab4:	e0bffe15 	stw	r2,-8(fp)
    {
        myfreq[18] += mydata[xval];
    }
    myfreq[18] /= 2.6;
    myfreq[19] = 0;
    for( xval=121; xval<=151; xval++)
     ab8:	e0bee717 	ldw	r2,-1124(fp)
     abc:	10800044 	addi	r2,r2,1
     ac0:	e0bee715 	stw	r2,-1124(fp)
     ac4:	e0bee717 	ldw	r2,-1124(fp)
     ac8:	10802610 	cmplti	r2,r2,152
     acc:	103ff01e 	bne	r2,zero,a90 <__alt_data_end+0xf8000a90>
    {
        myfreq[19] += mydata[xval];
    }
    myfreq[19] /= 2.1;
     ad0:	e0bffe17 	ldw	r2,-8(fp)
     ad4:	1009883a 	mov	r4,r2
     ad8:	00019740 	call	1974 <__floatsidf>
     adc:	1011883a 	mov	r8,r2
     ae0:	1813883a 	mov	r9,r3
     ae4:	01b33374 	movhi	r6,52429
     ae8:	31b33344 	addi	r6,r6,-13107
     aec:	01d00074 	movhi	r7,16385
     af0:	39f33304 	addi	r7,r7,-13108
     af4:	4009883a 	mov	r4,r8
     af8:	480b883a 	mov	r5,r9
     afc:	000100c0 	call	100c <__divdf3>
     b00:	1009883a 	mov	r4,r2
     b04:	180b883a 	mov	r5,r3
     b08:	2005883a 	mov	r2,r4
     b0c:	2807883a 	mov	r3,r5
     b10:	1009883a 	mov	r4,r2
     b14:	180b883a 	mov	r5,r3
     b18:	00018f40 	call	18f4 <__fixdfsi>
     b1c:	e0bffe15 	stw	r2,-8(fp)

    for( xval=0; xval<=19; xval++)
     b20:	e03ee715 	stw	zero,-1124(fp)
     b24:	00001106 	br	b6c <main+0x8d0>
    {
       mydata[xval] = myfreq[xval];
     b28:	e0bee717 	ldw	r2,-1124(fp)
     b2c:	1085883a 	add	r2,r2,r2
     b30:	1085883a 	add	r2,r2,r2
     b34:	e0fee604 	addi	r3,fp,-1128
     b38:	1885883a 	add	r2,r3,r2
     b3c:	10810504 	addi	r2,r2,1044
     b40:	10c00017 	ldw	r3,0(r2)
     b44:	e0bee717 	ldw	r2,-1124(fp)
     b48:	1085883a 	add	r2,r2,r2
     b4c:	1085883a 	add	r2,r2,r2
     b50:	e13ee604 	addi	r4,fp,-1128
     b54:	2085883a 	add	r2,r4,r2
     b58:	10800504 	addi	r2,r2,20
     b5c:	10c00015 	stw	r3,0(r2)
    {
        myfreq[19] += mydata[xval];
    }
    myfreq[19] /= 2.1;

    for( xval=0; xval<=19; xval++)
     b60:	e0bee717 	ldw	r2,-1124(fp)
     b64:	10800044 	addi	r2,r2,1
     b68:	e0bee715 	stw	r2,-1124(fp)
     b6c:	e0bee717 	ldw	r2,-1124(fp)
     b70:	10800510 	cmplti	r2,r2,20
     b74:	103fec1e 	bne	r2,zero,b28 <__alt_data_end+0xf8000b28>
    {
       mydata[xval] = myfreq[xval];
    }

    myindex = 0;
     b78:	e03ee915 	stw	zero,-1116(fp)
    // Now plot the bars
    for( xval=10; xval<=(number_of_bars*10); xval=xval+10)
     b7c:	00800284 	movi	r2,10
     b80:	e0bee715 	stw	r2,-1124(fp)
     b84:	00004206 	br	c90 <main+0x9f4>
    {
    	//clear the bar
    	for( width=0; width <= 6; width++)
     b88:	e03eea15 	stw	zero,-1112(fp)
     b8c:	00003706 	br	c6c <main+0x9d0>
    	{
    	  for(yval=479; yval>=1; yval--)
     b90:	008077c4 	movi	r2,479
     b94:	e0bee815 	stw	r2,-1120(fp)
     b98:	00001006 	br	bdc <main+0x940>
    	  {
    		 Set_Pixel(VPG_BASE,xval+width,yval,0);
     b9c:	e0bee817 	ldw	r2,-1120(fp)
     ba0:	10c0a024 	muli	r3,r2,640
     ba4:	e0bee717 	ldw	r2,-1124(fp)
     ba8:	1887883a 	add	r3,r3,r2
     bac:	e0beea17 	ldw	r2,-1112(fp)
     bb0:	1885883a 	add	r2,r3,r2
     bb4:	1085883a 	add	r2,r2,r2
     bb8:	1085883a 	add	r2,r2,r2
     bbc:	1007883a 	mov	r3,r2
     bc0:	00824034 	movhi	r2,2304
     bc4:	1885883a 	add	r2,r3,r2
     bc8:	0007883a 	mov	r3,zero
     bcc:	10c00035 	stwio	r3,0(r2)
    for( xval=10; xval<=(number_of_bars*10); xval=xval+10)
    {
    	//clear the bar
    	for( width=0; width <= 6; width++)
    	{
    	  for(yval=479; yval>=1; yval--)
     bd0:	e0bee817 	ldw	r2,-1120(fp)
     bd4:	10bfffc4 	addi	r2,r2,-1
     bd8:	e0bee815 	stw	r2,-1120(fp)
     bdc:	e0bee817 	ldw	r2,-1120(fp)
     be0:	00bfee16 	blt	zero,r2,b9c <__alt_data_end+0xf8000b9c>
    	  }
    	//}
    	//draw the bar
    	//for( width=0; width <= 6; width++)
    	//{
    	  for(yval=479; yval>=(479-mydata[myindex]); yval--)
     be4:	008077c4 	movi	r2,479
     be8:	e0bee815 	stw	r2,-1120(fp)
     bec:	00001106 	br	c34 <main+0x998>
    	  {
    		 Set_Pixel(VPG_BASE,xval+width,yval,xval+4); //'4' is just an arbitrary offset into the color look-up table LUT.
     bf0:	e0bee817 	ldw	r2,-1120(fp)
     bf4:	10c0a024 	muli	r3,r2,640
     bf8:	e0bee717 	ldw	r2,-1124(fp)
     bfc:	1887883a 	add	r3,r3,r2
     c00:	e0beea17 	ldw	r2,-1112(fp)
     c04:	1885883a 	add	r2,r3,r2
     c08:	1085883a 	add	r2,r2,r2
     c0c:	1085883a 	add	r2,r2,r2
     c10:	1007883a 	mov	r3,r2
     c14:	00824034 	movhi	r2,2304
     c18:	1885883a 	add	r2,r3,r2
     c1c:	e0fee717 	ldw	r3,-1124(fp)
     c20:	18c00104 	addi	r3,r3,4
     c24:	10c00035 	stwio	r3,0(r2)
    	  }
    	//}
    	//draw the bar
    	//for( width=0; width <= 6; width++)
    	//{
    	  for(yval=479; yval>=(479-mydata[myindex]); yval--)
     c28:	e0bee817 	ldw	r2,-1120(fp)
     c2c:	10bfffc4 	addi	r2,r2,-1
     c30:	e0bee815 	stw	r2,-1120(fp)
     c34:	e0bee917 	ldw	r2,-1116(fp)
     c38:	1085883a 	add	r2,r2,r2
     c3c:	1085883a 	add	r2,r2,r2
     c40:	e0fee604 	addi	r3,fp,-1128
     c44:	1885883a 	add	r2,r3,r2
     c48:	10800504 	addi	r2,r2,20
     c4c:	10800017 	ldw	r2,0(r2)
     c50:	00c077c4 	movi	r3,479
     c54:	1885c83a 	sub	r2,r3,r2
     c58:	e0fee817 	ldw	r3,-1120(fp)
     c5c:	18bfe40e 	bge	r3,r2,bf0 <__alt_data_end+0xf8000bf0>
    myindex = 0;
    // Now plot the bars
    for( xval=10; xval<=(number_of_bars*10); xval=xval+10)
    {
    	//clear the bar
    	for( width=0; width <= 6; width++)
     c60:	e0beea17 	ldw	r2,-1112(fp)
     c64:	10800044 	addi	r2,r2,1
     c68:	e0beea15 	stw	r2,-1112(fp)
     c6c:	e0beea17 	ldw	r2,-1112(fp)
     c70:	108001d0 	cmplti	r2,r2,7
     c74:	103fc61e 	bne	r2,zero,b90 <__alt_data_end+0xf8000b90>
    	  for(yval=479; yval>=(479-mydata[myindex]); yval--)
    	  {
    		 Set_Pixel(VPG_BASE,xval+width,yval,xval+4); //'4' is just an arbitrary offset into the color look-up table LUT.
    	  }
    	}
    	myindex++;
     c78:	e0bee917 	ldw	r2,-1116(fp)
     c7c:	10800044 	addi	r2,r2,1
     c80:	e0bee915 	stw	r2,-1116(fp)
       mydata[xval] = myfreq[xval];
    }

    myindex = 0;
    // Now plot the bars
    for( xval=10; xval<=(number_of_bars*10); xval=xval+10)
     c84:	e0bee717 	ldw	r2,-1124(fp)
     c88:	10800284 	addi	r2,r2,10
     c8c:	e0bee715 	stw	r2,-1124(fp)
     c90:	e0bee717 	ldw	r2,-1124(fp)
     c94:	10802fd0 	cmplti	r2,r2,191
     c98:	103fbb1e 	bne	r2,zero,b88 <__alt_data_end+0xf8000b88>
    	  }
    	}
    	myindex++;
    }

    usleep(200);  // Can adjust this for faster action or slower bar movement.
     c9c:	01003204 	movi	r4,200
     ca0:	0001e680 	call	1e68 <usleep>
    }
     ca4:	003da106 	br	32c <__alt_data_end+0xf800032c>

00000ca8 <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
     ca8:	defffe04 	addi	sp,sp,-8
     cac:	dfc00115 	stw	ra,4(sp)
     cb0:	df000015 	stw	fp,0(sp)
     cb4:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x38); 
     cb8:	00c00e04 	movi	r3,56
     cbc:	00824834 	movhi	r2,2336
     cc0:	10820004 	addi	r2,r2,2048
     cc4:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     cc8:	0101f404 	movi	r4,2000
     ccc:	0001e680 	call	1e68 <usleep>
  lcd_write_cmd(LCD_BASE,0x0C);
     cd0:	00c00304 	movi	r3,12
     cd4:	00824834 	movhi	r2,2336
     cd8:	10820004 	addi	r2,r2,2048
     cdc:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     ce0:	0101f404 	movi	r4,2000
     ce4:	0001e680 	call	1e68 <usleep>
  lcd_write_cmd(LCD_BASE,0x01);
     ce8:	00c00044 	movi	r3,1
     cec:	00824834 	movhi	r2,2336
     cf0:	10820004 	addi	r2,r2,2048
     cf4:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     cf8:	0101f404 	movi	r4,2000
     cfc:	0001e680 	call	1e68 <usleep>
  lcd_write_cmd(LCD_BASE,0x06);
     d00:	00c00184 	movi	r3,6
     d04:	00824834 	movhi	r2,2336
     d08:	10820004 	addi	r2,r2,2048
     d0c:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     d10:	0101f404 	movi	r4,2000
     d14:	0001e680 	call	1e68 <usleep>
  lcd_write_cmd(LCD_BASE,0x80);
     d18:	00c02004 	movi	r3,128
     d1c:	00824834 	movhi	r2,2336
     d20:	10820004 	addi	r2,r2,2048
     d24:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     d28:	0101f404 	movi	r4,2000
     d2c:	0001e680 	call	1e68 <usleep>
}
     d30:	0001883a 	nop
     d34:	e037883a 	mov	sp,fp
     d38:	dfc00117 	ldw	ra,4(sp)
     d3c:	df000017 	ldw	fp,0(sp)
     d40:	dec00204 	addi	sp,sp,8
     d44:	f800283a 	ret

00000d48 <LCD_Show_Text>:
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
     d48:	defffc04 	addi	sp,sp,-16
     d4c:	dfc00315 	stw	ra,12(sp)
     d50:	df000215 	stw	fp,8(sp)
     d54:	df000204 	addi	fp,sp,8
     d58:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i=0;i<strlen(Text);i++)
     d5c:	e03ffe15 	stw	zero,-8(fp)
     d60:	00000f06 	br	da0 <LCD_Show_Text+0x58>
  {
    lcd_write_data(LCD_BASE,Text[i]);
     d64:	e0bffe17 	ldw	r2,-8(fp)
     d68:	e0ffff17 	ldw	r3,-4(fp)
     d6c:	1885883a 	add	r2,r3,r2
     d70:	10800003 	ldbu	r2,0(r2)
     d74:	10c03fcc 	andi	r3,r2,255
     d78:	18c0201c 	xori	r3,r3,128
     d7c:	18ffe004 	addi	r3,r3,-128
     d80:	00824834 	movhi	r2,2336
     d84:	10820204 	addi	r2,r2,2056
     d88:	10c00035 	stwio	r3,0(r2)
    usleep(2000);
     d8c:	0101f404 	movi	r4,2000
     d90:	0001e680 	call	1e68 <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
     d94:	e0bffe17 	ldw	r2,-8(fp)
     d98:	10800044 	addi	r2,r2,1
     d9c:	e0bffe15 	stw	r2,-8(fp)
     da0:	e13fff17 	ldw	r4,-4(fp)
     da4:	0001c680 	call	1c68 <strlen>
     da8:	1007883a 	mov	r3,r2
     dac:	e0bffe17 	ldw	r2,-8(fp)
     db0:	10ffec36 	bltu	r2,r3,d64 <__alt_data_end+0xf8000d64>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    usleep(2000);
  }
}
     db4:	0001883a 	nop
     db8:	e037883a 	mov	sp,fp
     dbc:	dfc00117 	ldw	ra,4(sp)
     dc0:	df000017 	ldw	fp,0(sp)
     dc4:	dec00204 	addi	sp,sp,8
     dc8:	f800283a 	ret

00000dcc <LCD_Line2>:
//-------------------------------------------------------------------------
void LCD_Line2()
{
     dcc:	defffe04 	addi	sp,sp,-8
     dd0:	dfc00115 	stw	ra,4(sp)
     dd4:	df000015 	stw	fp,0(sp)
     dd8:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0xC0);
     ddc:	00c03004 	movi	r3,192
     de0:	00824834 	movhi	r2,2336
     de4:	10820004 	addi	r2,r2,2048
     de8:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     dec:	0101f404 	movi	r4,2000
     df0:	0001e680 	call	1e68 <usleep>
}
     df4:	0001883a 	nop
     df8:	e037883a 	mov	sp,fp
     dfc:	dfc00117 	ldw	ra,4(sp)
     e00:	df000017 	ldw	fp,0(sp)
     e04:	dec00204 	addi	sp,sp,8
     e08:	f800283a 	ret

00000e0c <LCD_Test>:
//-------------------------------------------------------------------------
void LCD_Test()
{
     e0c:	defff604 	addi	sp,sp,-40
     e10:	dfc00915 	stw	ra,36(sp)
     e14:	df000815 	stw	fp,32(sp)
     e18:	df000804 	addi	fp,sp,32
  char Text1[16] = "Altera DE2 Board";
     e1c:	00995d34 	movhi	r2,25972
     e20:	109b1044 	addi	r2,r2,27713
     e24:	e0bff815 	stw	r2,-32(fp)
     e28:	00910834 	movhi	r2,17440
     e2c:	10985c84 	addi	r2,r2,24946
     e30:	e0bff915 	stw	r2,-28(fp)
     e34:	00908834 	movhi	r2,16928
     e38:	108c9144 	addi	r2,r2,12869
     e3c:	e0bffa15 	stw	r2,-24(fp)
     e40:	00991cb4 	movhi	r2,25714
     e44:	10985bc4 	addi	r2,r2,24943
     e48:	e0bffb15 	stw	r2,-20(fp)
  char Text2[16] = " USB Paintbrush ";
     e4c:	009094f4 	movhi	r2,16979
     e50:	10954804 	addi	r2,r2,21792
     e54:	e0bffc15 	stw	r2,-16(fp)
     e58:	009a5874 	movhi	r2,26977
     e5c:	10940804 	addi	r2,r2,20512
     e60:	e0bffd15 	stw	r2,-12(fp)
     e64:	009c98b4 	movhi	r2,29282
     e68:	109d1b84 	addi	r2,r2,29806
     e6c:	e0bffe15 	stw	r2,-8(fp)
     e70:	00881a34 	movhi	r2,8296
     e74:	109cdd44 	addi	r2,r2,29557
     e78:	e0bfff15 	stw	r2,-4(fp)
  //  Initial LCD
  LCD_Init();
     e7c:	0000ca80 	call	ca8 <LCD_Init>
  //  Show Text to LCD
  LCD_Show_Text(Text1);
     e80:	e13ff804 	addi	r4,fp,-32
     e84:	0000d480 	call	d48 <LCD_Show_Text>
  //  Change Line2
  LCD_Line2();
     e88:	0000dcc0 	call	dcc <LCD_Line2>
  //  Show Text to LCD
  LCD_Show_Text(Text2);
     e8c:	e0bffc04 	addi	r2,fp,-16
     e90:	1009883a 	mov	r4,r2
     e94:	0000d480 	call	d48 <LCD_Show_Text>
}
     e98:	0001883a 	nop
     e9c:	e037883a 	mov	sp,fp
     ea0:	dfc00117 	ldw	ra,4(sp)
     ea4:	df000017 	ldw	fp,0(sp)
     ea8:	dec00204 	addi	sp,sp,8
     eac:	f800283a 	ret

00000eb0 <Set_Cursor_XY>:



//-------------------------------------------------------------------------
void Set_Cursor_XY(unsigned int X,unsigned int Y)
{
     eb0:	defffd04 	addi	sp,sp,-12
     eb4:	df000215 	stw	fp,8(sp)
     eb8:	df000204 	addi	fp,sp,8
     ebc:	e13ffe15 	stw	r4,-8(fp)
     ec0:	e17fff15 	stw	r5,-4(fp)
  Vga_Cursor_X(VPG_BASE,X);
     ec4:	e0fffe17 	ldw	r3,-8(fp)
     ec8:	008244f4 	movhi	r2,2323
     ecc:	10b00104 	addi	r2,r2,-16380
     ed0:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Y(VPG_BASE,Y);
     ed4:	e0ffff17 	ldw	r3,-4(fp)
     ed8:	008244f4 	movhi	r2,2323
     edc:	10b00204 	addi	r2,r2,-16376
     ee0:	10c00035 	stwio	r3,0(r2)

}
     ee4:	0001883a 	nop
     ee8:	e037883a 	mov	sp,fp
     eec:	df000017 	ldw	fp,0(sp)
     ef0:	dec00104 	addi	sp,sp,4
     ef4:	f800283a 	ret

00000ef8 <Set_Cursor_Color>:
//-------------------------------------------------------------------------
void Set_Cursor_Color(unsigned int R,unsigned int G,unsigned int B)
{
     ef8:	defffc04 	addi	sp,sp,-16
     efc:	df000315 	stw	fp,12(sp)
     f00:	df000304 	addi	fp,sp,12
     f04:	e13ffd15 	stw	r4,-12(fp)
     f08:	e17ffe15 	stw	r5,-8(fp)
     f0c:	e1bfff15 	stw	r6,-4(fp)
  Vga_Cursor_Color_R(VPG_BASE,R);
     f10:	e0fffd17 	ldw	r3,-12(fp)
     f14:	008244f4 	movhi	r2,2323
     f18:	10b00304 	addi	r2,r2,-16372
     f1c:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Color_G(VPG_BASE,G);
     f20:	e0fffe17 	ldw	r3,-8(fp)
     f24:	008244f4 	movhi	r2,2323
     f28:	10b00404 	addi	r2,r2,-16368
     f2c:	10c00035 	stwio	r3,0(r2)
  Vga_Cursor_Color_B(VPG_BASE,B);
     f30:	e0ffff17 	ldw	r3,-4(fp)
     f34:	008244f4 	movhi	r2,2323
     f38:	10b00504 	addi	r2,r2,-16364
     f3c:	10c00035 	stwio	r3,0(r2)

}
     f40:	0001883a 	nop
     f44:	e037883a 	mov	sp,fp
     f48:	df000017 	ldw	fp,0(sp)
     f4c:	dec00104 	addi	sp,sp,4
     f50:	f800283a 	ret

00000f54 <Set_Pixel_On_Color>:
//-------------------------------------------------------------------------
void Set_Pixel_On_Color(unsigned int R,unsigned int G,unsigned int B)
{
     f54:	defffc04 	addi	sp,sp,-16
     f58:	df000315 	stw	fp,12(sp)
     f5c:	df000304 	addi	fp,sp,12
     f60:	e13ffd15 	stw	r4,-12(fp)
     f64:	e17ffe15 	stw	r5,-8(fp)
     f68:	e1bfff15 	stw	r6,-4(fp)
  Vga_Pixel_On_Color_R(VPG_BASE,R);
     f6c:	e0fffd17 	ldw	r3,-12(fp)
     f70:	008244f4 	movhi	r2,2323
     f74:	10b00604 	addi	r2,r2,-16360
     f78:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_On_Color_G(VPG_BASE,G);
     f7c:	e0fffe17 	ldw	r3,-8(fp)
     f80:	008244f4 	movhi	r2,2323
     f84:	10b00704 	addi	r2,r2,-16356
     f88:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_On_Color_B(VPG_BASE,B);
     f8c:	e0ffff17 	ldw	r3,-4(fp)
     f90:	008244f4 	movhi	r2,2323
     f94:	10b00804 	addi	r2,r2,-16352
     f98:	10c00035 	stwio	r3,0(r2)

}
     f9c:	0001883a 	nop
     fa0:	e037883a 	mov	sp,fp
     fa4:	df000017 	ldw	fp,0(sp)
     fa8:	dec00104 	addi	sp,sp,4
     fac:	f800283a 	ret

00000fb0 <Set_Pixel_Off_Color>:
//-------------------------------------------------------------------------
void Set_Pixel_Off_Color(unsigned int R,unsigned int G,unsigned int B)
{
     fb0:	defffc04 	addi	sp,sp,-16
     fb4:	df000315 	stw	fp,12(sp)
     fb8:	df000304 	addi	fp,sp,12
     fbc:	e13ffd15 	stw	r4,-12(fp)
     fc0:	e17ffe15 	stw	r5,-8(fp)
     fc4:	e1bfff15 	stw	r6,-4(fp)
  Vga_Pixel_Off_Color_R(VPG_BASE,R);
     fc8:	e0fffd17 	ldw	r3,-12(fp)
     fcc:	008244f4 	movhi	r2,2323
     fd0:	10b00904 	addi	r2,r2,-16348
     fd4:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_Off_Color_G(VPG_BASE,G);
     fd8:	e0fffe17 	ldw	r3,-8(fp)
     fdc:	008244f4 	movhi	r2,2323
     fe0:	10b00a04 	addi	r2,r2,-16344
     fe4:	10c00035 	stwio	r3,0(r2)
  Vga_Pixel_Off_Color_B(VPG_BASE,B);
     fe8:	e0ffff17 	ldw	r3,-4(fp)
     fec:	008244f4 	movhi	r2,2323
     ff0:	10b00b04 	addi	r2,r2,-16340
     ff4:	10c00035 	stwio	r3,0(r2)

}
     ff8:	0001883a 	nop
     ffc:	e037883a 	mov	sp,fp
    1000:	df000017 	ldw	fp,0(sp)
    1004:	dec00104 	addi	sp,sp,4
    1008:	f800283a 	ret

0000100c <__divdf3>:
    100c:	defff204 	addi	sp,sp,-56
    1010:	dd400915 	stw	r21,36(sp)
    1014:	282ad53a 	srli	r21,r5,20
    1018:	dd000815 	stw	r20,32(sp)
    101c:	2828d7fa 	srli	r20,r5,31
    1020:	dc000415 	stw	r16,16(sp)
    1024:	04000434 	movhi	r16,16
    1028:	df000c15 	stw	fp,48(sp)
    102c:	843fffc4 	addi	r16,r16,-1
    1030:	dfc00d15 	stw	ra,52(sp)
    1034:	ddc00b15 	stw	r23,44(sp)
    1038:	dd800a15 	stw	r22,40(sp)
    103c:	dcc00715 	stw	r19,28(sp)
    1040:	dc800615 	stw	r18,24(sp)
    1044:	dc400515 	stw	r17,20(sp)
    1048:	ad41ffcc 	andi	r21,r21,2047
    104c:	2c20703a 	and	r16,r5,r16
    1050:	a7003fcc 	andi	fp,r20,255
    1054:	a8006126 	beq	r21,zero,11dc <__divdf3+0x1d0>
    1058:	0081ffc4 	movi	r2,2047
    105c:	2025883a 	mov	r18,r4
    1060:	a8803726 	beq	r21,r2,1140 <__divdf3+0x134>
    1064:	80800434 	orhi	r2,r16,16
    1068:	100490fa 	slli	r2,r2,3
    106c:	2020d77a 	srli	r16,r4,29
    1070:	202490fa 	slli	r18,r4,3
    1074:	ad7f0044 	addi	r21,r21,-1023
    1078:	80a0b03a 	or	r16,r16,r2
    107c:	0027883a 	mov	r19,zero
    1080:	0013883a 	mov	r9,zero
    1084:	3804d53a 	srli	r2,r7,20
    1088:	382cd7fa 	srli	r22,r7,31
    108c:	04400434 	movhi	r17,16
    1090:	8c7fffc4 	addi	r17,r17,-1
    1094:	1081ffcc 	andi	r2,r2,2047
    1098:	3011883a 	mov	r8,r6
    109c:	3c62703a 	and	r17,r7,r17
    10a0:	b5c03fcc 	andi	r23,r22,255
    10a4:	10006c26 	beq	r2,zero,1258 <__divdf3+0x24c>
    10a8:	00c1ffc4 	movi	r3,2047
    10ac:	10c06426 	beq	r2,r3,1240 <__divdf3+0x234>
    10b0:	88c00434 	orhi	r3,r17,16
    10b4:	180690fa 	slli	r3,r3,3
    10b8:	3022d77a 	srli	r17,r6,29
    10bc:	301090fa 	slli	r8,r6,3
    10c0:	10bf0044 	addi	r2,r2,-1023
    10c4:	88e2b03a 	or	r17,r17,r3
    10c8:	000f883a 	mov	r7,zero
    10cc:	a58cf03a 	xor	r6,r20,r22
    10d0:	3cc8b03a 	or	r4,r7,r19
    10d4:	a8abc83a 	sub	r21,r21,r2
    10d8:	008003c4 	movi	r2,15
    10dc:	3007883a 	mov	r3,r6
    10e0:	34c03fcc 	andi	r19,r6,255
    10e4:	11009036 	bltu	r2,r4,1328 <__divdf3+0x31c>
    10e8:	200890ba 	slli	r4,r4,2
    10ec:	00800034 	movhi	r2,0
    10f0:	10844004 	addi	r2,r2,4352
    10f4:	2089883a 	add	r4,r4,r2
    10f8:	20800017 	ldw	r2,0(r4)
    10fc:	1000683a 	jmp	r2
    1100:	00001328 	cmpgeui	zero,zero,76
    1104:	00001178 	rdprs	zero,zero,69
    1108:	00001318 	cmpnei	zero,zero,76
    110c:	0000116c 	andhi	zero,zero,69
    1110:	00001318 	cmpnei	zero,zero,76
    1114:	000012ec 	andhi	zero,zero,75
    1118:	00001318 	cmpnei	zero,zero,76
    111c:	0000116c 	andhi	zero,zero,69
    1120:	00001178 	rdprs	zero,zero,69
    1124:	00001178 	rdprs	zero,zero,69
    1128:	000012ec 	andhi	zero,zero,75
    112c:	0000116c 	andhi	zero,zero,69
    1130:	0000115c 	xori	zero,zero,69
    1134:	0000115c 	xori	zero,zero,69
    1138:	0000115c 	xori	zero,zero,69
    113c:	0000160c 	andi	zero,zero,88
    1140:	2404b03a 	or	r2,r4,r16
    1144:	1000661e 	bne	r2,zero,12e0 <__divdf3+0x2d4>
    1148:	04c00204 	movi	r19,8
    114c:	0021883a 	mov	r16,zero
    1150:	0025883a 	mov	r18,zero
    1154:	02400084 	movi	r9,2
    1158:	003fca06 	br	1084 <__alt_data_end+0xf8001084>
    115c:	8023883a 	mov	r17,r16
    1160:	9011883a 	mov	r8,r18
    1164:	e02f883a 	mov	r23,fp
    1168:	480f883a 	mov	r7,r9
    116c:	00800084 	movi	r2,2
    1170:	3881311e 	bne	r7,r2,1638 <__divdf3+0x62c>
    1174:	b827883a 	mov	r19,r23
    1178:	98c0004c 	andi	r3,r19,1
    117c:	0081ffc4 	movi	r2,2047
    1180:	000b883a 	mov	r5,zero
    1184:	0025883a 	mov	r18,zero
    1188:	1004953a 	slli	r2,r2,20
    118c:	18c03fcc 	andi	r3,r3,255
    1190:	04400434 	movhi	r17,16
    1194:	8c7fffc4 	addi	r17,r17,-1
    1198:	180697fa 	slli	r3,r3,31
    119c:	2c4a703a 	and	r5,r5,r17
    11a0:	288ab03a 	or	r5,r5,r2
    11a4:	28c6b03a 	or	r3,r5,r3
    11a8:	9005883a 	mov	r2,r18
    11ac:	dfc00d17 	ldw	ra,52(sp)
    11b0:	df000c17 	ldw	fp,48(sp)
    11b4:	ddc00b17 	ldw	r23,44(sp)
    11b8:	dd800a17 	ldw	r22,40(sp)
    11bc:	dd400917 	ldw	r21,36(sp)
    11c0:	dd000817 	ldw	r20,32(sp)
    11c4:	dcc00717 	ldw	r19,28(sp)
    11c8:	dc800617 	ldw	r18,24(sp)
    11cc:	dc400517 	ldw	r17,20(sp)
    11d0:	dc000417 	ldw	r16,16(sp)
    11d4:	dec00e04 	addi	sp,sp,56
    11d8:	f800283a 	ret
    11dc:	2404b03a 	or	r2,r4,r16
    11e0:	2027883a 	mov	r19,r4
    11e4:	10003926 	beq	r2,zero,12cc <__divdf3+0x2c0>
    11e8:	80012e26 	beq	r16,zero,16a4 <__divdf3+0x698>
    11ec:	8009883a 	mov	r4,r16
    11f0:	d9800315 	stw	r6,12(sp)
    11f4:	d9c00215 	stw	r7,8(sp)
    11f8:	0001a500 	call	1a50 <__clzsi2>
    11fc:	d9800317 	ldw	r6,12(sp)
    1200:	d9c00217 	ldw	r7,8(sp)
    1204:	113ffd44 	addi	r4,r2,-11
    1208:	00c00704 	movi	r3,28
    120c:	19012116 	blt	r3,r4,1694 <__divdf3+0x688>
    1210:	00c00744 	movi	r3,29
    1214:	147ffe04 	addi	r17,r2,-8
    1218:	1907c83a 	sub	r3,r3,r4
    121c:	8460983a 	sll	r16,r16,r17
    1220:	98c6d83a 	srl	r3,r19,r3
    1224:	9c64983a 	sll	r18,r19,r17
    1228:	1c20b03a 	or	r16,r3,r16
    122c:	1080fcc4 	addi	r2,r2,1011
    1230:	00abc83a 	sub	r21,zero,r2
    1234:	0027883a 	mov	r19,zero
    1238:	0013883a 	mov	r9,zero
    123c:	003f9106 	br	1084 <__alt_data_end+0xf8001084>
    1240:	3446b03a 	or	r3,r6,r17
    1244:	18001f1e 	bne	r3,zero,12c4 <__divdf3+0x2b8>
    1248:	0023883a 	mov	r17,zero
    124c:	0011883a 	mov	r8,zero
    1250:	01c00084 	movi	r7,2
    1254:	003f9d06 	br	10cc <__alt_data_end+0xf80010cc>
    1258:	3446b03a 	or	r3,r6,r17
    125c:	18001526 	beq	r3,zero,12b4 <__divdf3+0x2a8>
    1260:	88011b26 	beq	r17,zero,16d0 <__divdf3+0x6c4>
    1264:	8809883a 	mov	r4,r17
    1268:	d9800315 	stw	r6,12(sp)
    126c:	da400115 	stw	r9,4(sp)
    1270:	0001a500 	call	1a50 <__clzsi2>
    1274:	d9800317 	ldw	r6,12(sp)
    1278:	da400117 	ldw	r9,4(sp)
    127c:	113ffd44 	addi	r4,r2,-11
    1280:	00c00704 	movi	r3,28
    1284:	19010e16 	blt	r3,r4,16c0 <__divdf3+0x6b4>
    1288:	00c00744 	movi	r3,29
    128c:	123ffe04 	addi	r8,r2,-8
    1290:	1907c83a 	sub	r3,r3,r4
    1294:	8a22983a 	sll	r17,r17,r8
    1298:	30c6d83a 	srl	r3,r6,r3
    129c:	3210983a 	sll	r8,r6,r8
    12a0:	1c62b03a 	or	r17,r3,r17
    12a4:	1080fcc4 	addi	r2,r2,1011
    12a8:	0085c83a 	sub	r2,zero,r2
    12ac:	000f883a 	mov	r7,zero
    12b0:	003f8606 	br	10cc <__alt_data_end+0xf80010cc>
    12b4:	0023883a 	mov	r17,zero
    12b8:	0011883a 	mov	r8,zero
    12bc:	01c00044 	movi	r7,1
    12c0:	003f8206 	br	10cc <__alt_data_end+0xf80010cc>
    12c4:	01c000c4 	movi	r7,3
    12c8:	003f8006 	br	10cc <__alt_data_end+0xf80010cc>
    12cc:	04c00104 	movi	r19,4
    12d0:	0021883a 	mov	r16,zero
    12d4:	0025883a 	mov	r18,zero
    12d8:	02400044 	movi	r9,1
    12dc:	003f6906 	br	1084 <__alt_data_end+0xf8001084>
    12e0:	04c00304 	movi	r19,12
    12e4:	024000c4 	movi	r9,3
    12e8:	003f6606 	br	1084 <__alt_data_end+0xf8001084>
    12ec:	01400434 	movhi	r5,16
    12f0:	0007883a 	mov	r3,zero
    12f4:	297fffc4 	addi	r5,r5,-1
    12f8:	04bfffc4 	movi	r18,-1
    12fc:	0081ffc4 	movi	r2,2047
    1300:	003fa106 	br	1188 <__alt_data_end+0xf8001188>
    1304:	00c00044 	movi	r3,1
    1308:	1887c83a 	sub	r3,r3,r2
    130c:	01000e04 	movi	r4,56
    1310:	20c1210e 	bge	r4,r3,1798 <__divdf3+0x78c>
    1314:	98c0004c 	andi	r3,r19,1
    1318:	0005883a 	mov	r2,zero
    131c:	000b883a 	mov	r5,zero
    1320:	0025883a 	mov	r18,zero
    1324:	003f9806 	br	1188 <__alt_data_end+0xf8001188>
    1328:	8c00fd36 	bltu	r17,r16,1720 <__divdf3+0x714>
    132c:	8440fb26 	beq	r16,r17,171c <__divdf3+0x710>
    1330:	8007883a 	mov	r3,r16
    1334:	ad7fffc4 	addi	r21,r21,-1
    1338:	0021883a 	mov	r16,zero
    133c:	4004d63a 	srli	r2,r8,24
    1340:	8822923a 	slli	r17,r17,8
    1344:	1809883a 	mov	r4,r3
    1348:	402c923a 	slli	r22,r8,8
    134c:	88b8b03a 	or	fp,r17,r2
    1350:	e028d43a 	srli	r20,fp,16
    1354:	d8c00015 	stw	r3,0(sp)
    1358:	e5ffffcc 	andi	r23,fp,65535
    135c:	a00b883a 	mov	r5,r20
    1360:	0001bac0 	call	1bac <__udivsi3>
    1364:	d8c00017 	ldw	r3,0(sp)
    1368:	a00b883a 	mov	r5,r20
    136c:	d8800315 	stw	r2,12(sp)
    1370:	1809883a 	mov	r4,r3
    1374:	0001c100 	call	1c10 <__umodsi3>
    1378:	d9800317 	ldw	r6,12(sp)
    137c:	1006943a 	slli	r3,r2,16
    1380:	9004d43a 	srli	r2,r18,16
    1384:	b9a3383a 	mul	r17,r23,r6
    1388:	10c4b03a 	or	r2,r2,r3
    138c:	1440062e 	bgeu	r2,r17,13a8 <__divdf3+0x39c>
    1390:	1705883a 	add	r2,r2,fp
    1394:	30ffffc4 	addi	r3,r6,-1
    1398:	1700ee36 	bltu	r2,fp,1754 <__divdf3+0x748>
    139c:	1440ed2e 	bgeu	r2,r17,1754 <__divdf3+0x748>
    13a0:	31bfff84 	addi	r6,r6,-2
    13a4:	1705883a 	add	r2,r2,fp
    13a8:	1463c83a 	sub	r17,r2,r17
    13ac:	a00b883a 	mov	r5,r20
    13b0:	8809883a 	mov	r4,r17
    13b4:	d9800315 	stw	r6,12(sp)
    13b8:	0001bac0 	call	1bac <__udivsi3>
    13bc:	a00b883a 	mov	r5,r20
    13c0:	8809883a 	mov	r4,r17
    13c4:	d8800215 	stw	r2,8(sp)
    13c8:	0001c100 	call	1c10 <__umodsi3>
    13cc:	d9c00217 	ldw	r7,8(sp)
    13d0:	1004943a 	slli	r2,r2,16
    13d4:	94bfffcc 	andi	r18,r18,65535
    13d8:	b9d1383a 	mul	r8,r23,r7
    13dc:	90a4b03a 	or	r18,r18,r2
    13e0:	d9800317 	ldw	r6,12(sp)
    13e4:	9200062e 	bgeu	r18,r8,1400 <__divdf3+0x3f4>
    13e8:	9725883a 	add	r18,r18,fp
    13ec:	38bfffc4 	addi	r2,r7,-1
    13f0:	9700d636 	bltu	r18,fp,174c <__divdf3+0x740>
    13f4:	9200d52e 	bgeu	r18,r8,174c <__divdf3+0x740>
    13f8:	39ffff84 	addi	r7,r7,-2
    13fc:	9725883a 	add	r18,r18,fp
    1400:	3004943a 	slli	r2,r6,16
    1404:	b012d43a 	srli	r9,r22,16
    1408:	b1bfffcc 	andi	r6,r22,65535
    140c:	11e2b03a 	or	r17,r2,r7
    1410:	8806d43a 	srli	r3,r17,16
    1414:	893fffcc 	andi	r4,r17,65535
    1418:	218b383a 	mul	r5,r4,r6
    141c:	30c5383a 	mul	r2,r6,r3
    1420:	2249383a 	mul	r4,r4,r9
    1424:	280ed43a 	srli	r7,r5,16
    1428:	9225c83a 	sub	r18,r18,r8
    142c:	2089883a 	add	r4,r4,r2
    1430:	3909883a 	add	r4,r7,r4
    1434:	1a47383a 	mul	r3,r3,r9
    1438:	2080022e 	bgeu	r4,r2,1444 <__divdf3+0x438>
    143c:	00800074 	movhi	r2,1
    1440:	1887883a 	add	r3,r3,r2
    1444:	2004d43a 	srli	r2,r4,16
    1448:	2008943a 	slli	r4,r4,16
    144c:	297fffcc 	andi	r5,r5,65535
    1450:	10c7883a 	add	r3,r2,r3
    1454:	2149883a 	add	r4,r4,r5
    1458:	90c0a536 	bltu	r18,r3,16f0 <__divdf3+0x6e4>
    145c:	90c0bf26 	beq	r18,r3,175c <__divdf3+0x750>
    1460:	90c7c83a 	sub	r3,r18,r3
    1464:	810fc83a 	sub	r7,r16,r4
    1468:	81e5803a 	cmpltu	r18,r16,r7
    146c:	1ca5c83a 	sub	r18,r3,r18
    1470:	e480c126 	beq	fp,r18,1778 <__divdf3+0x76c>
    1474:	a00b883a 	mov	r5,r20
    1478:	9009883a 	mov	r4,r18
    147c:	d9800315 	stw	r6,12(sp)
    1480:	d9c00215 	stw	r7,8(sp)
    1484:	da400115 	stw	r9,4(sp)
    1488:	0001bac0 	call	1bac <__udivsi3>
    148c:	a00b883a 	mov	r5,r20
    1490:	9009883a 	mov	r4,r18
    1494:	d8800015 	stw	r2,0(sp)
    1498:	0001c100 	call	1c10 <__umodsi3>
    149c:	d9c00217 	ldw	r7,8(sp)
    14a0:	da000017 	ldw	r8,0(sp)
    14a4:	1006943a 	slli	r3,r2,16
    14a8:	3804d43a 	srli	r2,r7,16
    14ac:	ba21383a 	mul	r16,r23,r8
    14b0:	d9800317 	ldw	r6,12(sp)
    14b4:	10c4b03a 	or	r2,r2,r3
    14b8:	da400117 	ldw	r9,4(sp)
    14bc:	1400062e 	bgeu	r2,r16,14d8 <__divdf3+0x4cc>
    14c0:	1705883a 	add	r2,r2,fp
    14c4:	40ffffc4 	addi	r3,r8,-1
    14c8:	1700ad36 	bltu	r2,fp,1780 <__divdf3+0x774>
    14cc:	1400ac2e 	bgeu	r2,r16,1780 <__divdf3+0x774>
    14d0:	423fff84 	addi	r8,r8,-2
    14d4:	1705883a 	add	r2,r2,fp
    14d8:	1421c83a 	sub	r16,r2,r16
    14dc:	a00b883a 	mov	r5,r20
    14e0:	8009883a 	mov	r4,r16
    14e4:	d9800315 	stw	r6,12(sp)
    14e8:	d9c00215 	stw	r7,8(sp)
    14ec:	da000015 	stw	r8,0(sp)
    14f0:	da400115 	stw	r9,4(sp)
    14f4:	0001bac0 	call	1bac <__udivsi3>
    14f8:	8009883a 	mov	r4,r16
    14fc:	a00b883a 	mov	r5,r20
    1500:	1025883a 	mov	r18,r2
    1504:	0001c100 	call	1c10 <__umodsi3>
    1508:	d9c00217 	ldw	r7,8(sp)
    150c:	1004943a 	slli	r2,r2,16
    1510:	bcaf383a 	mul	r23,r23,r18
    1514:	393fffcc 	andi	r4,r7,65535
    1518:	2088b03a 	or	r4,r4,r2
    151c:	d9800317 	ldw	r6,12(sp)
    1520:	da000017 	ldw	r8,0(sp)
    1524:	da400117 	ldw	r9,4(sp)
    1528:	25c0062e 	bgeu	r4,r23,1544 <__divdf3+0x538>
    152c:	2709883a 	add	r4,r4,fp
    1530:	90bfffc4 	addi	r2,r18,-1
    1534:	27009436 	bltu	r4,fp,1788 <__divdf3+0x77c>
    1538:	25c0932e 	bgeu	r4,r23,1788 <__divdf3+0x77c>
    153c:	94bfff84 	addi	r18,r18,-2
    1540:	2709883a 	add	r4,r4,fp
    1544:	4004943a 	slli	r2,r8,16
    1548:	25efc83a 	sub	r23,r4,r23
    154c:	1490b03a 	or	r8,r2,r18
    1550:	4008d43a 	srli	r4,r8,16
    1554:	40ffffcc 	andi	r3,r8,65535
    1558:	30c5383a 	mul	r2,r6,r3
    155c:	1a47383a 	mul	r3,r3,r9
    1560:	310d383a 	mul	r6,r6,r4
    1564:	100ad43a 	srli	r5,r2,16
    1568:	4913383a 	mul	r9,r9,r4
    156c:	1987883a 	add	r3,r3,r6
    1570:	28c7883a 	add	r3,r5,r3
    1574:	1980022e 	bgeu	r3,r6,1580 <__divdf3+0x574>
    1578:	01000074 	movhi	r4,1
    157c:	4913883a 	add	r9,r9,r4
    1580:	1808d43a 	srli	r4,r3,16
    1584:	1806943a 	slli	r3,r3,16
    1588:	10bfffcc 	andi	r2,r2,65535
    158c:	2253883a 	add	r9,r4,r9
    1590:	1887883a 	add	r3,r3,r2
    1594:	ba403836 	bltu	r23,r9,1678 <__divdf3+0x66c>
    1598:	ba403626 	beq	r23,r9,1674 <__divdf3+0x668>
    159c:	42000054 	ori	r8,r8,1
    15a0:	a880ffc4 	addi	r2,r21,1023
    15a4:	00bf570e 	bge	zero,r2,1304 <__alt_data_end+0xf8001304>
    15a8:	40c001cc 	andi	r3,r8,7
    15ac:	18000726 	beq	r3,zero,15cc <__divdf3+0x5c0>
    15b0:	40c003cc 	andi	r3,r8,15
    15b4:	01000104 	movi	r4,4
    15b8:	19000426 	beq	r3,r4,15cc <__divdf3+0x5c0>
    15bc:	4107883a 	add	r3,r8,r4
    15c0:	1a11803a 	cmpltu	r8,r3,r8
    15c4:	8a23883a 	add	r17,r17,r8
    15c8:	1811883a 	mov	r8,r3
    15cc:	88c0402c 	andhi	r3,r17,256
    15d0:	18000426 	beq	r3,zero,15e4 <__divdf3+0x5d8>
    15d4:	00ffc034 	movhi	r3,65280
    15d8:	18ffffc4 	addi	r3,r3,-1
    15dc:	a8810004 	addi	r2,r21,1024
    15e0:	88e2703a 	and	r17,r17,r3
    15e4:	00c1ff84 	movi	r3,2046
    15e8:	18bee316 	blt	r3,r2,1178 <__alt_data_end+0xf8001178>
    15ec:	8824977a 	slli	r18,r17,29
    15f0:	4010d0fa 	srli	r8,r8,3
    15f4:	8822927a 	slli	r17,r17,9
    15f8:	1081ffcc 	andi	r2,r2,2047
    15fc:	9224b03a 	or	r18,r18,r8
    1600:	880ad33a 	srli	r5,r17,12
    1604:	98c0004c 	andi	r3,r19,1
    1608:	003edf06 	br	1188 <__alt_data_end+0xf8001188>
    160c:	8080022c 	andhi	r2,r16,8
    1610:	10001226 	beq	r2,zero,165c <__divdf3+0x650>
    1614:	8880022c 	andhi	r2,r17,8
    1618:	1000101e 	bne	r2,zero,165c <__divdf3+0x650>
    161c:	00800434 	movhi	r2,16
    1620:	89400234 	orhi	r5,r17,8
    1624:	10bfffc4 	addi	r2,r2,-1
    1628:	b007883a 	mov	r3,r22
    162c:	288a703a 	and	r5,r5,r2
    1630:	4025883a 	mov	r18,r8
    1634:	003f3106 	br	12fc <__alt_data_end+0xf80012fc>
    1638:	008000c4 	movi	r2,3
    163c:	3880a626 	beq	r7,r2,18d8 <__divdf3+0x8cc>
    1640:	00800044 	movi	r2,1
    1644:	3880521e 	bne	r7,r2,1790 <__divdf3+0x784>
    1648:	b807883a 	mov	r3,r23
    164c:	0005883a 	mov	r2,zero
    1650:	000b883a 	mov	r5,zero
    1654:	0025883a 	mov	r18,zero
    1658:	003ecb06 	br	1188 <__alt_data_end+0xf8001188>
    165c:	00800434 	movhi	r2,16
    1660:	81400234 	orhi	r5,r16,8
    1664:	10bfffc4 	addi	r2,r2,-1
    1668:	a007883a 	mov	r3,r20
    166c:	288a703a 	and	r5,r5,r2
    1670:	003f2206 	br	12fc <__alt_data_end+0xf80012fc>
    1674:	183fca26 	beq	r3,zero,15a0 <__alt_data_end+0xf80015a0>
    1678:	e5ef883a 	add	r23,fp,r23
    167c:	40bfffc4 	addi	r2,r8,-1
    1680:	bf00392e 	bgeu	r23,fp,1768 <__divdf3+0x75c>
    1684:	1011883a 	mov	r8,r2
    1688:	ba7fc41e 	bne	r23,r9,159c <__alt_data_end+0xf800159c>
    168c:	b0ffc31e 	bne	r22,r3,159c <__alt_data_end+0xf800159c>
    1690:	003fc306 	br	15a0 <__alt_data_end+0xf80015a0>
    1694:	143ff604 	addi	r16,r2,-40
    1698:	9c20983a 	sll	r16,r19,r16
    169c:	0025883a 	mov	r18,zero
    16a0:	003ee206 	br	122c <__alt_data_end+0xf800122c>
    16a4:	d9800315 	stw	r6,12(sp)
    16a8:	d9c00215 	stw	r7,8(sp)
    16ac:	0001a500 	call	1a50 <__clzsi2>
    16b0:	10800804 	addi	r2,r2,32
    16b4:	d9c00217 	ldw	r7,8(sp)
    16b8:	d9800317 	ldw	r6,12(sp)
    16bc:	003ed106 	br	1204 <__alt_data_end+0xf8001204>
    16c0:	147ff604 	addi	r17,r2,-40
    16c4:	3462983a 	sll	r17,r6,r17
    16c8:	0011883a 	mov	r8,zero
    16cc:	003ef506 	br	12a4 <__alt_data_end+0xf80012a4>
    16d0:	3009883a 	mov	r4,r6
    16d4:	d9800315 	stw	r6,12(sp)
    16d8:	da400115 	stw	r9,4(sp)
    16dc:	0001a500 	call	1a50 <__clzsi2>
    16e0:	10800804 	addi	r2,r2,32
    16e4:	da400117 	ldw	r9,4(sp)
    16e8:	d9800317 	ldw	r6,12(sp)
    16ec:	003ee306 	br	127c <__alt_data_end+0xf800127c>
    16f0:	85a1883a 	add	r16,r16,r22
    16f4:	8585803a 	cmpltu	r2,r16,r22
    16f8:	1705883a 	add	r2,r2,fp
    16fc:	14a5883a 	add	r18,r2,r18
    1700:	88bfffc4 	addi	r2,r17,-1
    1704:	e4800c2e 	bgeu	fp,r18,1738 <__divdf3+0x72c>
    1708:	90c03e36 	bltu	r18,r3,1804 <__divdf3+0x7f8>
    170c:	1c806926 	beq	r3,r18,18b4 <__divdf3+0x8a8>
    1710:	90c7c83a 	sub	r3,r18,r3
    1714:	1023883a 	mov	r17,r2
    1718:	003f5206 	br	1464 <__alt_data_end+0xf8001464>
    171c:	923f0436 	bltu	r18,r8,1330 <__alt_data_end+0xf8001330>
    1720:	800897fa 	slli	r4,r16,31
    1724:	9004d07a 	srli	r2,r18,1
    1728:	8006d07a 	srli	r3,r16,1
    172c:	902097fa 	slli	r16,r18,31
    1730:	20a4b03a 	or	r18,r4,r2
    1734:	003f0106 	br	133c <__alt_data_end+0xf800133c>
    1738:	e4bff51e 	bne	fp,r18,1710 <__alt_data_end+0xf8001710>
    173c:	85bff22e 	bgeu	r16,r22,1708 <__alt_data_end+0xf8001708>
    1740:	e0c7c83a 	sub	r3,fp,r3
    1744:	1023883a 	mov	r17,r2
    1748:	003f4606 	br	1464 <__alt_data_end+0xf8001464>
    174c:	100f883a 	mov	r7,r2
    1750:	003f2b06 	br	1400 <__alt_data_end+0xf8001400>
    1754:	180d883a 	mov	r6,r3
    1758:	003f1306 	br	13a8 <__alt_data_end+0xf80013a8>
    175c:	813fe436 	bltu	r16,r4,16f0 <__alt_data_end+0xf80016f0>
    1760:	0007883a 	mov	r3,zero
    1764:	003f3f06 	br	1464 <__alt_data_end+0xf8001464>
    1768:	ba402c36 	bltu	r23,r9,181c <__divdf3+0x810>
    176c:	4dc05426 	beq	r9,r23,18c0 <__divdf3+0x8b4>
    1770:	1011883a 	mov	r8,r2
    1774:	003f8906 	br	159c <__alt_data_end+0xf800159c>
    1778:	023fffc4 	movi	r8,-1
    177c:	003f8806 	br	15a0 <__alt_data_end+0xf80015a0>
    1780:	1811883a 	mov	r8,r3
    1784:	003f5406 	br	14d8 <__alt_data_end+0xf80014d8>
    1788:	1025883a 	mov	r18,r2
    178c:	003f6d06 	br	1544 <__alt_data_end+0xf8001544>
    1790:	b827883a 	mov	r19,r23
    1794:	003f8206 	br	15a0 <__alt_data_end+0xf80015a0>
    1798:	010007c4 	movi	r4,31
    179c:	20c02616 	blt	r4,r3,1838 <__divdf3+0x82c>
    17a0:	00800804 	movi	r2,32
    17a4:	10c5c83a 	sub	r2,r2,r3
    17a8:	888a983a 	sll	r5,r17,r2
    17ac:	40c8d83a 	srl	r4,r8,r3
    17b0:	4084983a 	sll	r2,r8,r2
    17b4:	88e2d83a 	srl	r17,r17,r3
    17b8:	2906b03a 	or	r3,r5,r4
    17bc:	1004c03a 	cmpne	r2,r2,zero
    17c0:	1886b03a 	or	r3,r3,r2
    17c4:	188001cc 	andi	r2,r3,7
    17c8:	10000726 	beq	r2,zero,17e8 <__divdf3+0x7dc>
    17cc:	188003cc 	andi	r2,r3,15
    17d0:	01000104 	movi	r4,4
    17d4:	11000426 	beq	r2,r4,17e8 <__divdf3+0x7dc>
    17d8:	1805883a 	mov	r2,r3
    17dc:	10c00104 	addi	r3,r2,4
    17e0:	1885803a 	cmpltu	r2,r3,r2
    17e4:	88a3883a 	add	r17,r17,r2
    17e8:	8880202c 	andhi	r2,r17,128
    17ec:	10002726 	beq	r2,zero,188c <__divdf3+0x880>
    17f0:	98c0004c 	andi	r3,r19,1
    17f4:	00800044 	movi	r2,1
    17f8:	000b883a 	mov	r5,zero
    17fc:	0025883a 	mov	r18,zero
    1800:	003e6106 	br	1188 <__alt_data_end+0xf8001188>
    1804:	85a1883a 	add	r16,r16,r22
    1808:	8585803a 	cmpltu	r2,r16,r22
    180c:	1705883a 	add	r2,r2,fp
    1810:	14a5883a 	add	r18,r2,r18
    1814:	8c7fff84 	addi	r17,r17,-2
    1818:	003f1106 	br	1460 <__alt_data_end+0xf8001460>
    181c:	b589883a 	add	r4,r22,r22
    1820:	25ad803a 	cmpltu	r22,r4,r22
    1824:	b739883a 	add	fp,r22,fp
    1828:	40bfff84 	addi	r2,r8,-2
    182c:	bf2f883a 	add	r23,r23,fp
    1830:	202d883a 	mov	r22,r4
    1834:	003f9306 	br	1684 <__alt_data_end+0xf8001684>
    1838:	013ff844 	movi	r4,-31
    183c:	2085c83a 	sub	r2,r4,r2
    1840:	8888d83a 	srl	r4,r17,r2
    1844:	00800804 	movi	r2,32
    1848:	18802126 	beq	r3,r2,18d0 <__divdf3+0x8c4>
    184c:	00801004 	movi	r2,64
    1850:	10c5c83a 	sub	r2,r2,r3
    1854:	8884983a 	sll	r2,r17,r2
    1858:	1204b03a 	or	r2,r2,r8
    185c:	1004c03a 	cmpne	r2,r2,zero
    1860:	2084b03a 	or	r2,r4,r2
    1864:	144001cc 	andi	r17,r2,7
    1868:	88000d1e 	bne	r17,zero,18a0 <__divdf3+0x894>
    186c:	000b883a 	mov	r5,zero
    1870:	1024d0fa 	srli	r18,r2,3
    1874:	98c0004c 	andi	r3,r19,1
    1878:	0005883a 	mov	r2,zero
    187c:	9464b03a 	or	r18,r18,r17
    1880:	003e4106 	br	1188 <__alt_data_end+0xf8001188>
    1884:	1007883a 	mov	r3,r2
    1888:	0023883a 	mov	r17,zero
    188c:	880a927a 	slli	r5,r17,9
    1890:	1805883a 	mov	r2,r3
    1894:	8822977a 	slli	r17,r17,29
    1898:	280ad33a 	srli	r5,r5,12
    189c:	003ff406 	br	1870 <__alt_data_end+0xf8001870>
    18a0:	10c003cc 	andi	r3,r2,15
    18a4:	01000104 	movi	r4,4
    18a8:	193ff626 	beq	r3,r4,1884 <__alt_data_end+0xf8001884>
    18ac:	0023883a 	mov	r17,zero
    18b0:	003fca06 	br	17dc <__alt_data_end+0xf80017dc>
    18b4:	813fd336 	bltu	r16,r4,1804 <__alt_data_end+0xf8001804>
    18b8:	1023883a 	mov	r17,r2
    18bc:	003fa806 	br	1760 <__alt_data_end+0xf8001760>
    18c0:	b0ffd636 	bltu	r22,r3,181c <__alt_data_end+0xf800181c>
    18c4:	1011883a 	mov	r8,r2
    18c8:	b0ff341e 	bne	r22,r3,159c <__alt_data_end+0xf800159c>
    18cc:	003f3406 	br	15a0 <__alt_data_end+0xf80015a0>
    18d0:	0005883a 	mov	r2,zero
    18d4:	003fe006 	br	1858 <__alt_data_end+0xf8001858>
    18d8:	00800434 	movhi	r2,16
    18dc:	89400234 	orhi	r5,r17,8
    18e0:	10bfffc4 	addi	r2,r2,-1
    18e4:	b807883a 	mov	r3,r23
    18e8:	288a703a 	and	r5,r5,r2
    18ec:	4025883a 	mov	r18,r8
    18f0:	003e8206 	br	12fc <__alt_data_end+0xf80012fc>

000018f4 <__fixdfsi>:
    18f4:	280cd53a 	srli	r6,r5,20
    18f8:	00c00434 	movhi	r3,16
    18fc:	18ffffc4 	addi	r3,r3,-1
    1900:	3181ffcc 	andi	r6,r6,2047
    1904:	01c0ff84 	movi	r7,1022
    1908:	28c6703a 	and	r3,r5,r3
    190c:	280ad7fa 	srli	r5,r5,31
    1910:	3980120e 	bge	r7,r6,195c <__fixdfsi+0x68>
    1914:	00810744 	movi	r2,1053
    1918:	11800c16 	blt	r2,r6,194c <__fixdfsi+0x58>
    191c:	00810cc4 	movi	r2,1075
    1920:	1185c83a 	sub	r2,r2,r6
    1924:	01c007c4 	movi	r7,31
    1928:	18c00434 	orhi	r3,r3,16
    192c:	38800d16 	blt	r7,r2,1964 <__fixdfsi+0x70>
    1930:	31befb44 	addi	r6,r6,-1043
    1934:	2084d83a 	srl	r2,r4,r2
    1938:	1986983a 	sll	r3,r3,r6
    193c:	1884b03a 	or	r2,r3,r2
    1940:	28000726 	beq	r5,zero,1960 <__fixdfsi+0x6c>
    1944:	0085c83a 	sub	r2,zero,r2
    1948:	f800283a 	ret
    194c:	00a00034 	movhi	r2,32768
    1950:	10bfffc4 	addi	r2,r2,-1
    1954:	2885883a 	add	r2,r5,r2
    1958:	f800283a 	ret
    195c:	0005883a 	mov	r2,zero
    1960:	f800283a 	ret
    1964:	008104c4 	movi	r2,1043
    1968:	1185c83a 	sub	r2,r2,r6
    196c:	1884d83a 	srl	r2,r3,r2
    1970:	003ff306 	br	1940 <__alt_data_end+0xf8001940>

00001974 <__floatsidf>:
    1974:	defffd04 	addi	sp,sp,-12
    1978:	dfc00215 	stw	ra,8(sp)
    197c:	dc400115 	stw	r17,4(sp)
    1980:	dc000015 	stw	r16,0(sp)
    1984:	20002b26 	beq	r4,zero,1a34 <__floatsidf+0xc0>
    1988:	2023883a 	mov	r17,r4
    198c:	2020d7fa 	srli	r16,r4,31
    1990:	20002d16 	blt	r4,zero,1a48 <__floatsidf+0xd4>
    1994:	8809883a 	mov	r4,r17
    1998:	0001a500 	call	1a50 <__clzsi2>
    199c:	01410784 	movi	r5,1054
    19a0:	288bc83a 	sub	r5,r5,r2
    19a4:	01010cc4 	movi	r4,1075
    19a8:	2149c83a 	sub	r4,r4,r5
    19ac:	00c007c4 	movi	r3,31
    19b0:	1900160e 	bge	r3,r4,1a0c <__floatsidf+0x98>
    19b4:	00c104c4 	movi	r3,1043
    19b8:	1947c83a 	sub	r3,r3,r5
    19bc:	88c6983a 	sll	r3,r17,r3
    19c0:	00800434 	movhi	r2,16
    19c4:	10bfffc4 	addi	r2,r2,-1
    19c8:	1886703a 	and	r3,r3,r2
    19cc:	2941ffcc 	andi	r5,r5,2047
    19d0:	800d883a 	mov	r6,r16
    19d4:	0005883a 	mov	r2,zero
    19d8:	280a953a 	slli	r5,r5,20
    19dc:	31803fcc 	andi	r6,r6,255
    19e0:	01000434 	movhi	r4,16
    19e4:	300c97fa 	slli	r6,r6,31
    19e8:	213fffc4 	addi	r4,r4,-1
    19ec:	1906703a 	and	r3,r3,r4
    19f0:	1946b03a 	or	r3,r3,r5
    19f4:	1986b03a 	or	r3,r3,r6
    19f8:	dfc00217 	ldw	ra,8(sp)
    19fc:	dc400117 	ldw	r17,4(sp)
    1a00:	dc000017 	ldw	r16,0(sp)
    1a04:	dec00304 	addi	sp,sp,12
    1a08:	f800283a 	ret
    1a0c:	00c002c4 	movi	r3,11
    1a10:	1887c83a 	sub	r3,r3,r2
    1a14:	88c6d83a 	srl	r3,r17,r3
    1a18:	8904983a 	sll	r2,r17,r4
    1a1c:	01000434 	movhi	r4,16
    1a20:	213fffc4 	addi	r4,r4,-1
    1a24:	2941ffcc 	andi	r5,r5,2047
    1a28:	1906703a 	and	r3,r3,r4
    1a2c:	800d883a 	mov	r6,r16
    1a30:	003fe906 	br	19d8 <__alt_data_end+0xf80019d8>
    1a34:	000d883a 	mov	r6,zero
    1a38:	000b883a 	mov	r5,zero
    1a3c:	0007883a 	mov	r3,zero
    1a40:	0005883a 	mov	r2,zero
    1a44:	003fe406 	br	19d8 <__alt_data_end+0xf80019d8>
    1a48:	0123c83a 	sub	r17,zero,r4
    1a4c:	003fd106 	br	1994 <__alt_data_end+0xf8001994>

00001a50 <__clzsi2>:
    1a50:	00bfffd4 	movui	r2,65535
    1a54:	11000536 	bltu	r2,r4,1a6c <__clzsi2+0x1c>
    1a58:	00803fc4 	movi	r2,255
    1a5c:	11000f36 	bltu	r2,r4,1a9c <__clzsi2+0x4c>
    1a60:	00800804 	movi	r2,32
    1a64:	0007883a 	mov	r3,zero
    1a68:	00000506 	br	1a80 <__clzsi2+0x30>
    1a6c:	00804034 	movhi	r2,256
    1a70:	10bfffc4 	addi	r2,r2,-1
    1a74:	11000c2e 	bgeu	r2,r4,1aa8 <__clzsi2+0x58>
    1a78:	00800204 	movi	r2,8
    1a7c:	00c00604 	movi	r3,24
    1a80:	20c8d83a 	srl	r4,r4,r3
    1a84:	00c00034 	movhi	r3,0
    1a88:	18d43004 	addi	r3,r3,20672
    1a8c:	1909883a 	add	r4,r3,r4
    1a90:	20c00003 	ldbu	r3,0(r4)
    1a94:	10c5c83a 	sub	r2,r2,r3
    1a98:	f800283a 	ret
    1a9c:	00800604 	movi	r2,24
    1aa0:	00c00204 	movi	r3,8
    1aa4:	003ff606 	br	1a80 <__alt_data_end+0xf8001a80>
    1aa8:	00800404 	movi	r2,16
    1aac:	1007883a 	mov	r3,r2
    1ab0:	003ff306 	br	1a80 <__alt_data_end+0xf8001a80>

00001ab4 <__divsi3>:
    1ab4:	20001b16 	blt	r4,zero,1b24 <__divsi3+0x70>
    1ab8:	000f883a 	mov	r7,zero
    1abc:	28001616 	blt	r5,zero,1b18 <__divsi3+0x64>
    1ac0:	200d883a 	mov	r6,r4
    1ac4:	29001a2e 	bgeu	r5,r4,1b30 <__divsi3+0x7c>
    1ac8:	00800804 	movi	r2,32
    1acc:	00c00044 	movi	r3,1
    1ad0:	00000106 	br	1ad8 <__divsi3+0x24>
    1ad4:	10000d26 	beq	r2,zero,1b0c <__divsi3+0x58>
    1ad8:	294b883a 	add	r5,r5,r5
    1adc:	10bfffc4 	addi	r2,r2,-1
    1ae0:	18c7883a 	add	r3,r3,r3
    1ae4:	293ffb36 	bltu	r5,r4,1ad4 <__alt_data_end+0xf8001ad4>
    1ae8:	0005883a 	mov	r2,zero
    1aec:	18000726 	beq	r3,zero,1b0c <__divsi3+0x58>
    1af0:	0005883a 	mov	r2,zero
    1af4:	31400236 	bltu	r6,r5,1b00 <__divsi3+0x4c>
    1af8:	314dc83a 	sub	r6,r6,r5
    1afc:	10c4b03a 	or	r2,r2,r3
    1b00:	1806d07a 	srli	r3,r3,1
    1b04:	280ad07a 	srli	r5,r5,1
    1b08:	183ffa1e 	bne	r3,zero,1af4 <__alt_data_end+0xf8001af4>
    1b0c:	38000126 	beq	r7,zero,1b14 <__divsi3+0x60>
    1b10:	0085c83a 	sub	r2,zero,r2
    1b14:	f800283a 	ret
    1b18:	014bc83a 	sub	r5,zero,r5
    1b1c:	39c0005c 	xori	r7,r7,1
    1b20:	003fe706 	br	1ac0 <__alt_data_end+0xf8001ac0>
    1b24:	0109c83a 	sub	r4,zero,r4
    1b28:	01c00044 	movi	r7,1
    1b2c:	003fe306 	br	1abc <__alt_data_end+0xf8001abc>
    1b30:	00c00044 	movi	r3,1
    1b34:	003fee06 	br	1af0 <__alt_data_end+0xf8001af0>

00001b38 <__modsi3>:
    1b38:	20001716 	blt	r4,zero,1b98 <__modsi3+0x60>
    1b3c:	000f883a 	mov	r7,zero
    1b40:	2005883a 	mov	r2,r4
    1b44:	28001216 	blt	r5,zero,1b90 <__modsi3+0x58>
    1b48:	2900162e 	bgeu	r5,r4,1ba4 <__modsi3+0x6c>
    1b4c:	01800804 	movi	r6,32
    1b50:	00c00044 	movi	r3,1
    1b54:	00000106 	br	1b5c <__modsi3+0x24>
    1b58:	30000a26 	beq	r6,zero,1b84 <__modsi3+0x4c>
    1b5c:	294b883a 	add	r5,r5,r5
    1b60:	31bfffc4 	addi	r6,r6,-1
    1b64:	18c7883a 	add	r3,r3,r3
    1b68:	293ffb36 	bltu	r5,r4,1b58 <__alt_data_end+0xf8001b58>
    1b6c:	18000526 	beq	r3,zero,1b84 <__modsi3+0x4c>
    1b70:	1806d07a 	srli	r3,r3,1
    1b74:	11400136 	bltu	r2,r5,1b7c <__modsi3+0x44>
    1b78:	1145c83a 	sub	r2,r2,r5
    1b7c:	280ad07a 	srli	r5,r5,1
    1b80:	183ffb1e 	bne	r3,zero,1b70 <__alt_data_end+0xf8001b70>
    1b84:	38000126 	beq	r7,zero,1b8c <__modsi3+0x54>
    1b88:	0085c83a 	sub	r2,zero,r2
    1b8c:	f800283a 	ret
    1b90:	014bc83a 	sub	r5,zero,r5
    1b94:	003fec06 	br	1b48 <__alt_data_end+0xf8001b48>
    1b98:	0109c83a 	sub	r4,zero,r4
    1b9c:	01c00044 	movi	r7,1
    1ba0:	003fe706 	br	1b40 <__alt_data_end+0xf8001b40>
    1ba4:	00c00044 	movi	r3,1
    1ba8:	003ff106 	br	1b70 <__alt_data_end+0xf8001b70>

00001bac <__udivsi3>:
    1bac:	200d883a 	mov	r6,r4
    1bb0:	2900152e 	bgeu	r5,r4,1c08 <__udivsi3+0x5c>
    1bb4:	28001416 	blt	r5,zero,1c08 <__udivsi3+0x5c>
    1bb8:	00800804 	movi	r2,32
    1bbc:	00c00044 	movi	r3,1
    1bc0:	00000206 	br	1bcc <__udivsi3+0x20>
    1bc4:	10000e26 	beq	r2,zero,1c00 <__udivsi3+0x54>
    1bc8:	28000516 	blt	r5,zero,1be0 <__udivsi3+0x34>
    1bcc:	294b883a 	add	r5,r5,r5
    1bd0:	10bfffc4 	addi	r2,r2,-1
    1bd4:	18c7883a 	add	r3,r3,r3
    1bd8:	293ffa36 	bltu	r5,r4,1bc4 <__alt_data_end+0xf8001bc4>
    1bdc:	18000826 	beq	r3,zero,1c00 <__udivsi3+0x54>
    1be0:	0005883a 	mov	r2,zero
    1be4:	31400236 	bltu	r6,r5,1bf0 <__udivsi3+0x44>
    1be8:	314dc83a 	sub	r6,r6,r5
    1bec:	10c4b03a 	or	r2,r2,r3
    1bf0:	1806d07a 	srli	r3,r3,1
    1bf4:	280ad07a 	srli	r5,r5,1
    1bf8:	183ffa1e 	bne	r3,zero,1be4 <__alt_data_end+0xf8001be4>
    1bfc:	f800283a 	ret
    1c00:	0005883a 	mov	r2,zero
    1c04:	f800283a 	ret
    1c08:	00c00044 	movi	r3,1
    1c0c:	003ff406 	br	1be0 <__alt_data_end+0xf8001be0>

00001c10 <__umodsi3>:
    1c10:	2005883a 	mov	r2,r4
    1c14:	2900122e 	bgeu	r5,r4,1c60 <__umodsi3+0x50>
    1c18:	28001116 	blt	r5,zero,1c60 <__umodsi3+0x50>
    1c1c:	01800804 	movi	r6,32
    1c20:	00c00044 	movi	r3,1
    1c24:	00000206 	br	1c30 <__umodsi3+0x20>
    1c28:	30000c26 	beq	r6,zero,1c5c <__umodsi3+0x4c>
    1c2c:	28000516 	blt	r5,zero,1c44 <__umodsi3+0x34>
    1c30:	294b883a 	add	r5,r5,r5
    1c34:	31bfffc4 	addi	r6,r6,-1
    1c38:	18c7883a 	add	r3,r3,r3
    1c3c:	293ffa36 	bltu	r5,r4,1c28 <__alt_data_end+0xf8001c28>
    1c40:	18000626 	beq	r3,zero,1c5c <__umodsi3+0x4c>
    1c44:	1806d07a 	srli	r3,r3,1
    1c48:	11400136 	bltu	r2,r5,1c50 <__umodsi3+0x40>
    1c4c:	1145c83a 	sub	r2,r2,r5
    1c50:	280ad07a 	srli	r5,r5,1
    1c54:	183ffb1e 	bne	r3,zero,1c44 <__alt_data_end+0xf8001c44>
    1c58:	f800283a 	ret
    1c5c:	f800283a 	ret
    1c60:	00c00044 	movi	r3,1
    1c64:	003ff706 	br	1c44 <__alt_data_end+0xf8001c44>

00001c68 <strlen>:
    1c68:	208000cc 	andi	r2,r4,3
    1c6c:	10002026 	beq	r2,zero,1cf0 <strlen+0x88>
    1c70:	20800007 	ldb	r2,0(r4)
    1c74:	10002026 	beq	r2,zero,1cf8 <strlen+0x90>
    1c78:	2005883a 	mov	r2,r4
    1c7c:	00000206 	br	1c88 <strlen+0x20>
    1c80:	10c00007 	ldb	r3,0(r2)
    1c84:	18001826 	beq	r3,zero,1ce8 <strlen+0x80>
    1c88:	10800044 	addi	r2,r2,1
    1c8c:	10c000cc 	andi	r3,r2,3
    1c90:	183ffb1e 	bne	r3,zero,1c80 <__alt_data_end+0xf8001c80>
    1c94:	10c00017 	ldw	r3,0(r2)
    1c98:	01ffbff4 	movhi	r7,65279
    1c9c:	39ffbfc4 	addi	r7,r7,-257
    1ca0:	00ca303a 	nor	r5,zero,r3
    1ca4:	01a02074 	movhi	r6,32897
    1ca8:	19c7883a 	add	r3,r3,r7
    1cac:	31a02004 	addi	r6,r6,-32640
    1cb0:	1946703a 	and	r3,r3,r5
    1cb4:	1986703a 	and	r3,r3,r6
    1cb8:	1800091e 	bne	r3,zero,1ce0 <strlen+0x78>
    1cbc:	10800104 	addi	r2,r2,4
    1cc0:	10c00017 	ldw	r3,0(r2)
    1cc4:	19cb883a 	add	r5,r3,r7
    1cc8:	00c6303a 	nor	r3,zero,r3
    1ccc:	28c6703a 	and	r3,r5,r3
    1cd0:	1986703a 	and	r3,r3,r6
    1cd4:	183ff926 	beq	r3,zero,1cbc <__alt_data_end+0xf8001cbc>
    1cd8:	00000106 	br	1ce0 <strlen+0x78>
    1cdc:	10800044 	addi	r2,r2,1
    1ce0:	10c00007 	ldb	r3,0(r2)
    1ce4:	183ffd1e 	bne	r3,zero,1cdc <__alt_data_end+0xf8001cdc>
    1ce8:	1105c83a 	sub	r2,r2,r4
    1cec:	f800283a 	ret
    1cf0:	2005883a 	mov	r2,r4
    1cf4:	003fe706 	br	1c94 <__alt_data_end+0xf8001c94>
    1cf8:	0005883a 	mov	r2,zero
    1cfc:	f800283a 	ret

00001d00 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1d00:	defffc04 	addi	sp,sp,-16
    1d04:	df000315 	stw	fp,12(sp)
    1d08:	df000304 	addi	fp,sp,12
    1d0c:	e13ffd15 	stw	r4,-12(fp)
    1d10:	e17ffe15 	stw	r5,-8(fp)
    1d14:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1d18:	e0fffe17 	ldw	r3,-8(fp)
    1d1c:	e0bffd17 	ldw	r2,-12(fp)
    1d20:	18800c26 	beq	r3,r2,1d54 <alt_load_section+0x54>
  {
    while( to != end )
    1d24:	00000806 	br	1d48 <alt_load_section+0x48>
    {
      *to++ = *from++;
    1d28:	e0bffe17 	ldw	r2,-8(fp)
    1d2c:	10c00104 	addi	r3,r2,4
    1d30:	e0fffe15 	stw	r3,-8(fp)
    1d34:	e0fffd17 	ldw	r3,-12(fp)
    1d38:	19000104 	addi	r4,r3,4
    1d3c:	e13ffd15 	stw	r4,-12(fp)
    1d40:	18c00017 	ldw	r3,0(r3)
    1d44:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1d48:	e0fffe17 	ldw	r3,-8(fp)
    1d4c:	e0bfff17 	ldw	r2,-4(fp)
    1d50:	18bff51e 	bne	r3,r2,1d28 <__alt_data_end+0xf8001d28>
    {
      *to++ = *from++;
    }
  }
}
    1d54:	0001883a 	nop
    1d58:	e037883a 	mov	sp,fp
    1d5c:	df000017 	ldw	fp,0(sp)
    1d60:	dec00104 	addi	sp,sp,4
    1d64:	f800283a 	ret

00001d68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1d68:	defffe04 	addi	sp,sp,-8
    1d6c:	dfc00115 	stw	ra,4(sp)
    1d70:	df000015 	stw	fp,0(sp)
    1d74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1d78:	01800034 	movhi	r6,0
    1d7c:	319aff04 	addi	r6,r6,27644
    1d80:	01400034 	movhi	r5,0
    1d84:	29551f04 	addi	r5,r5,21628
    1d88:	01000034 	movhi	r4,0
    1d8c:	211aff04 	addi	r4,r4,27644
    1d90:	0001d000 	call	1d00 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1d94:	01800034 	movhi	r6,0
    1d98:	31807004 	addi	r6,r6,448
    1d9c:	01400034 	movhi	r5,0
    1da0:	29400804 	addi	r5,r5,32
    1da4:	01000034 	movhi	r4,0
    1da8:	21000804 	addi	r4,r4,32
    1dac:	0001d000 	call	1d00 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1db0:	01800034 	movhi	r6,0
    1db4:	31951f04 	addi	r6,r6,21628
    1db8:	01400034 	movhi	r5,0
    1dbc:	29543004 	addi	r5,r5,20672
    1dc0:	01000034 	movhi	r4,0
    1dc4:	21143004 	addi	r4,r4,20672
    1dc8:	0001d000 	call	1d00 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1dcc:	0003d480 	call	3d48 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1dd0:	0003f5c0 	call	3f5c <alt_icache_flush_all>
}
    1dd4:	0001883a 	nop
    1dd8:	e037883a 	mov	sp,fp
    1ddc:	dfc00117 	ldw	ra,4(sp)
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00204 	addi	sp,sp,8
    1de8:	f800283a 	ret

00001dec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1dec:	defffd04 	addi	sp,sp,-12
    1df0:	dfc00215 	stw	ra,8(sp)
    1df4:	df000115 	stw	fp,4(sp)
    1df8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1dfc:	0009883a 	mov	r4,zero
    1e00:	0001ecc0 	call	1ecc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    1e04:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1e08:	0001f040 	call	1f04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1e0c:	01800034 	movhi	r6,0
    1e10:	31947004 	addi	r6,r6,20928
    1e14:	01400034 	movhi	r5,0
    1e18:	29547004 	addi	r5,r5,20928
    1e1c:	01000034 	movhi	r4,0
    1e20:	21147004 	addi	r4,r4,20928
    1e24:	00042f40 	call	42f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1e28:	0003e9c0 	call	3e9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    1e2c:	01000034 	movhi	r4,0
    1e30:	210fbf04 	addi	r4,r4,16124
    1e34:	0004abc0 	call	4abc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1e38:	d0a5ed17 	ldw	r2,-26700(gp)
    1e3c:	d0e5ee17 	ldw	r3,-26696(gp)
    1e40:	d125ef17 	ldw	r4,-26692(gp)
    1e44:	200d883a 	mov	r6,r4
    1e48:	180b883a 	mov	r5,r3
    1e4c:	1009883a 	mov	r4,r2
    1e50:	000029c0 	call	29c <main>
    1e54:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    1e58:	01000044 	movi	r4,1
    1e5c:	0003c780 	call	3c78 <close>
  exit (result);
    1e60:	e13fff17 	ldw	r4,-4(fp)
    1e64:	0004ad00 	call	4ad0 <exit>

00001e68 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    1e68:	defffd04 	addi	sp,sp,-12
    1e6c:	dfc00215 	stw	ra,8(sp)
    1e70:	df000115 	stw	fp,4(sp)
    1e74:	df000104 	addi	fp,sp,4
    1e78:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    1e7c:	e13fff17 	ldw	r4,-4(fp)
    1e80:	0003ae40 	call	3ae4 <alt_busy_sleep>
}
    1e84:	e037883a 	mov	sp,fp
    1e88:	dfc00117 	ldw	ra,4(sp)
    1e8c:	df000017 	ldw	fp,0(sp)
    1e90:	dec00204 	addi	sp,sp,8
    1e94:	f800283a 	ret

00001e98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1e98:	defffd04 	addi	sp,sp,-12
    1e9c:	dfc00215 	stw	ra,8(sp)
    1ea0:	df000115 	stw	fp,4(sp)
    1ea4:	df000104 	addi	fp,sp,4
    1ea8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1eac:	d1600304 	addi	r5,gp,-32756
    1eb0:	e13fff17 	ldw	r4,-4(fp)
    1eb4:	0003df80 	call	3df8 <alt_dev_llist_insert>
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	dfc00117 	ldw	ra,4(sp)
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00204 	addi	sp,sp,8
    1ec8:	f800283a 	ret

00001ecc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1ecc:	defffd04 	addi	sp,sp,-12
    1ed0:	dfc00215 	stw	ra,8(sp)
    1ed4:	df000115 	stw	fp,4(sp)
    1ed8:	df000104 	addi	fp,sp,4
    1edc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    1ee0:	00047cc0 	call	47cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1ee4:	00800044 	movi	r2,1
    1ee8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1eec:	0001883a 	nop
    1ef0:	e037883a 	mov	sp,fp
    1ef4:	dfc00117 	ldw	ra,4(sp)
    1ef8:	df000017 	ldw	fp,0(sp)
    1efc:	dec00204 	addi	sp,sp,8
    1f00:	f800283a 	ret

00001f04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1f04:	defffe04 	addi	sp,sp,-8
    1f08:	dfc00115 	stw	ra,4(sp)
    1f0c:	df000015 	stw	fp,0(sp)
    1f10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    1f14:	01c0fa04 	movi	r7,1000
    1f18:	000d883a 	mov	r6,zero
    1f1c:	000b883a 	mov	r5,zero
    1f20:	01020034 	movhi	r4,2048
    1f24:	21040004 	addi	r4,r4,4096
    1f28:	000393c0 	call	393c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_STAMP, timer_stamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    1f2c:	018000c4 	movi	r6,3
    1f30:	000b883a 	mov	r5,zero
    1f34:	01000034 	movhi	r4,0
    1f38:	21152904 	addi	r4,r4,21668
    1f3c:	00020e40 	call	20e4 <altera_avalon_jtag_uart_init>
    1f40:	01000034 	movhi	r4,0
    1f44:	21151f04 	addi	r4,r4,21628
    1f48:	0001e980 	call	1e98 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
    1f4c:	01000034 	movhi	r4,0
    1f50:	21194104 	addi	r4,r4,25860
    1f54:	00037300 	call	3730 <altera_avalon_lcd_16207_init>
    1f58:	01000034 	movhi	r4,0
    1f5c:	21193704 	addi	r4,r4,25820
    1f60:	0001e980 	call	1e98 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    1f64:	0001883a 	nop
}
    1f68:	0001883a 	nop
    1f6c:	e037883a 	mov	sp,fp
    1f70:	dfc00117 	ldw	ra,4(sp)
    1f74:	df000017 	ldw	fp,0(sp)
    1f78:	dec00204 	addi	sp,sp,8
    1f7c:	f800283a 	ret

00001f80 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1f80:	defffa04 	addi	sp,sp,-24
    1f84:	dfc00515 	stw	ra,20(sp)
    1f88:	df000415 	stw	fp,16(sp)
    1f8c:	df000404 	addi	fp,sp,16
    1f90:	e13ffd15 	stw	r4,-12(fp)
    1f94:	e17ffe15 	stw	r5,-8(fp)
    1f98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1f9c:	e0bffd17 	ldw	r2,-12(fp)
    1fa0:	10800017 	ldw	r2,0(r2)
    1fa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1fa8:	e0bffc17 	ldw	r2,-16(fp)
    1fac:	10c00a04 	addi	r3,r2,40
    1fb0:	e0bffd17 	ldw	r2,-12(fp)
    1fb4:	10800217 	ldw	r2,8(r2)
    1fb8:	100f883a 	mov	r7,r2
    1fbc:	e1bfff17 	ldw	r6,-4(fp)
    1fc0:	e17ffe17 	ldw	r5,-8(fp)
    1fc4:	1809883a 	mov	r4,r3
    1fc8:	00025a80 	call	25a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1fcc:	e037883a 	mov	sp,fp
    1fd0:	dfc00117 	ldw	ra,4(sp)
    1fd4:	df000017 	ldw	fp,0(sp)
    1fd8:	dec00204 	addi	sp,sp,8
    1fdc:	f800283a 	ret

00001fe0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1fe0:	defffa04 	addi	sp,sp,-24
    1fe4:	dfc00515 	stw	ra,20(sp)
    1fe8:	df000415 	stw	fp,16(sp)
    1fec:	df000404 	addi	fp,sp,16
    1ff0:	e13ffd15 	stw	r4,-12(fp)
    1ff4:	e17ffe15 	stw	r5,-8(fp)
    1ff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1ffc:	e0bffd17 	ldw	r2,-12(fp)
    2000:	10800017 	ldw	r2,0(r2)
    2004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    2008:	e0bffc17 	ldw	r2,-16(fp)
    200c:	10c00a04 	addi	r3,r2,40
    2010:	e0bffd17 	ldw	r2,-12(fp)
    2014:	10800217 	ldw	r2,8(r2)
    2018:	100f883a 	mov	r7,r2
    201c:	e1bfff17 	ldw	r6,-4(fp)
    2020:	e17ffe17 	ldw	r5,-8(fp)
    2024:	1809883a 	mov	r4,r3
    2028:	00027c40 	call	27c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    202c:	e037883a 	mov	sp,fp
    2030:	dfc00117 	ldw	ra,4(sp)
    2034:	df000017 	ldw	fp,0(sp)
    2038:	dec00204 	addi	sp,sp,8
    203c:	f800283a 	ret

00002040 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    2040:	defffc04 	addi	sp,sp,-16
    2044:	dfc00315 	stw	ra,12(sp)
    2048:	df000215 	stw	fp,8(sp)
    204c:	df000204 	addi	fp,sp,8
    2050:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2054:	e0bfff17 	ldw	r2,-4(fp)
    2058:	10800017 	ldw	r2,0(r2)
    205c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    2060:	e0bffe17 	ldw	r2,-8(fp)
    2064:	10c00a04 	addi	r3,r2,40
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	10800217 	ldw	r2,8(r2)
    2070:	100b883a 	mov	r5,r2
    2074:	1809883a 	mov	r4,r3
    2078:	00024500 	call	2450 <altera_avalon_jtag_uart_close>
}
    207c:	e037883a 	mov	sp,fp
    2080:	dfc00117 	ldw	ra,4(sp)
    2084:	df000017 	ldw	fp,0(sp)
    2088:	dec00204 	addi	sp,sp,8
    208c:	f800283a 	ret

00002090 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    2090:	defffa04 	addi	sp,sp,-24
    2094:	dfc00515 	stw	ra,20(sp)
    2098:	df000415 	stw	fp,16(sp)
    209c:	df000404 	addi	fp,sp,16
    20a0:	e13ffd15 	stw	r4,-12(fp)
    20a4:	e17ffe15 	stw	r5,-8(fp)
    20a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    20ac:	e0bffd17 	ldw	r2,-12(fp)
    20b0:	10800017 	ldw	r2,0(r2)
    20b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    20b8:	e0bffc17 	ldw	r2,-16(fp)
    20bc:	10800a04 	addi	r2,r2,40
    20c0:	e1bfff17 	ldw	r6,-4(fp)
    20c4:	e17ffe17 	ldw	r5,-8(fp)
    20c8:	1009883a 	mov	r4,r2
    20cc:	00024b80 	call	24b8 <altera_avalon_jtag_uart_ioctl>
}
    20d0:	e037883a 	mov	sp,fp
    20d4:	dfc00117 	ldw	ra,4(sp)
    20d8:	df000017 	ldw	fp,0(sp)
    20dc:	dec00204 	addi	sp,sp,8
    20e0:	f800283a 	ret

000020e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    20e4:	defffa04 	addi	sp,sp,-24
    20e8:	dfc00515 	stw	ra,20(sp)
    20ec:	df000415 	stw	fp,16(sp)
    20f0:	df000404 	addi	fp,sp,16
    20f4:	e13ffd15 	stw	r4,-12(fp)
    20f8:	e17ffe15 	stw	r5,-8(fp)
    20fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2100:	e0bffd17 	ldw	r2,-12(fp)
    2104:	00c00044 	movi	r3,1
    2108:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    210c:	e0bffd17 	ldw	r2,-12(fp)
    2110:	10800017 	ldw	r2,0(r2)
    2114:	10800104 	addi	r2,r2,4
    2118:	1007883a 	mov	r3,r2
    211c:	e0bffd17 	ldw	r2,-12(fp)
    2120:	10800817 	ldw	r2,32(r2)
    2124:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    2128:	e0bffe17 	ldw	r2,-8(fp)
    212c:	e0ffff17 	ldw	r3,-4(fp)
    2130:	d8000015 	stw	zero,0(sp)
    2134:	e1fffd17 	ldw	r7,-12(fp)
    2138:	01800034 	movhi	r6,0
    213c:	31886904 	addi	r6,r6,8612
    2140:	180b883a 	mov	r5,r3
    2144:	1009883a 	mov	r4,r2
    2148:	0003f900 	call	3f90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    214c:	e0bffd17 	ldw	r2,-12(fp)
    2150:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    2154:	e0bffd17 	ldw	r2,-12(fp)
    2158:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    215c:	d0e5f117 	ldw	r3,-26684(gp)
    2160:	e1fffd17 	ldw	r7,-12(fp)
    2164:	01800034 	movhi	r6,0
    2168:	3188ec04 	addi	r6,r6,9136
    216c:	180b883a 	mov	r5,r3
    2170:	1009883a 	mov	r4,r2
    2174:	00039b80 	call	39b8 <alt_alarm_start>
    2178:	1000040e 	bge	r2,zero,218c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    217c:	e0fffd17 	ldw	r3,-12(fp)
    2180:	00a00034 	movhi	r2,32768
    2184:	10bfffc4 	addi	r2,r2,-1
    2188:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    218c:	0001883a 	nop
    2190:	e037883a 	mov	sp,fp
    2194:	dfc00117 	ldw	ra,4(sp)
    2198:	df000017 	ldw	fp,0(sp)
    219c:	dec00204 	addi	sp,sp,8
    21a0:	f800283a 	ret

000021a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    21a4:	defff804 	addi	sp,sp,-32
    21a8:	df000715 	stw	fp,28(sp)
    21ac:	df000704 	addi	fp,sp,28
    21b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    21b4:	e0bfff17 	ldw	r2,-4(fp)
    21b8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    21bc:	e0bffb17 	ldw	r2,-20(fp)
    21c0:	10800017 	ldw	r2,0(r2)
    21c4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    21c8:	e0bffc17 	ldw	r2,-16(fp)
    21cc:	10800104 	addi	r2,r2,4
    21d0:	10800037 	ldwio	r2,0(r2)
    21d4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    21d8:	e0bffd17 	ldw	r2,-12(fp)
    21dc:	1080c00c 	andi	r2,r2,768
    21e0:	10006d26 	beq	r2,zero,2398 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    21e4:	e0bffd17 	ldw	r2,-12(fp)
    21e8:	1080400c 	andi	r2,r2,256
    21ec:	10003526 	beq	r2,zero,22c4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    21f0:	00800074 	movhi	r2,1
    21f4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    21f8:	e0bffb17 	ldw	r2,-20(fp)
    21fc:	10800a17 	ldw	r2,40(r2)
    2200:	10800044 	addi	r2,r2,1
    2204:	1081ffcc 	andi	r2,r2,2047
    2208:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    220c:	e0bffb17 	ldw	r2,-20(fp)
    2210:	10c00b17 	ldw	r3,44(r2)
    2214:	e0bffe17 	ldw	r2,-8(fp)
    2218:	18801526 	beq	r3,r2,2270 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    221c:	e0bffc17 	ldw	r2,-16(fp)
    2220:	10800037 	ldwio	r2,0(r2)
    2224:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    2228:	e0bff917 	ldw	r2,-28(fp)
    222c:	10a0000c 	andi	r2,r2,32768
    2230:	10001126 	beq	r2,zero,2278 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    2234:	e0bffb17 	ldw	r2,-20(fp)
    2238:	10800a17 	ldw	r2,40(r2)
    223c:	e0fff917 	ldw	r3,-28(fp)
    2240:	1809883a 	mov	r4,r3
    2244:	e0fffb17 	ldw	r3,-20(fp)
    2248:	1885883a 	add	r2,r3,r2
    224c:	10800e04 	addi	r2,r2,56
    2250:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2254:	e0bffb17 	ldw	r2,-20(fp)
    2258:	10800a17 	ldw	r2,40(r2)
    225c:	10800044 	addi	r2,r2,1
    2260:	10c1ffcc 	andi	r3,r2,2047
    2264:	e0bffb17 	ldw	r2,-20(fp)
    2268:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    226c:	003fe206 	br	21f8 <__alt_data_end+0xf80021f8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    2270:	0001883a 	nop
    2274:	00000106 	br	227c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    2278:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    227c:	e0bff917 	ldw	r2,-28(fp)
    2280:	10bfffec 	andhi	r2,r2,65535
    2284:	10000f26 	beq	r2,zero,22c4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2288:	e0bffb17 	ldw	r2,-20(fp)
    228c:	10c00817 	ldw	r3,32(r2)
    2290:	00bfff84 	movi	r2,-2
    2294:	1886703a 	and	r3,r3,r2
    2298:	e0bffb17 	ldw	r2,-20(fp)
    229c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    22a0:	e0bffc17 	ldw	r2,-16(fp)
    22a4:	10800104 	addi	r2,r2,4
    22a8:	1007883a 	mov	r3,r2
    22ac:	e0bffb17 	ldw	r2,-20(fp)
    22b0:	10800817 	ldw	r2,32(r2)
    22b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    22b8:	e0bffc17 	ldw	r2,-16(fp)
    22bc:	10800104 	addi	r2,r2,4
    22c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    22c4:	e0bffd17 	ldw	r2,-12(fp)
    22c8:	1080800c 	andi	r2,r2,512
    22cc:	103fbe26 	beq	r2,zero,21c8 <__alt_data_end+0xf80021c8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    22d0:	e0bffd17 	ldw	r2,-12(fp)
    22d4:	1004d43a 	srli	r2,r2,16
    22d8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    22dc:	00001406 	br	2330 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    22e0:	e0bffc17 	ldw	r2,-16(fp)
    22e4:	e0fffb17 	ldw	r3,-20(fp)
    22e8:	18c00d17 	ldw	r3,52(r3)
    22ec:	e13ffb17 	ldw	r4,-20(fp)
    22f0:	20c7883a 	add	r3,r4,r3
    22f4:	18c20e04 	addi	r3,r3,2104
    22f8:	18c00003 	ldbu	r3,0(r3)
    22fc:	18c03fcc 	andi	r3,r3,255
    2300:	18c0201c 	xori	r3,r3,128
    2304:	18ffe004 	addi	r3,r3,-128
    2308:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    230c:	e0bffb17 	ldw	r2,-20(fp)
    2310:	10800d17 	ldw	r2,52(r2)
    2314:	10800044 	addi	r2,r2,1
    2318:	10c1ffcc 	andi	r3,r2,2047
    231c:	e0bffb17 	ldw	r2,-20(fp)
    2320:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2324:	e0bffa17 	ldw	r2,-24(fp)
    2328:	10bfffc4 	addi	r2,r2,-1
    232c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    2330:	e0bffa17 	ldw	r2,-24(fp)
    2334:	10000526 	beq	r2,zero,234c <altera_avalon_jtag_uart_irq+0x1a8>
    2338:	e0bffb17 	ldw	r2,-20(fp)
    233c:	10c00d17 	ldw	r3,52(r2)
    2340:	e0bffb17 	ldw	r2,-20(fp)
    2344:	10800c17 	ldw	r2,48(r2)
    2348:	18bfe51e 	bne	r3,r2,22e0 <__alt_data_end+0xf80022e0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    234c:	e0bffa17 	ldw	r2,-24(fp)
    2350:	103f9d26 	beq	r2,zero,21c8 <__alt_data_end+0xf80021c8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2354:	e0bffb17 	ldw	r2,-20(fp)
    2358:	10c00817 	ldw	r3,32(r2)
    235c:	00bfff44 	movi	r2,-3
    2360:	1886703a 	and	r3,r3,r2
    2364:	e0bffb17 	ldw	r2,-20(fp)
    2368:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    236c:	e0bffb17 	ldw	r2,-20(fp)
    2370:	10800017 	ldw	r2,0(r2)
    2374:	10800104 	addi	r2,r2,4
    2378:	1007883a 	mov	r3,r2
    237c:	e0bffb17 	ldw	r2,-20(fp)
    2380:	10800817 	ldw	r2,32(r2)
    2384:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2388:	e0bffc17 	ldw	r2,-16(fp)
    238c:	10800104 	addi	r2,r2,4
    2390:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    2394:	003f8c06 	br	21c8 <__alt_data_end+0xf80021c8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    2398:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    239c:	0001883a 	nop
    23a0:	e037883a 	mov	sp,fp
    23a4:	df000017 	ldw	fp,0(sp)
    23a8:	dec00104 	addi	sp,sp,4
    23ac:	f800283a 	ret

000023b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    23b0:	defff804 	addi	sp,sp,-32
    23b4:	df000715 	stw	fp,28(sp)
    23b8:	df000704 	addi	fp,sp,28
    23bc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    23c0:	e0bffb17 	ldw	r2,-20(fp)
    23c4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    23c8:	e0bff917 	ldw	r2,-28(fp)
    23cc:	10800017 	ldw	r2,0(r2)
    23d0:	10800104 	addi	r2,r2,4
    23d4:	10800037 	ldwio	r2,0(r2)
    23d8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    23dc:	e0bffa17 	ldw	r2,-24(fp)
    23e0:	1081000c 	andi	r2,r2,1024
    23e4:	10000b26 	beq	r2,zero,2414 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    23e8:	e0bff917 	ldw	r2,-28(fp)
    23ec:	10800017 	ldw	r2,0(r2)
    23f0:	10800104 	addi	r2,r2,4
    23f4:	1007883a 	mov	r3,r2
    23f8:	e0bff917 	ldw	r2,-28(fp)
    23fc:	10800817 	ldw	r2,32(r2)
    2400:	10810014 	ori	r2,r2,1024
    2404:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    2408:	e0bff917 	ldw	r2,-28(fp)
    240c:	10000915 	stw	zero,36(r2)
    2410:	00000a06 	br	243c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    2414:	e0bff917 	ldw	r2,-28(fp)
    2418:	10c00917 	ldw	r3,36(r2)
    241c:	00a00034 	movhi	r2,32768
    2420:	10bfff04 	addi	r2,r2,-4
    2424:	10c00536 	bltu	r2,r3,243c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    2428:	e0bff917 	ldw	r2,-28(fp)
    242c:	10800917 	ldw	r2,36(r2)
    2430:	10c00044 	addi	r3,r2,1
    2434:	e0bff917 	ldw	r2,-28(fp)
    2438:	10c00915 	stw	r3,36(r2)
    243c:	d0a5f117 	ldw	r2,-26684(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    2440:	e037883a 	mov	sp,fp
    2444:	df000017 	ldw	fp,0(sp)
    2448:	dec00104 	addi	sp,sp,4
    244c:	f800283a 	ret

00002450 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    2450:	defffd04 	addi	sp,sp,-12
    2454:	df000215 	stw	fp,8(sp)
    2458:	df000204 	addi	fp,sp,8
    245c:	e13ffe15 	stw	r4,-8(fp)
    2460:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    2464:	00000506 	br	247c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    2468:	e0bfff17 	ldw	r2,-4(fp)
    246c:	1090000c 	andi	r2,r2,16384
    2470:	10000226 	beq	r2,zero,247c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    2474:	00bffd44 	movi	r2,-11
    2478:	00000b06 	br	24a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    247c:	e0bffe17 	ldw	r2,-8(fp)
    2480:	10c00d17 	ldw	r3,52(r2)
    2484:	e0bffe17 	ldw	r2,-8(fp)
    2488:	10800c17 	ldw	r2,48(r2)
    248c:	18800526 	beq	r3,r2,24a4 <altera_avalon_jtag_uart_close+0x54>
    2490:	e0bffe17 	ldw	r2,-8(fp)
    2494:	10c00917 	ldw	r3,36(r2)
    2498:	e0bffe17 	ldw	r2,-8(fp)
    249c:	10800117 	ldw	r2,4(r2)
    24a0:	18bff136 	bltu	r3,r2,2468 <__alt_data_end+0xf8002468>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    24a4:	0005883a 	mov	r2,zero
}
    24a8:	e037883a 	mov	sp,fp
    24ac:	df000017 	ldw	fp,0(sp)
    24b0:	dec00104 	addi	sp,sp,4
    24b4:	f800283a 	ret

000024b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    24b8:	defffa04 	addi	sp,sp,-24
    24bc:	df000515 	stw	fp,20(sp)
    24c0:	df000504 	addi	fp,sp,20
    24c4:	e13ffd15 	stw	r4,-12(fp)
    24c8:	e17ffe15 	stw	r5,-8(fp)
    24cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    24d0:	00bff9c4 	movi	r2,-25
    24d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    24d8:	e0bffe17 	ldw	r2,-8(fp)
    24dc:	10da8060 	cmpeqi	r3,r2,27137
    24e0:	1800031e 	bne	r3,zero,24f0 <altera_avalon_jtag_uart_ioctl+0x38>
    24e4:	109a80a0 	cmpeqi	r2,r2,27138
    24e8:	1000181e 	bne	r2,zero,254c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    24ec:	00002906 	br	2594 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    24f0:	e0bffd17 	ldw	r2,-12(fp)
    24f4:	10c00117 	ldw	r3,4(r2)
    24f8:	00a00034 	movhi	r2,32768
    24fc:	10bfffc4 	addi	r2,r2,-1
    2500:	18802126 	beq	r3,r2,2588 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    2504:	e0bfff17 	ldw	r2,-4(fp)
    2508:	10800017 	ldw	r2,0(r2)
    250c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    2510:	e0bffc17 	ldw	r2,-16(fp)
    2514:	10800090 	cmplti	r2,r2,2
    2518:	1000061e 	bne	r2,zero,2534 <altera_avalon_jtag_uart_ioctl+0x7c>
    251c:	e0fffc17 	ldw	r3,-16(fp)
    2520:	00a00034 	movhi	r2,32768
    2524:	10bfffc4 	addi	r2,r2,-1
    2528:	18800226 	beq	r3,r2,2534 <altera_avalon_jtag_uart_ioctl+0x7c>
    252c:	e0bffc17 	ldw	r2,-16(fp)
    2530:	00000206 	br	253c <altera_avalon_jtag_uart_ioctl+0x84>
    2534:	00a00034 	movhi	r2,32768
    2538:	10bfff84 	addi	r2,r2,-2
    253c:	e0fffd17 	ldw	r3,-12(fp)
    2540:	18800115 	stw	r2,4(r3)
      rc = 0;
    2544:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    2548:	00000f06 	br	2588 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    254c:	e0bffd17 	ldw	r2,-12(fp)
    2550:	10c00117 	ldw	r3,4(r2)
    2554:	00a00034 	movhi	r2,32768
    2558:	10bfffc4 	addi	r2,r2,-1
    255c:	18800c26 	beq	r3,r2,2590 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    2560:	e0bffd17 	ldw	r2,-12(fp)
    2564:	10c00917 	ldw	r3,36(r2)
    2568:	e0bffd17 	ldw	r2,-12(fp)
    256c:	10800117 	ldw	r2,4(r2)
    2570:	1885803a 	cmpltu	r2,r3,r2
    2574:	10c03fcc 	andi	r3,r2,255
    2578:	e0bfff17 	ldw	r2,-4(fp)
    257c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    2580:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    2584:	00000206 	br	2590 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    2588:	0001883a 	nop
    258c:	00000106 	br	2594 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    2590:	0001883a 	nop

  default:
    break;
  }

  return rc;
    2594:	e0bffb17 	ldw	r2,-20(fp)
}
    2598:	e037883a 	mov	sp,fp
    259c:	df000017 	ldw	fp,0(sp)
    25a0:	dec00104 	addi	sp,sp,4
    25a4:	f800283a 	ret

000025a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    25a8:	defff304 	addi	sp,sp,-52
    25ac:	dfc00c15 	stw	ra,48(sp)
    25b0:	df000b15 	stw	fp,44(sp)
    25b4:	df000b04 	addi	fp,sp,44
    25b8:	e13ffc15 	stw	r4,-16(fp)
    25bc:	e17ffd15 	stw	r5,-12(fp)
    25c0:	e1bffe15 	stw	r6,-8(fp)
    25c4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    25c8:	e0bffd17 	ldw	r2,-12(fp)
    25cc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    25d0:	00004706 	br	26f0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    25d4:	e0bffc17 	ldw	r2,-16(fp)
    25d8:	10800a17 	ldw	r2,40(r2)
    25dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    25e0:	e0bffc17 	ldw	r2,-16(fp)
    25e4:	10800b17 	ldw	r2,44(r2)
    25e8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    25ec:	e0fff717 	ldw	r3,-36(fp)
    25f0:	e0bff817 	ldw	r2,-32(fp)
    25f4:	18800536 	bltu	r3,r2,260c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    25f8:	e0fff717 	ldw	r3,-36(fp)
    25fc:	e0bff817 	ldw	r2,-32(fp)
    2600:	1885c83a 	sub	r2,r3,r2
    2604:	e0bff615 	stw	r2,-40(fp)
    2608:	00000406 	br	261c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    260c:	00c20004 	movi	r3,2048
    2610:	e0bff817 	ldw	r2,-32(fp)
    2614:	1885c83a 	sub	r2,r3,r2
    2618:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    261c:	e0bff617 	ldw	r2,-40(fp)
    2620:	10001e26 	beq	r2,zero,269c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    2624:	e0fffe17 	ldw	r3,-8(fp)
    2628:	e0bff617 	ldw	r2,-40(fp)
    262c:	1880022e 	bgeu	r3,r2,2638 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    2630:	e0bffe17 	ldw	r2,-8(fp)
    2634:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    2638:	e0bffc17 	ldw	r2,-16(fp)
    263c:	10c00e04 	addi	r3,r2,56
    2640:	e0bff817 	ldw	r2,-32(fp)
    2644:	1885883a 	add	r2,r3,r2
    2648:	e1bff617 	ldw	r6,-40(fp)
    264c:	100b883a 	mov	r5,r2
    2650:	e13ff517 	ldw	r4,-44(fp)
    2654:	0004b840 	call	4b84 <memcpy>
      ptr   += n;
    2658:	e0fff517 	ldw	r3,-44(fp)
    265c:	e0bff617 	ldw	r2,-40(fp)
    2660:	1885883a 	add	r2,r3,r2
    2664:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    2668:	e0fffe17 	ldw	r3,-8(fp)
    266c:	e0bff617 	ldw	r2,-40(fp)
    2670:	1885c83a 	sub	r2,r3,r2
    2674:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2678:	e0fff817 	ldw	r3,-32(fp)
    267c:	e0bff617 	ldw	r2,-40(fp)
    2680:	1885883a 	add	r2,r3,r2
    2684:	10c1ffcc 	andi	r3,r2,2047
    2688:	e0bffc17 	ldw	r2,-16(fp)
    268c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    2690:	e0bffe17 	ldw	r2,-8(fp)
    2694:	00bfcf16 	blt	zero,r2,25d4 <__alt_data_end+0xf80025d4>
    2698:	00000106 	br	26a0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    269c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    26a0:	e0fff517 	ldw	r3,-44(fp)
    26a4:	e0bffd17 	ldw	r2,-12(fp)
    26a8:	1880141e 	bne	r3,r2,26fc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    26ac:	e0bfff17 	ldw	r2,-4(fp)
    26b0:	1090000c 	andi	r2,r2,16384
    26b4:	1000131e 	bne	r2,zero,2704 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    26b8:	0001883a 	nop
    26bc:	e0bffc17 	ldw	r2,-16(fp)
    26c0:	10c00a17 	ldw	r3,40(r2)
    26c4:	e0bff717 	ldw	r2,-36(fp)
    26c8:	1880051e 	bne	r3,r2,26e0 <altera_avalon_jtag_uart_read+0x138>
    26cc:	e0bffc17 	ldw	r2,-16(fp)
    26d0:	10c00917 	ldw	r3,36(r2)
    26d4:	e0bffc17 	ldw	r2,-16(fp)
    26d8:	10800117 	ldw	r2,4(r2)
    26dc:	18bff736 	bltu	r3,r2,26bc <__alt_data_end+0xf80026bc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    26e0:	e0bffc17 	ldw	r2,-16(fp)
    26e4:	10c00a17 	ldw	r3,40(r2)
    26e8:	e0bff717 	ldw	r2,-36(fp)
    26ec:	18800726 	beq	r3,r2,270c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    26f0:	e0bffe17 	ldw	r2,-8(fp)
    26f4:	00bfb716 	blt	zero,r2,25d4 <__alt_data_end+0xf80025d4>
    26f8:	00000506 	br	2710 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    26fc:	0001883a 	nop
    2700:	00000306 	br	2710 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    2704:	0001883a 	nop
    2708:	00000106 	br	2710 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    270c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    2710:	e0fff517 	ldw	r3,-44(fp)
    2714:	e0bffd17 	ldw	r2,-12(fp)
    2718:	18801826 	beq	r3,r2,277c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    271c:	0005303a 	rdctl	r2,status
    2720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2724:	e0fffb17 	ldw	r3,-20(fp)
    2728:	00bfff84 	movi	r2,-2
    272c:	1884703a 	and	r2,r3,r2
    2730:	1001703a 	wrctl	status,r2
  
  return context;
    2734:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    2738:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    273c:	e0bffc17 	ldw	r2,-16(fp)
    2740:	10800817 	ldw	r2,32(r2)
    2744:	10c00054 	ori	r3,r2,1
    2748:	e0bffc17 	ldw	r2,-16(fp)
    274c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2750:	e0bffc17 	ldw	r2,-16(fp)
    2754:	10800017 	ldw	r2,0(r2)
    2758:	10800104 	addi	r2,r2,4
    275c:	1007883a 	mov	r3,r2
    2760:	e0bffc17 	ldw	r2,-16(fp)
    2764:	10800817 	ldw	r2,32(r2)
    2768:	18800035 	stwio	r2,0(r3)
    276c:	e0bffa17 	ldw	r2,-24(fp)
    2770:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2774:	e0bff917 	ldw	r2,-28(fp)
    2778:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    277c:	e0fff517 	ldw	r3,-44(fp)
    2780:	e0bffd17 	ldw	r2,-12(fp)
    2784:	18800426 	beq	r3,r2,2798 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    2788:	e0fff517 	ldw	r3,-44(fp)
    278c:	e0bffd17 	ldw	r2,-12(fp)
    2790:	1885c83a 	sub	r2,r3,r2
    2794:	00000606 	br	27b0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    2798:	e0bfff17 	ldw	r2,-4(fp)
    279c:	1090000c 	andi	r2,r2,16384
    27a0:	10000226 	beq	r2,zero,27ac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    27a4:	00bffd44 	movi	r2,-11
    27a8:	00000106 	br	27b0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    27ac:	00bffec4 	movi	r2,-5
}
    27b0:	e037883a 	mov	sp,fp
    27b4:	dfc00117 	ldw	ra,4(sp)
    27b8:	df000017 	ldw	fp,0(sp)
    27bc:	dec00204 	addi	sp,sp,8
    27c0:	f800283a 	ret

000027c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    27c4:	defff304 	addi	sp,sp,-52
    27c8:	dfc00c15 	stw	ra,48(sp)
    27cc:	df000b15 	stw	fp,44(sp)
    27d0:	df000b04 	addi	fp,sp,44
    27d4:	e13ffc15 	stw	r4,-16(fp)
    27d8:	e17ffd15 	stw	r5,-12(fp)
    27dc:	e1bffe15 	stw	r6,-8(fp)
    27e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    27e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    27e8:	e0bffd17 	ldw	r2,-12(fp)
    27ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    27f0:	00003706 	br	28d0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    27f4:	e0bffc17 	ldw	r2,-16(fp)
    27f8:	10800c17 	ldw	r2,48(r2)
    27fc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    2800:	e0bffc17 	ldw	r2,-16(fp)
    2804:	10800d17 	ldw	r2,52(r2)
    2808:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    280c:	e0fff917 	ldw	r3,-28(fp)
    2810:	e0bff517 	ldw	r2,-44(fp)
    2814:	1880062e 	bgeu	r3,r2,2830 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2818:	e0fff517 	ldw	r3,-44(fp)
    281c:	e0bff917 	ldw	r2,-28(fp)
    2820:	1885c83a 	sub	r2,r3,r2
    2824:	10bfffc4 	addi	r2,r2,-1
    2828:	e0bff615 	stw	r2,-40(fp)
    282c:	00000b06 	br	285c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    2830:	e0bff517 	ldw	r2,-44(fp)
    2834:	10000526 	beq	r2,zero,284c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2838:	00c20004 	movi	r3,2048
    283c:	e0bff917 	ldw	r2,-28(fp)
    2840:	1885c83a 	sub	r2,r3,r2
    2844:	e0bff615 	stw	r2,-40(fp)
    2848:	00000406 	br	285c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    284c:	00c1ffc4 	movi	r3,2047
    2850:	e0bff917 	ldw	r2,-28(fp)
    2854:	1885c83a 	sub	r2,r3,r2
    2858:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    285c:	e0bff617 	ldw	r2,-40(fp)
    2860:	10001e26 	beq	r2,zero,28dc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    2864:	e0fffe17 	ldw	r3,-8(fp)
    2868:	e0bff617 	ldw	r2,-40(fp)
    286c:	1880022e 	bgeu	r3,r2,2878 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    2870:	e0bffe17 	ldw	r2,-8(fp)
    2874:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    2878:	e0bffc17 	ldw	r2,-16(fp)
    287c:	10c20e04 	addi	r3,r2,2104
    2880:	e0bff917 	ldw	r2,-28(fp)
    2884:	1885883a 	add	r2,r3,r2
    2888:	e1bff617 	ldw	r6,-40(fp)
    288c:	e17ffd17 	ldw	r5,-12(fp)
    2890:	1009883a 	mov	r4,r2
    2894:	0004b840 	call	4b84 <memcpy>
      ptr   += n;
    2898:	e0fffd17 	ldw	r3,-12(fp)
    289c:	e0bff617 	ldw	r2,-40(fp)
    28a0:	1885883a 	add	r2,r3,r2
    28a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    28a8:	e0fffe17 	ldw	r3,-8(fp)
    28ac:	e0bff617 	ldw	r2,-40(fp)
    28b0:	1885c83a 	sub	r2,r3,r2
    28b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    28b8:	e0fff917 	ldw	r3,-28(fp)
    28bc:	e0bff617 	ldw	r2,-40(fp)
    28c0:	1885883a 	add	r2,r3,r2
    28c4:	10c1ffcc 	andi	r3,r2,2047
    28c8:	e0bffc17 	ldw	r2,-16(fp)
    28cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    28d0:	e0bffe17 	ldw	r2,-8(fp)
    28d4:	00bfc716 	blt	zero,r2,27f4 <__alt_data_end+0xf80027f4>
    28d8:	00000106 	br	28e0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    28dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28e0:	0005303a 	rdctl	r2,status
    28e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28e8:	e0fffb17 	ldw	r3,-20(fp)
    28ec:	00bfff84 	movi	r2,-2
    28f0:	1884703a 	and	r2,r3,r2
    28f4:	1001703a 	wrctl	status,r2
  
  return context;
    28f8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    28fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2900:	e0bffc17 	ldw	r2,-16(fp)
    2904:	10800817 	ldw	r2,32(r2)
    2908:	10c00094 	ori	r3,r2,2
    290c:	e0bffc17 	ldw	r2,-16(fp)
    2910:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2914:	e0bffc17 	ldw	r2,-16(fp)
    2918:	10800017 	ldw	r2,0(r2)
    291c:	10800104 	addi	r2,r2,4
    2920:	1007883a 	mov	r3,r2
    2924:	e0bffc17 	ldw	r2,-16(fp)
    2928:	10800817 	ldw	r2,32(r2)
    292c:	18800035 	stwio	r2,0(r3)
    2930:	e0bffa17 	ldw	r2,-24(fp)
    2934:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2938:	e0bff817 	ldw	r2,-32(fp)
    293c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2940:	e0bffe17 	ldw	r2,-8(fp)
    2944:	0080100e 	bge	zero,r2,2988 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    2948:	e0bfff17 	ldw	r2,-4(fp)
    294c:	1090000c 	andi	r2,r2,16384
    2950:	1000101e 	bne	r2,zero,2994 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2954:	0001883a 	nop
    2958:	e0bffc17 	ldw	r2,-16(fp)
    295c:	10c00d17 	ldw	r3,52(r2)
    2960:	e0bff517 	ldw	r2,-44(fp)
    2964:	1880051e 	bne	r3,r2,297c <altera_avalon_jtag_uart_write+0x1b8>
    2968:	e0bffc17 	ldw	r2,-16(fp)
    296c:	10c00917 	ldw	r3,36(r2)
    2970:	e0bffc17 	ldw	r2,-16(fp)
    2974:	10800117 	ldw	r2,4(r2)
    2978:	18bff736 	bltu	r3,r2,2958 <__alt_data_end+0xf8002958>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    297c:	e0bffc17 	ldw	r2,-16(fp)
    2980:	10800917 	ldw	r2,36(r2)
    2984:	1000051e 	bne	r2,zero,299c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    2988:	e0bffe17 	ldw	r2,-8(fp)
    298c:	00bfd016 	blt	zero,r2,28d0 <__alt_data_end+0xf80028d0>
    2990:	00000306 	br	29a0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    2994:	0001883a 	nop
    2998:	00000106 	br	29a0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    299c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    29a0:	e0fffd17 	ldw	r3,-12(fp)
    29a4:	e0bff717 	ldw	r2,-36(fp)
    29a8:	18800426 	beq	r3,r2,29bc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    29ac:	e0fffd17 	ldw	r3,-12(fp)
    29b0:	e0bff717 	ldw	r2,-36(fp)
    29b4:	1885c83a 	sub	r2,r3,r2
    29b8:	00000606 	br	29d4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    29bc:	e0bfff17 	ldw	r2,-4(fp)
    29c0:	1090000c 	andi	r2,r2,16384
    29c4:	10000226 	beq	r2,zero,29d0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    29c8:	00bffd44 	movi	r2,-11
    29cc:	00000106 	br	29d4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    29d0:	00bffec4 	movi	r2,-5
}
    29d4:	e037883a 	mov	sp,fp
    29d8:	dfc00117 	ldw	ra,4(sp)
    29dc:	df000017 	ldw	fp,0(sp)
    29e0:	dec00204 	addi	sp,sp,8
    29e4:	f800283a 	ret

000029e8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    29e8:	defffa04 	addi	sp,sp,-24
    29ec:	dfc00515 	stw	ra,20(sp)
    29f0:	df000415 	stw	fp,16(sp)
    29f4:	df000404 	addi	fp,sp,16
    29f8:	e13ffe15 	stw	r4,-8(fp)
    29fc:	2805883a 	mov	r2,r5
    2a00:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
    2a04:	e0bffe17 	ldw	r2,-8(fp)
    2a08:	10800017 	ldw	r2,0(r2)
    2a0c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    2a10:	008003f4 	movhi	r2,15
    2a14:	10909004 	addi	r2,r2,16960
    2a18:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    2a1c:	e0bffe17 	ldw	r2,-8(fp)
    2a20:	10800803 	ldbu	r2,32(r2)
    2a24:	10803fcc 	andi	r2,r2,255
    2a28:	1080201c 	xori	r2,r2,128
    2a2c:	10bfe004 	addi	r2,r2,-128
    2a30:	1000151e 	bne	r2,zero,2a88 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    2a34:	00000906 	br	2a5c <lcd_write_command+0x74>
    if (--i == 0)
    2a38:	e0bffc17 	ldw	r2,-16(fp)
    2a3c:	10bfffc4 	addi	r2,r2,-1
    2a40:	e0bffc15 	stw	r2,-16(fp)
    2a44:	e0bffc17 	ldw	r2,-16(fp)
    2a48:	1000041e 	bne	r2,zero,2a5c <lcd_write_command+0x74>
    {
      sp->broken = 1;
    2a4c:	e0bffe17 	ldw	r2,-8(fp)
    2a50:	00c00044 	movi	r3,1
    2a54:	10c00805 	stb	r3,32(r2)
      return;
    2a58:	00000c06 	br	2a8c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    2a5c:	e0bffd17 	ldw	r2,-12(fp)
    2a60:	10800104 	addi	r2,r2,4
    2a64:	10800037 	ldwio	r2,0(r2)
    2a68:	1080200c 	andi	r2,r2,128
    2a6c:	103ff21e 	bne	r2,zero,2a38 <__alt_data_end+0xf8002a38>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    2a70:	01001904 	movi	r4,100
    2a74:	0001e680 	call	1e68 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    2a78:	e0bffd17 	ldw	r2,-12(fp)
    2a7c:	e0ffff03 	ldbu	r3,-4(fp)
    2a80:	10c00035 	stwio	r3,0(r2)
    2a84:	00000106 	br	2a8c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
    2a88:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
    2a8c:	e037883a 	mov	sp,fp
    2a90:	dfc00117 	ldw	ra,4(sp)
    2a94:	df000017 	ldw	fp,0(sp)
    2a98:	dec00204 	addi	sp,sp,8
    2a9c:	f800283a 	ret

00002aa0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    2aa0:	defffa04 	addi	sp,sp,-24
    2aa4:	dfc00515 	stw	ra,20(sp)
    2aa8:	df000415 	stw	fp,16(sp)
    2aac:	df000404 	addi	fp,sp,16
    2ab0:	e13ffe15 	stw	r4,-8(fp)
    2ab4:	2805883a 	mov	r2,r5
    2ab8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
    2abc:	e0bffe17 	ldw	r2,-8(fp)
    2ac0:	10800017 	ldw	r2,0(r2)
    2ac4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    2ac8:	008003f4 	movhi	r2,15
    2acc:	10909004 	addi	r2,r2,16960
    2ad0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    2ad4:	e0bffe17 	ldw	r2,-8(fp)
    2ad8:	10800803 	ldbu	r2,32(r2)
    2adc:	10803fcc 	andi	r2,r2,255
    2ae0:	1080201c 	xori	r2,r2,128
    2ae4:	10bfe004 	addi	r2,r2,-128
    2ae8:	10001d1e 	bne	r2,zero,2b60 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    2aec:	00000906 	br	2b14 <lcd_write_data+0x74>
    if (--i == 0)
    2af0:	e0bffc17 	ldw	r2,-16(fp)
    2af4:	10bfffc4 	addi	r2,r2,-1
    2af8:	e0bffc15 	stw	r2,-16(fp)
    2afc:	e0bffc17 	ldw	r2,-16(fp)
    2b00:	1000041e 	bne	r2,zero,2b14 <lcd_write_data+0x74>
    {
      sp->broken = 1;
    2b04:	e0bffe17 	ldw	r2,-8(fp)
    2b08:	00c00044 	movi	r3,1
    2b0c:	10c00805 	stb	r3,32(r2)
      return;
    2b10:	00001406 	br	2b64 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    2b14:	e0bffd17 	ldw	r2,-12(fp)
    2b18:	10800104 	addi	r2,r2,4
    2b1c:	10800037 	ldwio	r2,0(r2)
    2b20:	1080200c 	andi	r2,r2,128
    2b24:	103ff21e 	bne	r2,zero,2af0 <__alt_data_end+0xf8002af0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    2b28:	01001904 	movi	r4,100
    2b2c:	0001e680 	call	1e68 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    2b30:	e0bffd17 	ldw	r2,-12(fp)
    2b34:	10800204 	addi	r2,r2,8
    2b38:	1007883a 	mov	r3,r2
    2b3c:	e0bfff03 	ldbu	r2,-4(fp)
    2b40:	18800035 	stwio	r2,0(r3)

  sp->address++;
    2b44:	e0bffe17 	ldw	r2,-8(fp)
    2b48:	108008c3 	ldbu	r2,35(r2)
    2b4c:	10800044 	addi	r2,r2,1
    2b50:	1007883a 	mov	r3,r2
    2b54:	e0bffe17 	ldw	r2,-8(fp)
    2b58:	10c008c5 	stb	r3,35(r2)
    2b5c:	00000106 	br	2b64 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
    2b60:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
    2b64:	e037883a 	mov	sp,fp
    2b68:	dfc00117 	ldw	ra,4(sp)
    2b6c:	df000017 	ldw	fp,0(sp)
    2b70:	dec00204 	addi	sp,sp,8
    2b74:	f800283a 	ret

00002b78 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    2b78:	defffc04 	addi	sp,sp,-16
    2b7c:	dfc00315 	stw	ra,12(sp)
    2b80:	df000215 	stw	fp,8(sp)
    2b84:	df000204 	addi	fp,sp,8
    2b88:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    2b8c:	01400044 	movi	r5,1
    2b90:	e13fff17 	ldw	r4,-4(fp)
    2b94:	00029e80 	call	29e8 <lcd_write_command>

  sp->x = 0;
    2b98:	e0bfff17 	ldw	r2,-4(fp)
    2b9c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    2ba0:	e0bfff17 	ldw	r2,-4(fp)
    2ba4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    2ba8:	e0bfff17 	ldw	r2,-4(fp)
    2bac:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    2bb0:	e03ffe15 	stw	zero,-8(fp)
    2bb4:	00001b06 	br	2c24 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    2bb8:	e0bffe17 	ldw	r2,-8(fp)
    2bbc:	108018e4 	muli	r2,r2,99
    2bc0:	10801004 	addi	r2,r2,64
    2bc4:	e0ffff17 	ldw	r3,-4(fp)
    2bc8:	1885883a 	add	r2,r3,r2
    2bcc:	01801444 	movi	r6,81
    2bd0:	01400804 	movi	r5,32
    2bd4:	1009883a 	mov	r4,r2
    2bd8:	0004ccc0 	call	4ccc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    2bdc:	e0bffe17 	ldw	r2,-8(fp)
    2be0:	108018e4 	muli	r2,r2,99
    2be4:	10800c04 	addi	r2,r2,48
    2be8:	e0ffff17 	ldw	r3,-4(fp)
    2bec:	1885883a 	add	r2,r3,r2
    2bf0:	01800404 	movi	r6,16
    2bf4:	01400804 	movi	r5,32
    2bf8:	1009883a 	mov	r4,r2
    2bfc:	0004ccc0 	call	4ccc <memset>
    sp->line[y].width = 0;
    2c00:	e0ffff17 	ldw	r3,-4(fp)
    2c04:	e0bffe17 	ldw	r2,-8(fp)
    2c08:	108018e4 	muli	r2,r2,99
    2c0c:	1885883a 	add	r2,r3,r2
    2c10:	10802444 	addi	r2,r2,145
    2c14:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    2c18:	e0bffe17 	ldw	r2,-8(fp)
    2c1c:	10800044 	addi	r2,r2,1
    2c20:	e0bffe15 	stw	r2,-8(fp)
    2c24:	e0bffe17 	ldw	r2,-8(fp)
    2c28:	10800090 	cmplti	r2,r2,2
    2c2c:	103fe21e 	bne	r2,zero,2bb8 <__alt_data_end+0xf8002bb8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    2c30:	0001883a 	nop
    2c34:	e037883a 	mov	sp,fp
    2c38:	dfc00117 	ldw	ra,4(sp)
    2c3c:	df000017 	ldw	fp,0(sp)
    2c40:	dec00204 	addi	sp,sp,8
    2c44:	f800283a 	ret

00002c48 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    2c48:	defff704 	addi	sp,sp,-36
    2c4c:	dfc00815 	stw	ra,32(sp)
    2c50:	df000715 	stw	fp,28(sp)
    2c54:	df000704 	addi	fp,sp,28
    2c58:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    2c5c:	e0bfff17 	ldw	r2,-4(fp)
    2c60:	10800943 	ldbu	r2,37(r2)
    2c64:	10803fcc 	andi	r2,r2,255
    2c68:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    2c6c:	e03ff915 	stw	zero,-28(fp)
    2c70:	00006706 	br	2e10 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
    2c74:	e0ffff17 	ldw	r3,-4(fp)
    2c78:	e0bff917 	ldw	r2,-28(fp)
    2c7c:	108018e4 	muli	r2,r2,99
    2c80:	1885883a 	add	r2,r3,r2
    2c84:	10802444 	addi	r2,r2,145
    2c88:	10800003 	ldbu	r2,0(r2)
    2c8c:	10803fcc 	andi	r2,r2,255
    2c90:	1080201c 	xori	r2,r2,128
    2c94:	10bfe004 	addi	r2,r2,-128
    2c98:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    2c9c:	e0ffff17 	ldw	r3,-4(fp)
    2ca0:	e0bff917 	ldw	r2,-28(fp)
    2ca4:	108018e4 	muli	r2,r2,99
    2ca8:	1885883a 	add	r2,r3,r2
    2cac:	10802484 	addi	r2,r2,146
    2cb0:	10800003 	ldbu	r2,0(r2)
    2cb4:	10c03fcc 	andi	r3,r2,255
    2cb8:	e0bffc17 	ldw	r2,-16(fp)
    2cbc:	1885383a 	mul	r2,r3,r2
    2cc0:	1005d23a 	srai	r2,r2,8
    2cc4:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
    2cc8:	e0fffb17 	ldw	r3,-20(fp)
    2ccc:	e0bffd17 	ldw	r2,-12(fp)
    2cd0:	18800116 	blt	r3,r2,2cd8 <lcd_repaint_screen+0x90>
      offset = 0;
    2cd4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    2cd8:	e03ffa15 	stw	zero,-24(fp)
    2cdc:	00004606 	br	2df8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
    2ce0:	e0fffa17 	ldw	r3,-24(fp)
    2ce4:	e0bffb17 	ldw	r2,-20(fp)
    2ce8:	1885883a 	add	r2,r3,r2
    2cec:	e17ffd17 	ldw	r5,-12(fp)
    2cf0:	1009883a 	mov	r4,r2
    2cf4:	0001b380 	call	1b38 <__modsi3>
    2cf8:	1009883a 	mov	r4,r2
    2cfc:	e0ffff17 	ldw	r3,-4(fp)
    2d00:	e0bff917 	ldw	r2,-28(fp)
    2d04:	108018e4 	muli	r2,r2,99
    2d08:	1885883a 	add	r2,r3,r2
    2d0c:	1105883a 	add	r2,r2,r4
    2d10:	10801004 	addi	r2,r2,64
    2d14:	10800003 	ldbu	r2,0(r2)
    2d18:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    2d1c:	e0ffff17 	ldw	r3,-4(fp)
    2d20:	e0bff917 	ldw	r2,-28(fp)
    2d24:	108018e4 	muli	r2,r2,99
    2d28:	1887883a 	add	r3,r3,r2
    2d2c:	e0bffa17 	ldw	r2,-24(fp)
    2d30:	1885883a 	add	r2,r3,r2
    2d34:	10800c04 	addi	r2,r2,48
    2d38:	10800003 	ldbu	r2,0(r2)
    2d3c:	10c03fcc 	andi	r3,r2,255
    2d40:	18c0201c 	xori	r3,r3,128
    2d44:	18ffe004 	addi	r3,r3,-128
    2d48:	e0bffe07 	ldb	r2,-8(fp)
    2d4c:	18802726 	beq	r3,r2,2dec <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
    2d50:	e0fff917 	ldw	r3,-28(fp)
    2d54:	d0a00004 	addi	r2,gp,-32768
    2d58:	1885883a 	add	r2,r3,r2
    2d5c:	10800003 	ldbu	r2,0(r2)
    2d60:	1007883a 	mov	r3,r2
    2d64:	e0bffa17 	ldw	r2,-24(fp)
    2d68:	1885883a 	add	r2,r3,r2
    2d6c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
    2d70:	e0fffe43 	ldbu	r3,-7(fp)
    2d74:	e0bfff17 	ldw	r2,-4(fp)
    2d78:	108008c3 	ldbu	r2,35(r2)
    2d7c:	10803fcc 	andi	r2,r2,255
    2d80:	1080201c 	xori	r2,r2,128
    2d84:	10bfe004 	addi	r2,r2,-128
    2d88:	18800a26 	beq	r3,r2,2db4 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    2d8c:	e0fffe43 	ldbu	r3,-7(fp)
    2d90:	00bfe004 	movi	r2,-128
    2d94:	1884b03a 	or	r2,r3,r2
    2d98:	10803fcc 	andi	r2,r2,255
    2d9c:	100b883a 	mov	r5,r2
    2da0:	e13fff17 	ldw	r4,-4(fp)
    2da4:	00029e80 	call	29e8 <lcd_write_command>
          sp->address = address;
    2da8:	e0fffe43 	ldbu	r3,-7(fp)
    2dac:	e0bfff17 	ldw	r2,-4(fp)
    2db0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
    2db4:	e0bffe03 	ldbu	r2,-8(fp)
    2db8:	10803fcc 	andi	r2,r2,255
    2dbc:	100b883a 	mov	r5,r2
    2dc0:	e13fff17 	ldw	r4,-4(fp)
    2dc4:	0002aa00 	call	2aa0 <lcd_write_data>
        sp->line[y].visible[x] = c;
    2dc8:	e0ffff17 	ldw	r3,-4(fp)
    2dcc:	e0bff917 	ldw	r2,-28(fp)
    2dd0:	108018e4 	muli	r2,r2,99
    2dd4:	1887883a 	add	r3,r3,r2
    2dd8:	e0bffa17 	ldw	r2,-24(fp)
    2ddc:	1885883a 	add	r2,r3,r2
    2de0:	10800c04 	addi	r2,r2,48
    2de4:	e0fffe03 	ldbu	r3,-8(fp)
    2de8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    2dec:	e0bffa17 	ldw	r2,-24(fp)
    2df0:	10800044 	addi	r2,r2,1
    2df4:	e0bffa15 	stw	r2,-24(fp)
    2df8:	e0bffa17 	ldw	r2,-24(fp)
    2dfc:	10800410 	cmplti	r2,r2,16
    2e00:	103fb71e 	bne	r2,zero,2ce0 <__alt_data_end+0xf8002ce0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    2e04:	e0bff917 	ldw	r2,-28(fp)
    2e08:	10800044 	addi	r2,r2,1
    2e0c:	e0bff915 	stw	r2,-28(fp)
    2e10:	e0bff917 	ldw	r2,-28(fp)
    2e14:	10800090 	cmplti	r2,r2,2
    2e18:	103f961e 	bne	r2,zero,2c74 <__alt_data_end+0xf8002c74>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    2e1c:	0001883a 	nop
    2e20:	e037883a 	mov	sp,fp
    2e24:	dfc00117 	ldw	ra,4(sp)
    2e28:	df000017 	ldw	fp,0(sp)
    2e2c:	dec00204 	addi	sp,sp,8
    2e30:	f800283a 	ret

00002e34 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    2e34:	defffc04 	addi	sp,sp,-16
    2e38:	dfc00315 	stw	ra,12(sp)
    2e3c:	df000215 	stw	fp,8(sp)
    2e40:	df000204 	addi	fp,sp,8
    2e44:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    2e48:	e03ffe15 	stw	zero,-8(fp)
    2e4c:	00001d06 	br	2ec4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
    2e50:	e0bffe17 	ldw	r2,-8(fp)
    2e54:	00800f16 	blt	zero,r2,2e94 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    2e58:	e0bffe17 	ldw	r2,-8(fp)
    2e5c:	108018e4 	muli	r2,r2,99
    2e60:	10801004 	addi	r2,r2,64
    2e64:	e0ffff17 	ldw	r3,-4(fp)
    2e68:	1889883a 	add	r4,r3,r2
    2e6c:	e0bffe17 	ldw	r2,-8(fp)
    2e70:	10800044 	addi	r2,r2,1
    2e74:	108018e4 	muli	r2,r2,99
    2e78:	10801004 	addi	r2,r2,64
    2e7c:	e0ffff17 	ldw	r3,-4(fp)
    2e80:	1885883a 	add	r2,r3,r2
    2e84:	01801404 	movi	r6,80
    2e88:	100b883a 	mov	r5,r2
    2e8c:	0004b840 	call	4b84 <memcpy>
    2e90:	00000906 	br	2eb8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    2e94:	e0bffe17 	ldw	r2,-8(fp)
    2e98:	108018e4 	muli	r2,r2,99
    2e9c:	10801004 	addi	r2,r2,64
    2ea0:	e0ffff17 	ldw	r3,-4(fp)
    2ea4:	1885883a 	add	r2,r3,r2
    2ea8:	01801404 	movi	r6,80
    2eac:	01400804 	movi	r5,32
    2eb0:	1009883a 	mov	r4,r2
    2eb4:	0004ccc0 	call	4ccc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    2eb8:	e0bffe17 	ldw	r2,-8(fp)
    2ebc:	10800044 	addi	r2,r2,1
    2ec0:	e0bffe15 	stw	r2,-8(fp)
    2ec4:	e0bffe17 	ldw	r2,-8(fp)
    2ec8:	10800090 	cmplti	r2,r2,2
    2ecc:	103fe01e 	bne	r2,zero,2e50 <__alt_data_end+0xf8002e50>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    2ed0:	e0bfff17 	ldw	r2,-4(fp)
    2ed4:	10800883 	ldbu	r2,34(r2)
    2ed8:	10bfffc4 	addi	r2,r2,-1
    2edc:	1007883a 	mov	r3,r2
    2ee0:	e0bfff17 	ldw	r2,-4(fp)
    2ee4:	10c00885 	stb	r3,34(r2)
}
    2ee8:	0001883a 	nop
    2eec:	e037883a 	mov	sp,fp
    2ef0:	dfc00117 	ldw	ra,4(sp)
    2ef4:	df000017 	ldw	fp,0(sp)
    2ef8:	dec00204 	addi	sp,sp,8
    2efc:	f800283a 	ret

00002f00 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
    2f00:	defff904 	addi	sp,sp,-28
    2f04:	dfc00615 	stw	ra,24(sp)
    2f08:	df000515 	stw	fp,20(sp)
    2f0c:	df000504 	addi	fp,sp,20
    2f10:	e13ffe15 	stw	r4,-8(fp)
    2f14:	2805883a 	mov	r2,r5
    2f18:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
    2f1c:	e03ffb15 	stw	zero,-20(fp)
    2f20:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
    2f24:	e0bffe17 	ldw	r2,-8(fp)
    2f28:	10800a03 	ldbu	r2,40(r2)
    2f2c:	10803fcc 	andi	r2,r2,255
    2f30:	1080201c 	xori	r2,r2,128
    2f34:	10bfe004 	addi	r2,r2,-128
    2f38:	108016d8 	cmpnei	r2,r2,91
    2f3c:	1000411e 	bne	r2,zero,3044 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
    2f40:	e0bffe17 	ldw	r2,-8(fp)
    2f44:	10800a04 	addi	r2,r2,40
    2f48:	10800044 	addi	r2,r2,1
    2f4c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
    2f50:	00000c06 	br	2f84 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    2f54:	e0bffb17 	ldw	r2,-20(fp)
    2f58:	10c002a4 	muli	r3,r2,10
    2f5c:	e0bffd17 	ldw	r2,-12(fp)
    2f60:	11000044 	addi	r4,r2,1
    2f64:	e13ffd15 	stw	r4,-12(fp)
    2f68:	10800003 	ldbu	r2,0(r2)
    2f6c:	10803fcc 	andi	r2,r2,255
    2f70:	1080201c 	xori	r2,r2,128
    2f74:	10bfe004 	addi	r2,r2,-128
    2f78:	10bff404 	addi	r2,r2,-48
    2f7c:	1885883a 	add	r2,r3,r2
    2f80:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    2f84:	d0e00a17 	ldw	r3,-32728(gp)
    2f88:	e0bffd17 	ldw	r2,-12(fp)
    2f8c:	10800003 	ldbu	r2,0(r2)
    2f90:	10803fcc 	andi	r2,r2,255
    2f94:	1080201c 	xori	r2,r2,128
    2f98:	10bfe004 	addi	r2,r2,-128
    2f9c:	10800044 	addi	r2,r2,1
    2fa0:	1885883a 	add	r2,r3,r2
    2fa4:	10800003 	ldbu	r2,0(r2)
    2fa8:	10803fcc 	andi	r2,r2,255
    2fac:	1080010c 	andi	r2,r2,4
    2fb0:	103fe81e 	bne	r2,zero,2f54 <__alt_data_end+0xf8002f54>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    2fb4:	e0bffd17 	ldw	r2,-12(fp)
    2fb8:	10800003 	ldbu	r2,0(r2)
    2fbc:	10803fcc 	andi	r2,r2,255
    2fc0:	1080201c 	xori	r2,r2,128
    2fc4:	10bfe004 	addi	r2,r2,-128
    2fc8:	10800ed8 	cmpnei	r2,r2,59
    2fcc:	10001f1e 	bne	r2,zero,304c <lcd_handle_escape+0x14c>
    {
      ptr++;
    2fd0:	e0bffd17 	ldw	r2,-12(fp)
    2fd4:	10800044 	addi	r2,r2,1
    2fd8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
    2fdc:	00000c06 	br	3010 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    2fe0:	e0bffc17 	ldw	r2,-16(fp)
    2fe4:	10c002a4 	muli	r3,r2,10
    2fe8:	e0bffd17 	ldw	r2,-12(fp)
    2fec:	11000044 	addi	r4,r2,1
    2ff0:	e13ffd15 	stw	r4,-12(fp)
    2ff4:	10800003 	ldbu	r2,0(r2)
    2ff8:	10803fcc 	andi	r2,r2,255
    2ffc:	1080201c 	xori	r2,r2,128
    3000:	10bfe004 	addi	r2,r2,-128
    3004:	10bff404 	addi	r2,r2,-48
    3008:	1885883a 	add	r2,r3,r2
    300c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    3010:	d0e00a17 	ldw	r3,-32728(gp)
    3014:	e0bffd17 	ldw	r2,-12(fp)
    3018:	10800003 	ldbu	r2,0(r2)
    301c:	10803fcc 	andi	r2,r2,255
    3020:	1080201c 	xori	r2,r2,128
    3024:	10bfe004 	addi	r2,r2,-128
    3028:	10800044 	addi	r2,r2,1
    302c:	1885883a 	add	r2,r3,r2
    3030:	10800003 	ldbu	r2,0(r2)
    3034:	10803fcc 	andi	r2,r2,255
    3038:	1080010c 	andi	r2,r2,4
    303c:	103fe81e 	bne	r2,zero,2fe0 <__alt_data_end+0xf8002fe0>
    3040:	00000206 	br	304c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
    3044:	00bfffc4 	movi	r2,-1
    3048:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
    304c:	e0bfff07 	ldb	r2,-4(fp)
    3050:	10c012a0 	cmpeqi	r3,r2,74
    3054:	1800291e 	bne	r3,zero,30fc <lcd_handle_escape+0x1fc>
    3058:	10c012c8 	cmpgei	r3,r2,75
    305c:	1800031e 	bne	r3,zero,306c <lcd_handle_escape+0x16c>
    3060:	10801220 	cmpeqi	r2,r2,72
    3064:	1000061e 	bne	r2,zero,3080 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
    3068:	00004a06 	br	3194 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
    306c:	10c012e0 	cmpeqi	r3,r2,75
    3070:	1800281e 	bne	r3,zero,3114 <lcd_handle_escape+0x214>
    3074:	108019a0 	cmpeqi	r2,r2,102
    3078:	1000011e 	bne	r2,zero,3080 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
    307c:	00004506 	br	3194 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    3080:	e0bffc17 	ldw	r2,-16(fp)
    3084:	0080050e 	bge	zero,r2,309c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
    3088:	e0bffc17 	ldw	r2,-16(fp)
    308c:	10bfffc4 	addi	r2,r2,-1
    3090:	1007883a 	mov	r3,r2
    3094:	e0bffe17 	ldw	r2,-8(fp)
    3098:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
    309c:	e0bffb17 	ldw	r2,-20(fp)
    30a0:	0080370e 	bge	zero,r2,3180 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
    30a4:	e0bffb17 	ldw	r2,-20(fp)
    30a8:	10bfffc4 	addi	r2,r2,-1
    30ac:	1007883a 	mov	r3,r2
    30b0:	e0bffe17 	ldw	r2,-8(fp)
    30b4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
    30b8:	e0bffe17 	ldw	r2,-8(fp)
    30bc:	10800883 	ldbu	r2,34(r2)
    30c0:	10803fcc 	andi	r2,r2,255
    30c4:	10800170 	cmpltui	r2,r2,5
    30c8:	1000061e 	bne	r2,zero,30e4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
    30cc:	e0bffe17 	ldw	r2,-8(fp)
    30d0:	00c00104 	movi	r3,4
    30d4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
    30d8:	00000206 	br	30e4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
    30dc:	e13ffe17 	ldw	r4,-8(fp)
    30e0:	0002e340 	call	2e34 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
    30e4:	e0bffe17 	ldw	r2,-8(fp)
    30e8:	10800883 	ldbu	r2,34(r2)
    30ec:	10803fcc 	andi	r2,r2,255
    30f0:	108000e8 	cmpgeui	r2,r2,3
    30f4:	103ff91e 	bne	r2,zero,30dc <__alt_data_end+0xf80030dc>
        lcd_scroll_up(sp);
    }
    break;
    30f8:	00002106 	br	3180 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
    30fc:	e0bffb17 	ldw	r2,-20(fp)
    3100:	10800098 	cmpnei	r2,r2,2
    3104:	1000201e 	bne	r2,zero,3188 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
    3108:	e13ffe17 	ldw	r4,-8(fp)
    310c:	0002b780 	call	2b78 <lcd_clear_screen>
    break;
    3110:	00001d06 	br	3188 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
    3114:	e0bffb17 	ldw	r2,-20(fp)
    3118:	00801d16 	blt	zero,r2,3190 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    311c:	e0bffe17 	ldw	r2,-8(fp)
    3120:	10800843 	ldbu	r2,33(r2)
    3124:	10803fcc 	andi	r2,r2,255
    3128:	10801428 	cmpgeui	r2,r2,80
    312c:	1000181e 	bne	r2,zero,3190 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    3130:	e0bffe17 	ldw	r2,-8(fp)
    3134:	10800883 	ldbu	r2,34(r2)
    3138:	10803fcc 	andi	r2,r2,255
    313c:	108018e4 	muli	r2,r2,99
    3140:	10801004 	addi	r2,r2,64
    3144:	e0fffe17 	ldw	r3,-8(fp)
    3148:	1887883a 	add	r3,r3,r2
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	10800843 	ldbu	r2,33(r2)
    3154:	10803fcc 	andi	r2,r2,255
    3158:	1889883a 	add	r4,r3,r2
    315c:	e0bffe17 	ldw	r2,-8(fp)
    3160:	10800843 	ldbu	r2,33(r2)
    3164:	10803fcc 	andi	r2,r2,255
    3168:	00c01404 	movi	r3,80
    316c:	1885c83a 	sub	r2,r3,r2
    3170:	100d883a 	mov	r6,r2
    3174:	01400804 	movi	r5,32
    3178:	0004ccc0 	call	4ccc <memset>
    }
    break;
    317c:	00000406 	br	3190 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
    3180:	0001883a 	nop
    3184:	00000306 	br	3194 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
    3188:	0001883a 	nop
    318c:	00000106 	br	3194 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
    3190:	0001883a 	nop
  }
}
    3194:	0001883a 	nop
    3198:	e037883a 	mov	sp,fp
    319c:	dfc00117 	ldw	ra,4(sp)
    31a0:	df000017 	ldw	fp,0(sp)
    31a4:	dec00204 	addi	sp,sp,8
    31a8:	f800283a 	ret

000031ac <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
    31ac:	defff304 	addi	sp,sp,-52
    31b0:	dfc00c15 	stw	ra,48(sp)
    31b4:	df000b15 	stw	fp,44(sp)
    31b8:	df000b04 	addi	fp,sp,44
    31bc:	e13ffc15 	stw	r4,-16(fp)
    31c0:	e17ffd15 	stw	r5,-12(fp)
    31c4:	e1bffe15 	stw	r6,-8(fp)
    31c8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
    31cc:	e0bffe17 	ldw	r2,-8(fp)
    31d0:	e0fffd17 	ldw	r3,-12(fp)
    31d4:	1885883a 	add	r2,r3,r2
    31d8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
    31dc:	e0bffc17 	ldw	r2,-16(fp)
    31e0:	00c00044 	movi	r3,1
    31e4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
    31e8:	00009906 	br	3450 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
    31ec:	e0bffd17 	ldw	r2,-12(fp)
    31f0:	10800003 	ldbu	r2,0(r2)
    31f4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
    31f8:	e0bffc17 	ldw	r2,-16(fp)
    31fc:	10800903 	ldbu	r2,36(r2)
    3200:	10803fcc 	andi	r2,r2,255
    3204:	1080201c 	xori	r2,r2,128
    3208:	10bfe004 	addi	r2,r2,-128
    320c:	10003716 	blt	r2,zero,32ec <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
    3210:	e0bffc17 	ldw	r2,-16(fp)
    3214:	10800903 	ldbu	r2,36(r2)
    3218:	10803fcc 	andi	r2,r2,255
    321c:	1080201c 	xori	r2,r2,128
    3220:	10bfe004 	addi	r2,r2,-128
    3224:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    3228:	e0bffa17 	ldw	r2,-24(fp)
    322c:	1000031e 	bne	r2,zero,323c <altera_avalon_lcd_16207_write+0x90>
    3230:	e0bff907 	ldb	r2,-28(fp)
    3234:	108016d8 	cmpnei	r2,r2,91
    3238:	10000d1e 	bne	r2,zero,3270 <altera_avalon_lcd_16207_write+0xc4>
    323c:	e0bffa17 	ldw	r2,-24(fp)
    3240:	10001826 	beq	r2,zero,32a4 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
    3244:	d0e00a17 	ldw	r3,-32728(gp)
    3248:	e0bff907 	ldb	r2,-28(fp)
    324c:	10800044 	addi	r2,r2,1
    3250:	1885883a 	add	r2,r3,r2
    3254:	10800003 	ldbu	r2,0(r2)
    3258:	10803fcc 	andi	r2,r2,255
    325c:	1080010c 	andi	r2,r2,4
    3260:	1000101e 	bne	r2,zero,32a4 <altera_avalon_lcd_16207_write+0xf8>
    3264:	e0bff907 	ldb	r2,-28(fp)
    3268:	10800ee0 	cmpeqi	r2,r2,59
    326c:	10000d1e 	bne	r2,zero,32a4 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
    3270:	e0fffc17 	ldw	r3,-16(fp)
    3274:	e0bffa17 	ldw	r2,-24(fp)
    3278:	1885883a 	add	r2,r3,r2
    327c:	10800a04 	addi	r2,r2,40
    3280:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
    3284:	e0bff907 	ldb	r2,-28(fp)
    3288:	100b883a 	mov	r5,r2
    328c:	e13ffc17 	ldw	r4,-16(fp)
    3290:	0002f000 	call	2f00 <lcd_handle_escape>

        sp->esccount = -1;
    3294:	e0bffc17 	ldw	r2,-16(fp)
    3298:	00ffffc4 	movi	r3,-1
    329c:	10c00905 	stb	r3,36(r2)
    32a0:	00006806 	br	3444 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
    32a4:	e0bffc17 	ldw	r2,-16(fp)
    32a8:	10800903 	ldbu	r2,36(r2)
    32ac:	10803fcc 	andi	r2,r2,255
    32b0:	108001e8 	cmpgeui	r2,r2,7
    32b4:	1000631e 	bne	r2,zero,3444 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
    32b8:	e0fffc17 	ldw	r3,-16(fp)
    32bc:	e0bffa17 	ldw	r2,-24(fp)
    32c0:	1885883a 	add	r2,r3,r2
    32c4:	10800a04 	addi	r2,r2,40
    32c8:	e0fff903 	ldbu	r3,-28(fp)
    32cc:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
    32d0:	e0bffc17 	ldw	r2,-16(fp)
    32d4:	10800903 	ldbu	r2,36(r2)
    32d8:	10800044 	addi	r2,r2,1
    32dc:	1007883a 	mov	r3,r2
    32e0:	e0bffc17 	ldw	r2,-16(fp)
    32e4:	10c00905 	stb	r3,36(r2)
    32e8:	00005606 	br	3444 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
    32ec:	e0bff907 	ldb	r2,-28(fp)
    32f0:	108006d8 	cmpnei	r2,r2,27
    32f4:	1000031e 	bne	r2,zero,3304 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
    32f8:	e0bffc17 	ldw	r2,-16(fp)
    32fc:	10000905 	stb	zero,36(r2)
    3300:	00005006 	br	3444 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
    3304:	e0bff907 	ldb	r2,-28(fp)
    3308:	10800358 	cmpnei	r2,r2,13
    330c:	1000031e 	bne	r2,zero,331c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
    3310:	e0bffc17 	ldw	r2,-16(fp)
    3314:	10000845 	stb	zero,33(r2)
    3318:	00004a06 	br	3444 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
    331c:	e0bff907 	ldb	r2,-28(fp)
    3320:	10800298 	cmpnei	r2,r2,10
    3324:	1000101e 	bne	r2,zero,3368 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
    3328:	e0bffc17 	ldw	r2,-16(fp)
    332c:	10000845 	stb	zero,33(r2)
      sp->y++;
    3330:	e0bffc17 	ldw	r2,-16(fp)
    3334:	10800883 	ldbu	r2,34(r2)
    3338:	10800044 	addi	r2,r2,1
    333c:	1007883a 	mov	r3,r2
    3340:	e0bffc17 	ldw	r2,-16(fp)
    3344:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
    3348:	e0bffc17 	ldw	r2,-16(fp)
    334c:	10800883 	ldbu	r2,34(r2)
    3350:	10803fcc 	andi	r2,r2,255
    3354:	108000f0 	cmpltui	r2,r2,3
    3358:	10003a1e 	bne	r2,zero,3444 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
    335c:	e13ffc17 	ldw	r4,-16(fp)
    3360:	0002e340 	call	2e34 <lcd_scroll_up>
    3364:	00003706 	br	3444 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
    3368:	e0bff907 	ldb	r2,-28(fp)
    336c:	10800218 	cmpnei	r2,r2,8
    3370:	10000b1e 	bne	r2,zero,33a0 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
    3374:	e0bffc17 	ldw	r2,-16(fp)
    3378:	10800843 	ldbu	r2,33(r2)
    337c:	10803fcc 	andi	r2,r2,255
    3380:	10003026 	beq	r2,zero,3444 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
    3384:	e0bffc17 	ldw	r2,-16(fp)
    3388:	10800843 	ldbu	r2,33(r2)
    338c:	10bfffc4 	addi	r2,r2,-1
    3390:	1007883a 	mov	r3,r2
    3394:	e0bffc17 	ldw	r2,-16(fp)
    3398:	10c00845 	stb	r3,33(r2)
    339c:	00002906 	br	3444 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
    33a0:	d0e00a17 	ldw	r3,-32728(gp)
    33a4:	e0bff907 	ldb	r2,-28(fp)
    33a8:	10800044 	addi	r2,r2,1
    33ac:	1885883a 	add	r2,r3,r2
    33b0:	10800003 	ldbu	r2,0(r2)
    33b4:	10803fcc 	andi	r2,r2,255
    33b8:	1080201c 	xori	r2,r2,128
    33bc:	10bfe004 	addi	r2,r2,-128
    33c0:	108025cc 	andi	r2,r2,151
    33c4:	10001f26 	beq	r2,zero,3444 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
    33c8:	e0bffc17 	ldw	r2,-16(fp)
    33cc:	10800883 	ldbu	r2,34(r2)
    33d0:	10803fcc 	andi	r2,r2,255
    33d4:	108000b0 	cmpltui	r2,r2,2
    33d8:	1000021e 	bne	r2,zero,33e4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
    33dc:	e13ffc17 	ldw	r4,-16(fp)
    33e0:	0002e340 	call	2e34 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    33e4:	e0bffc17 	ldw	r2,-16(fp)
    33e8:	10800843 	ldbu	r2,33(r2)
    33ec:	10803fcc 	andi	r2,r2,255
    33f0:	10801428 	cmpgeui	r2,r2,80
    33f4:	10000d1e 	bne	r2,zero,342c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
    33f8:	e0bffc17 	ldw	r2,-16(fp)
    33fc:	10800883 	ldbu	r2,34(r2)
    3400:	10c03fcc 	andi	r3,r2,255
    3404:	e0bffc17 	ldw	r2,-16(fp)
    3408:	10800843 	ldbu	r2,33(r2)
    340c:	10803fcc 	andi	r2,r2,255
    3410:	e13ffc17 	ldw	r4,-16(fp)
    3414:	18c018e4 	muli	r3,r3,99
    3418:	20c7883a 	add	r3,r4,r3
    341c:	1885883a 	add	r2,r3,r2
    3420:	10801004 	addi	r2,r2,64
    3424:	e0fff903 	ldbu	r3,-28(fp)
    3428:	10c00005 	stb	r3,0(r2)

      sp->x++;
    342c:	e0bffc17 	ldw	r2,-16(fp)
    3430:	10800843 	ldbu	r2,33(r2)
    3434:	10800044 	addi	r2,r2,1
    3438:	1007883a 	mov	r3,r2
    343c:	e0bffc17 	ldw	r2,-16(fp)
    3440:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
    3444:	e0bffd17 	ldw	r2,-12(fp)
    3448:	10800044 	addi	r2,r2,1
    344c:	e0bffd15 	stw	r2,-12(fp)
    3450:	e0fffd17 	ldw	r3,-12(fp)
    3454:	e0bff817 	ldw	r2,-32(fp)
    3458:	18bf6436 	bltu	r3,r2,31ec <__alt_data_end+0xf80031ec>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
    345c:	00800404 	movi	r2,16
    3460:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    3464:	e03ff515 	stw	zero,-44(fp)
    3468:	00003706 	br	3548 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    346c:	00801404 	movi	r2,80
    3470:	e0bff715 	stw	r2,-36(fp)
    3474:	00001106 	br	34bc <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
    3478:	e0bff717 	ldw	r2,-36(fp)
    347c:	10bfffc4 	addi	r2,r2,-1
    3480:	e13ffc17 	ldw	r4,-16(fp)
    3484:	e0fff517 	ldw	r3,-44(fp)
    3488:	18c018e4 	muli	r3,r3,99
    348c:	20c7883a 	add	r3,r4,r3
    3490:	1885883a 	add	r2,r3,r2
    3494:	10801004 	addi	r2,r2,64
    3498:	10800003 	ldbu	r2,0(r2)
    349c:	10803fcc 	andi	r2,r2,255
    34a0:	1080201c 	xori	r2,r2,128
    34a4:	10bfe004 	addi	r2,r2,-128
    34a8:	10800820 	cmpeqi	r2,r2,32
    34ac:	10000626 	beq	r2,zero,34c8 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    34b0:	e0bff717 	ldw	r2,-36(fp)
    34b4:	10bfffc4 	addi	r2,r2,-1
    34b8:	e0bff715 	stw	r2,-36(fp)
    34bc:	e0bff717 	ldw	r2,-36(fp)
    34c0:	00bfed16 	blt	zero,r2,3478 <__alt_data_end+0xf8003478>
    34c4:	00000106 	br	34cc <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
    34c8:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
    34cc:	e0bff717 	ldw	r2,-36(fp)
    34d0:	10800448 	cmpgei	r2,r2,17
    34d4:	1000031e 	bne	r2,zero,34e4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
    34d8:	00800404 	movi	r2,16
    34dc:	e0bff715 	stw	r2,-36(fp)
    34e0:	00000306 	br	34f0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
    34e4:	e0bff717 	ldw	r2,-36(fp)
    34e8:	10800044 	addi	r2,r2,1
    34ec:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
    34f0:	e0bff717 	ldw	r2,-36(fp)
    34f4:	1009883a 	mov	r4,r2
    34f8:	e0fffc17 	ldw	r3,-16(fp)
    34fc:	e0bff517 	ldw	r2,-44(fp)
    3500:	108018e4 	muli	r2,r2,99
    3504:	1885883a 	add	r2,r3,r2
    3508:	10802444 	addi	r2,r2,145
    350c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
    3510:	e0fff617 	ldw	r3,-40(fp)
    3514:	e0bff717 	ldw	r2,-36(fp)
    3518:	1880020e 	bge	r3,r2,3524 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
    351c:	e0bff717 	ldw	r2,-36(fp)
    3520:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
    3524:	e0fffc17 	ldw	r3,-16(fp)
    3528:	e0bff517 	ldw	r2,-44(fp)
    352c:	108018e4 	muli	r2,r2,99
    3530:	1885883a 	add	r2,r3,r2
    3534:	10802484 	addi	r2,r2,146
    3538:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    353c:	e0bff517 	ldw	r2,-44(fp)
    3540:	10800044 	addi	r2,r2,1
    3544:	e0bff515 	stw	r2,-44(fp)
    3548:	e0bff517 	ldw	r2,-44(fp)
    354c:	10800090 	cmplti	r2,r2,2
    3550:	103fc61e 	bne	r2,zero,346c <__alt_data_end+0xf800346c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
    3554:	e0bff617 	ldw	r2,-40(fp)
    3558:	10800448 	cmpgei	r2,r2,17
    355c:	1000031e 	bne	r2,zero,356c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
    3560:	e0bffc17 	ldw	r2,-16(fp)
    3564:	10000985 	stb	zero,38(r2)
    3568:	00002e06 	br	3624 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
    356c:	e0bff617 	ldw	r2,-40(fp)
    3570:	1085883a 	add	r2,r2,r2
    3574:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
    3578:	e0bff617 	ldw	r2,-40(fp)
    357c:	1007883a 	mov	r3,r2
    3580:	e0bffc17 	ldw	r2,-16(fp)
    3584:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    3588:	e03ff515 	stw	zero,-44(fp)
    358c:	00002206 	br	3618 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
    3590:	e0fffc17 	ldw	r3,-16(fp)
    3594:	e0bff517 	ldw	r2,-44(fp)
    3598:	108018e4 	muli	r2,r2,99
    359c:	1885883a 	add	r2,r3,r2
    35a0:	10802444 	addi	r2,r2,145
    35a4:	10800003 	ldbu	r2,0(r2)
    35a8:	10803fcc 	andi	r2,r2,255
    35ac:	1080201c 	xori	r2,r2,128
    35b0:	10bfe004 	addi	r2,r2,-128
    35b4:	10800450 	cmplti	r2,r2,17
    35b8:	1000141e 	bne	r2,zero,360c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    35bc:	e0fffc17 	ldw	r3,-16(fp)
    35c0:	e0bff517 	ldw	r2,-44(fp)
    35c4:	108018e4 	muli	r2,r2,99
    35c8:	1885883a 	add	r2,r3,r2
    35cc:	10802444 	addi	r2,r2,145
    35d0:	10800003 	ldbu	r2,0(r2)
    35d4:	10803fcc 	andi	r2,r2,255
    35d8:	1080201c 	xori	r2,r2,128
    35dc:	10bfe004 	addi	r2,r2,-128
    35e0:	1004923a 	slli	r2,r2,8
    35e4:	e17ff617 	ldw	r5,-40(fp)
    35e8:	1009883a 	mov	r4,r2
    35ec:	0001ab40 	call	1ab4 <__divsi3>
    35f0:	1009883a 	mov	r4,r2
    35f4:	e0fffc17 	ldw	r3,-16(fp)
    35f8:	e0bff517 	ldw	r2,-44(fp)
    35fc:	108018e4 	muli	r2,r2,99
    3600:	1885883a 	add	r2,r3,r2
    3604:	10802484 	addi	r2,r2,146
    3608:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    360c:	e0bff517 	ldw	r2,-44(fp)
    3610:	10800044 	addi	r2,r2,1
    3614:	e0bff515 	stw	r2,-44(fp)
    3618:	e0bff517 	ldw	r2,-44(fp)
    361c:	10800090 	cmplti	r2,r2,2
    3620:	103fdb1e 	bne	r2,zero,3590 <__alt_data_end+0xf8003590>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	10800943 	ldbu	r2,37(r2)
    362c:	10803fcc 	andi	r2,r2,255
    3630:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
    3634:	e13ffc17 	ldw	r4,-16(fp)
    3638:	0002c480 	call	2c48 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
    363c:	e0bffc17 	ldw	r2,-16(fp)
    3640:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
    3644:	e0bffc17 	ldw	r2,-16(fp)
    3648:	10800943 	ldbu	r2,37(r2)
    364c:	10c03fcc 	andi	r3,r2,255
    3650:	e0bffb17 	ldw	r2,-20(fp)
    3654:	18800426 	beq	r3,r2,3668 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
    3658:	e0bffc17 	ldw	r2,-16(fp)
    365c:	00c00044 	movi	r3,1
    3660:	10c009c5 	stb	r3,39(r2)
  }
    3664:	003fef06 	br	3624 <__alt_data_end+0xf8003624>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
    3668:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
    366c:	e0bffe17 	ldw	r2,-8(fp)
}
    3670:	e037883a 	mov	sp,fp
    3674:	dfc00117 	ldw	ra,4(sp)
    3678:	df000017 	ldw	fp,0(sp)
    367c:	dec00204 	addi	sp,sp,8
    3680:	f800283a 	ret

00003684 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
    3684:	defffc04 	addi	sp,sp,-16
    3688:	dfc00315 	stw	ra,12(sp)
    368c:	df000215 	stw	fp,8(sp)
    3690:	df000204 	addi	fp,sp,8
    3694:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
    3698:	e0bfff17 	ldw	r2,-4(fp)
    369c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	10800943 	ldbu	r2,37(r2)
    36a8:	10803fcc 	andi	r2,r2,255
    36ac:	10c00044 	addi	r3,r2,1
    36b0:	e0bffe17 	ldw	r2,-8(fp)
    36b4:	10800983 	ldbu	r2,38(r2)
    36b8:	10803fcc 	andi	r2,r2,255
    36bc:	18800316 	blt	r3,r2,36cc <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
    36c0:	e0bffe17 	ldw	r2,-8(fp)
    36c4:	10000945 	stb	zero,37(r2)
    36c8:	00000606 	br	36e4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	10800943 	ldbu	r2,37(r2)
    36d4:	10800044 	addi	r2,r2,1
    36d8:	1007883a 	mov	r3,r2
    36dc:	e0bffe17 	ldw	r2,-8(fp)
    36e0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
    36e4:	e0bffe17 	ldw	r2,-8(fp)
    36e8:	10800983 	ldbu	r2,38(r2)
    36ec:	10803fcc 	andi	r2,r2,255
    36f0:	10000826 	beq	r2,zero,3714 <alt_lcd_16207_timeout+0x90>
    36f4:	e0bffe17 	ldw	r2,-8(fp)
    36f8:	108009c3 	ldbu	r2,39(r2)
    36fc:	10803fcc 	andi	r2,r2,255
    3700:	1080201c 	xori	r2,r2,128
    3704:	10bfe004 	addi	r2,r2,-128
    3708:	1000021e 	bne	r2,zero,3714 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
    370c:	e13ffe17 	ldw	r4,-8(fp)
    3710:	0002c480 	call	2c48 <lcd_repaint_screen>

  return sp->period;
    3714:	e0bffe17 	ldw	r2,-8(fp)
    3718:	10800717 	ldw	r2,28(r2)
}
    371c:	e037883a 	mov	sp,fp
    3720:	dfc00117 	ldw	ra,4(sp)
    3724:	df000017 	ldw	fp,0(sp)
    3728:	dec00204 	addi	sp,sp,8
    372c:	f800283a 	ret

00003730 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
    3730:	defffc04 	addi	sp,sp,-16
    3734:	dfc00315 	stw	ra,12(sp)
    3738:	df000215 	stw	fp,8(sp)
    373c:	df000204 	addi	fp,sp,8
    3740:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
    3744:	e0bfff17 	ldw	r2,-4(fp)
    3748:	10800017 	ldw	r2,0(r2)
    374c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
    3750:	e0bfff17 	ldw	r2,-4(fp)
    3754:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
    3758:	010ea604 	movi	r4,15000
    375c:	0001e680 	call	1e68 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    3760:	e0bffe17 	ldw	r2,-8(fp)
    3764:	00c00c04 	movi	r3,48
    3768:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
    376c:	01040104 	movi	r4,4100
    3770:	0001e680 	call	1e68 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    3774:	e0bffe17 	ldw	r2,-8(fp)
    3778:	00c00c04 	movi	r3,48
    377c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
    3780:	0100fa04 	movi	r4,1000
    3784:	0001e680 	call	1e68 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    3788:	e0bffe17 	ldw	r2,-8(fp)
    378c:	00c00c04 	movi	r3,48
    3790:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
    3794:	01400e04 	movi	r5,56
    3798:	e13fff17 	ldw	r4,-4(fp)
    379c:	00029e80 	call	29e8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
    37a0:	01400204 	movi	r5,8
    37a4:	e13fff17 	ldw	r4,-4(fp)
    37a8:	00029e80 	call	29e8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
    37ac:	e13fff17 	ldw	r4,-4(fp)
    37b0:	0002b780 	call	2b78 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
    37b4:	01400184 	movi	r5,6
    37b8:	e13fff17 	ldw	r4,-4(fp)
    37bc:	00029e80 	call	29e8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
    37c0:	01400304 	movi	r5,12
    37c4:	e13fff17 	ldw	r4,-4(fp)
    37c8:	00029e80 	call	29e8 <lcd_write_command>

  sp->esccount = -1;
    37cc:	e0bfff17 	ldw	r2,-4(fp)
    37d0:	00ffffc4 	movi	r3,-1
    37d4:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
    37d8:	e0bfff17 	ldw	r2,-4(fp)
    37dc:	10800a04 	addi	r2,r2,40
    37e0:	01800204 	movi	r6,8
    37e4:	000b883a 	mov	r5,zero
    37e8:	1009883a 	mov	r4,r2
    37ec:	0004ccc0 	call	4ccc <memset>

  sp->scrollpos = 0;
    37f0:	e0bfff17 	ldw	r2,-4(fp)
    37f4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
    37f8:	e0bfff17 	ldw	r2,-4(fp)
    37fc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
    3800:	e0bfff17 	ldw	r2,-4(fp)
    3804:	100009c5 	stb	zero,39(r2)
    3808:	d0a5f117 	ldw	r2,-26684(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
    380c:	01400284 	movi	r5,10
    3810:	1009883a 	mov	r4,r2
    3814:	0001bac0 	call	1bac <__udivsi3>
    3818:	1007883a 	mov	r3,r2
    381c:	e0bfff17 	ldw	r2,-4(fp)
    3820:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
    3824:	e0bfff17 	ldw	r2,-4(fp)
    3828:	10c00104 	addi	r3,r2,4
    382c:	e0bfff17 	ldw	r2,-4(fp)
    3830:	10800717 	ldw	r2,28(r2)
    3834:	e1ffff17 	ldw	r7,-4(fp)
    3838:	01800034 	movhi	r6,0
    383c:	318da104 	addi	r6,r6,13956
    3840:	100b883a 	mov	r5,r2
    3844:	1809883a 	mov	r4,r3
    3848:	00039b80 	call	39b8 <alt_alarm_start>
}
    384c:	0001883a 	nop
    3850:	e037883a 	mov	sp,fp
    3854:	dfc00117 	ldw	ra,4(sp)
    3858:	df000017 	ldw	fp,0(sp)
    385c:	dec00204 	addi	sp,sp,8
    3860:	f800283a 	ret

00003864 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3864:	defffa04 	addi	sp,sp,-24
    3868:	dfc00515 	stw	ra,20(sp)
    386c:	df000415 	stw	fp,16(sp)
    3870:	df000404 	addi	fp,sp,16
    3874:	e13ffd15 	stw	r4,-12(fp)
    3878:	e17ffe15 	stw	r5,-8(fp)
    387c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
    3880:	e0bffd17 	ldw	r2,-12(fp)
    3884:	10800017 	ldw	r2,0(r2)
    3888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
    388c:	e0bffc17 	ldw	r2,-16(fp)
    3890:	10c00a04 	addi	r3,r2,40
    3894:	e0bffd17 	ldw	r2,-12(fp)
    3898:	10800217 	ldw	r2,8(r2)
    389c:	100f883a 	mov	r7,r2
    38a0:	e1bfff17 	ldw	r6,-4(fp)
    38a4:	e17ffe17 	ldw	r5,-8(fp)
    38a8:	1809883a 	mov	r4,r3
    38ac:	00031ac0 	call	31ac <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
    38b0:	e037883a 	mov	sp,fp
    38b4:	dfc00117 	ldw	ra,4(sp)
    38b8:	df000017 	ldw	fp,0(sp)
    38bc:	dec00204 	addi	sp,sp,8
    38c0:	f800283a 	ret

000038c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    38c4:	defffa04 	addi	sp,sp,-24
    38c8:	dfc00515 	stw	ra,20(sp)
    38cc:	df000415 	stw	fp,16(sp)
    38d0:	df000404 	addi	fp,sp,16
    38d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    38d8:	0007883a 	mov	r3,zero
    38dc:	e0bfff17 	ldw	r2,-4(fp)
    38e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    38e4:	e0bfff17 	ldw	r2,-4(fp)
    38e8:	10800104 	addi	r2,r2,4
    38ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    38f0:	0005303a 	rdctl	r2,status
    38f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    38f8:	e0fffd17 	ldw	r3,-12(fp)
    38fc:	00bfff84 	movi	r2,-2
    3900:	1884703a 	and	r2,r3,r2
    3904:	1001703a 	wrctl	status,r2
  
  return context;
    3908:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    390c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    3910:	00046c40 	call	46c4 <alt_tick>
    3914:	e0bffc17 	ldw	r2,-16(fp)
    3918:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    391c:	e0bffe17 	ldw	r2,-8(fp)
    3920:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    3924:	0001883a 	nop
    3928:	e037883a 	mov	sp,fp
    392c:	dfc00117 	ldw	ra,4(sp)
    3930:	df000017 	ldw	fp,0(sp)
    3934:	dec00204 	addi	sp,sp,8
    3938:	f800283a 	ret

0000393c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    393c:	defff804 	addi	sp,sp,-32
    3940:	dfc00715 	stw	ra,28(sp)
    3944:	df000615 	stw	fp,24(sp)
    3948:	df000604 	addi	fp,sp,24
    394c:	e13ffc15 	stw	r4,-16(fp)
    3950:	e17ffd15 	stw	r5,-12(fp)
    3954:	e1bffe15 	stw	r6,-8(fp)
    3958:	e1ffff15 	stw	r7,-4(fp)
    395c:	e0bfff17 	ldw	r2,-4(fp)
    3960:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    3964:	d0a5f117 	ldw	r2,-26684(gp)
    3968:	1000021e 	bne	r2,zero,3974 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    396c:	e0bffb17 	ldw	r2,-20(fp)
    3970:	d0a5f115 	stw	r2,-26684(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    3974:	e0bffc17 	ldw	r2,-16(fp)
    3978:	10800104 	addi	r2,r2,4
    397c:	00c001c4 	movi	r3,7
    3980:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    3984:	d8000015 	stw	zero,0(sp)
    3988:	e1fffc17 	ldw	r7,-16(fp)
    398c:	01800034 	movhi	r6,0
    3990:	318e3104 	addi	r6,r6,14532
    3994:	e17ffe17 	ldw	r5,-8(fp)
    3998:	e13ffd17 	ldw	r4,-12(fp)
    399c:	0003f900 	call	3f90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    39a0:	0001883a 	nop
    39a4:	e037883a 	mov	sp,fp
    39a8:	dfc00117 	ldw	ra,4(sp)
    39ac:	df000017 	ldw	fp,0(sp)
    39b0:	dec00204 	addi	sp,sp,8
    39b4:	f800283a 	ret

000039b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    39b8:	defff504 	addi	sp,sp,-44
    39bc:	df000a15 	stw	fp,40(sp)
    39c0:	df000a04 	addi	fp,sp,40
    39c4:	e13ffc15 	stw	r4,-16(fp)
    39c8:	e17ffd15 	stw	r5,-12(fp)
    39cc:	e1bffe15 	stw	r6,-8(fp)
    39d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    39d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    39d8:	d0a5f117 	ldw	r2,-26684(gp)
  
  if (alt_ticks_per_second ())
    39dc:	10003c26 	beq	r2,zero,3ad0 <alt_alarm_start+0x118>
  {
    if (alarm)
    39e0:	e0bffc17 	ldw	r2,-16(fp)
    39e4:	10003826 	beq	r2,zero,3ac8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    39e8:	e0bffc17 	ldw	r2,-16(fp)
    39ec:	e0fffe17 	ldw	r3,-8(fp)
    39f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    39f4:	e0bffc17 	ldw	r2,-16(fp)
    39f8:	e0ffff17 	ldw	r3,-4(fp)
    39fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a00:	0005303a 	rdctl	r2,status
    3a04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a08:	e0fff917 	ldw	r3,-28(fp)
    3a0c:	00bfff84 	movi	r2,-2
    3a10:	1884703a 	and	r2,r3,r2
    3a14:	1001703a 	wrctl	status,r2
  
  return context;
    3a18:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    3a1c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    3a20:	d0a5f217 	ldw	r2,-26680(gp)
      
      current_nticks = alt_nticks();
    3a24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    3a28:	e0fffd17 	ldw	r3,-12(fp)
    3a2c:	e0bff617 	ldw	r2,-40(fp)
    3a30:	1885883a 	add	r2,r3,r2
    3a34:	10c00044 	addi	r3,r2,1
    3a38:	e0bffc17 	ldw	r2,-16(fp)
    3a3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    3a40:	e0bffc17 	ldw	r2,-16(fp)
    3a44:	10c00217 	ldw	r3,8(r2)
    3a48:	e0bff617 	ldw	r2,-40(fp)
    3a4c:	1880042e 	bgeu	r3,r2,3a60 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    3a50:	e0bffc17 	ldw	r2,-16(fp)
    3a54:	00c00044 	movi	r3,1
    3a58:	10c00405 	stb	r3,16(r2)
    3a5c:	00000206 	br	3a68 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    3a60:	e0bffc17 	ldw	r2,-16(fp)
    3a64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    3a68:	e0bffc17 	ldw	r2,-16(fp)
    3a6c:	d0e00804 	addi	r3,gp,-32736
    3a70:	e0fffa15 	stw	r3,-24(fp)
    3a74:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3a78:	e0bffb17 	ldw	r2,-20(fp)
    3a7c:	e0fffa17 	ldw	r3,-24(fp)
    3a80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3a84:	e0bffa17 	ldw	r2,-24(fp)
    3a88:	10c00017 	ldw	r3,0(r2)
    3a8c:	e0bffb17 	ldw	r2,-20(fp)
    3a90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3a94:	e0bffa17 	ldw	r2,-24(fp)
    3a98:	10800017 	ldw	r2,0(r2)
    3a9c:	e0fffb17 	ldw	r3,-20(fp)
    3aa0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3aa4:	e0bffa17 	ldw	r2,-24(fp)
    3aa8:	e0fffb17 	ldw	r3,-20(fp)
    3aac:	10c00015 	stw	r3,0(r2)
    3ab0:	e0bff817 	ldw	r2,-32(fp)
    3ab4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3ab8:	e0bff717 	ldw	r2,-36(fp)
    3abc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    3ac0:	0005883a 	mov	r2,zero
    3ac4:	00000306 	br	3ad4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    3ac8:	00bffa84 	movi	r2,-22
    3acc:	00000106 	br	3ad4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    3ad0:	00bfde84 	movi	r2,-134
  }
}
    3ad4:	e037883a 	mov	sp,fp
    3ad8:	df000017 	ldw	fp,0(sp)
    3adc:	dec00104 	addi	sp,sp,4
    3ae0:	f800283a 	ret

00003ae4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    3ae4:	defffa04 	addi	sp,sp,-24
    3ae8:	dfc00515 	stw	ra,20(sp)
    3aec:	df000415 	stw	fp,16(sp)
    3af0:	df000404 	addi	fp,sp,16
    3af4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    3af8:	008000c4 	movi	r2,3
    3afc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    3b00:	e0fffd17 	ldw	r3,-12(fp)
    3b04:	008003f4 	movhi	r2,15
    3b08:	10909004 	addi	r2,r2,16960
    3b0c:	1885383a 	mul	r2,r3,r2
    3b10:	100b883a 	mov	r5,r2
    3b14:	01017db4 	movhi	r4,1526
    3b18:	21384004 	addi	r4,r4,-7936
    3b1c:	0001bac0 	call	1bac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    3b20:	100b883a 	mov	r5,r2
    3b24:	01200034 	movhi	r4,32768
    3b28:	213fffc4 	addi	r4,r4,-1
    3b2c:	0001bac0 	call	1bac <__udivsi3>
    3b30:	100b883a 	mov	r5,r2
    3b34:	e13fff17 	ldw	r4,-4(fp)
    3b38:	0001bac0 	call	1bac <__udivsi3>
    3b3c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    3b40:	e0bffe17 	ldw	r2,-8(fp)
    3b44:	10002a26 	beq	r2,zero,3bf0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    3b48:	e03ffc15 	stw	zero,-16(fp)
    3b4c:	00001706 	br	3bac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    3b50:	00a00034 	movhi	r2,32768
    3b54:	10bfffc4 	addi	r2,r2,-1
    3b58:	10bfffc4 	addi	r2,r2,-1
    3b5c:	103ffe1e 	bne	r2,zero,3b58 <__alt_data_end+0xf8003b58>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    3b60:	e0fffd17 	ldw	r3,-12(fp)
    3b64:	008003f4 	movhi	r2,15
    3b68:	10909004 	addi	r2,r2,16960
    3b6c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    3b70:	100b883a 	mov	r5,r2
    3b74:	01017db4 	movhi	r4,1526
    3b78:	21384004 	addi	r4,r4,-7936
    3b7c:	0001bac0 	call	1bac <__udivsi3>
    3b80:	100b883a 	mov	r5,r2
    3b84:	01200034 	movhi	r4,32768
    3b88:	213fffc4 	addi	r4,r4,-1
    3b8c:	0001bac0 	call	1bac <__udivsi3>
    3b90:	1007883a 	mov	r3,r2
    3b94:	e0bfff17 	ldw	r2,-4(fp)
    3b98:	10c5c83a 	sub	r2,r2,r3
    3b9c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    3ba0:	e0bffc17 	ldw	r2,-16(fp)
    3ba4:	10800044 	addi	r2,r2,1
    3ba8:	e0bffc15 	stw	r2,-16(fp)
    3bac:	e0fffc17 	ldw	r3,-16(fp)
    3bb0:	e0bffe17 	ldw	r2,-8(fp)
    3bb4:	18bfe616 	blt	r3,r2,3b50 <__alt_data_end+0xf8003b50>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3bb8:	e0fffd17 	ldw	r3,-12(fp)
    3bbc:	008003f4 	movhi	r2,15
    3bc0:	10909004 	addi	r2,r2,16960
    3bc4:	1885383a 	mul	r2,r3,r2
    3bc8:	100b883a 	mov	r5,r2
    3bcc:	01017db4 	movhi	r4,1526
    3bd0:	21384004 	addi	r4,r4,-7936
    3bd4:	0001bac0 	call	1bac <__udivsi3>
    3bd8:	1007883a 	mov	r3,r2
    3bdc:	e0bfff17 	ldw	r2,-4(fp)
    3be0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3be4:	10bfffc4 	addi	r2,r2,-1
    3be8:	103ffe1e 	bne	r2,zero,3be4 <__alt_data_end+0xf8003be4>
    3bec:	00000d06 	br	3c24 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3bf0:	e0fffd17 	ldw	r3,-12(fp)
    3bf4:	008003f4 	movhi	r2,15
    3bf8:	10909004 	addi	r2,r2,16960
    3bfc:	1885383a 	mul	r2,r3,r2
    3c00:	100b883a 	mov	r5,r2
    3c04:	01017db4 	movhi	r4,1526
    3c08:	21384004 	addi	r4,r4,-7936
    3c0c:	0001bac0 	call	1bac <__udivsi3>
    3c10:	1007883a 	mov	r3,r2
    3c14:	e0bfff17 	ldw	r2,-4(fp)
    3c18:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3c1c:	10bfffc4 	addi	r2,r2,-1
    3c20:	00bffe16 	blt	zero,r2,3c1c <__alt_data_end+0xf8003c1c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    3c24:	0005883a 	mov	r2,zero
}
    3c28:	e037883a 	mov	sp,fp
    3c2c:	dfc00117 	ldw	ra,4(sp)
    3c30:	df000017 	ldw	fp,0(sp)
    3c34:	dec00204 	addi	sp,sp,8
    3c38:	f800283a 	ret

00003c3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3c3c:	defffe04 	addi	sp,sp,-8
    3c40:	dfc00115 	stw	ra,4(sp)
    3c44:	df000015 	stw	fp,0(sp)
    3c48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3c4c:	d0a00617 	ldw	r2,-32744(gp)
    3c50:	10000326 	beq	r2,zero,3c60 <alt_get_errno+0x24>
    3c54:	d0a00617 	ldw	r2,-32744(gp)
    3c58:	103ee83a 	callr	r2
    3c5c:	00000106 	br	3c64 <alt_get_errno+0x28>
    3c60:	d0a5f304 	addi	r2,gp,-26676
}
    3c64:	e037883a 	mov	sp,fp
    3c68:	dfc00117 	ldw	ra,4(sp)
    3c6c:	df000017 	ldw	fp,0(sp)
    3c70:	dec00204 	addi	sp,sp,8
    3c74:	f800283a 	ret

00003c78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3c78:	defffb04 	addi	sp,sp,-20
    3c7c:	dfc00415 	stw	ra,16(sp)
    3c80:	df000315 	stw	fp,12(sp)
    3c84:	df000304 	addi	fp,sp,12
    3c88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3c8c:	e0bfff17 	ldw	r2,-4(fp)
    3c90:	10000616 	blt	r2,zero,3cac <close+0x34>
    3c94:	e0bfff17 	ldw	r2,-4(fp)
    3c98:	10c00324 	muli	r3,r2,12
    3c9c:	00800034 	movhi	r2,0
    3ca0:	10998904 	addi	r2,r2,26148
    3ca4:	1885883a 	add	r2,r3,r2
    3ca8:	00000106 	br	3cb0 <close+0x38>
    3cac:	0005883a 	mov	r2,zero
    3cb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3cb4:	e0bffd17 	ldw	r2,-12(fp)
    3cb8:	10001926 	beq	r2,zero,3d20 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3cbc:	e0bffd17 	ldw	r2,-12(fp)
    3cc0:	10800017 	ldw	r2,0(r2)
    3cc4:	10800417 	ldw	r2,16(r2)
    3cc8:	10000626 	beq	r2,zero,3ce4 <close+0x6c>
    3ccc:	e0bffd17 	ldw	r2,-12(fp)
    3cd0:	10800017 	ldw	r2,0(r2)
    3cd4:	10800417 	ldw	r2,16(r2)
    3cd8:	e13ffd17 	ldw	r4,-12(fp)
    3cdc:	103ee83a 	callr	r2
    3ce0:	00000106 	br	3ce8 <close+0x70>
    3ce4:	0005883a 	mov	r2,zero
    3ce8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3cec:	e13fff17 	ldw	r4,-4(fp)
    3cf0:	00045c40 	call	45c4 <alt_release_fd>
    if (rval < 0)
    3cf4:	e0bffe17 	ldw	r2,-8(fp)
    3cf8:	1000070e 	bge	r2,zero,3d18 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3cfc:	0003c3c0 	call	3c3c <alt_get_errno>
    3d00:	1007883a 	mov	r3,r2
    3d04:	e0bffe17 	ldw	r2,-8(fp)
    3d08:	0085c83a 	sub	r2,zero,r2
    3d0c:	18800015 	stw	r2,0(r3)
      return -1;
    3d10:	00bfffc4 	movi	r2,-1
    3d14:	00000706 	br	3d34 <close+0xbc>
    }
    return 0;
    3d18:	0005883a 	mov	r2,zero
    3d1c:	00000506 	br	3d34 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3d20:	0003c3c0 	call	3c3c <alt_get_errno>
    3d24:	1007883a 	mov	r3,r2
    3d28:	00801444 	movi	r2,81
    3d2c:	18800015 	stw	r2,0(r3)
    return -1;
    3d30:	00bfffc4 	movi	r2,-1
  }
}
    3d34:	e037883a 	mov	sp,fp
    3d38:	dfc00117 	ldw	ra,4(sp)
    3d3c:	df000017 	ldw	fp,0(sp)
    3d40:	dec00204 	addi	sp,sp,8
    3d44:	f800283a 	ret

00003d48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3d48:	defffe04 	addi	sp,sp,-8
    3d4c:	df000115 	stw	fp,4(sp)
    3d50:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    3d54:	e03fff15 	stw	zero,-4(fp)
    3d58:	00000506 	br	3d70 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    3d5c:	e0bfff17 	ldw	r2,-4(fp)
    3d60:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    3d64:	e0bfff17 	ldw	r2,-4(fp)
    3d68:	10800804 	addi	r2,r2,32
    3d6c:	e0bfff15 	stw	r2,-4(fp)
    3d70:	e0bfff17 	ldw	r2,-4(fp)
    3d74:	10820030 	cmpltui	r2,r2,2048
    3d78:	103ff81e 	bne	r2,zero,3d5c <__alt_data_end+0xf8003d5c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3d7c:	0001883a 	nop
    3d80:	e037883a 	mov	sp,fp
    3d84:	df000017 	ldw	fp,0(sp)
    3d88:	dec00104 	addi	sp,sp,4
    3d8c:	f800283a 	ret

00003d90 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3d90:	defffc04 	addi	sp,sp,-16
    3d94:	df000315 	stw	fp,12(sp)
    3d98:	df000304 	addi	fp,sp,12
    3d9c:	e13ffd15 	stw	r4,-12(fp)
    3da0:	e17ffe15 	stw	r5,-8(fp)
    3da4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3da8:	e0bfff17 	ldw	r2,-4(fp)
}
    3dac:	e037883a 	mov	sp,fp
    3db0:	df000017 	ldw	fp,0(sp)
    3db4:	dec00104 	addi	sp,sp,4
    3db8:	f800283a 	ret

00003dbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3dbc:	defffe04 	addi	sp,sp,-8
    3dc0:	dfc00115 	stw	ra,4(sp)
    3dc4:	df000015 	stw	fp,0(sp)
    3dc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3dcc:	d0a00617 	ldw	r2,-32744(gp)
    3dd0:	10000326 	beq	r2,zero,3de0 <alt_get_errno+0x24>
    3dd4:	d0a00617 	ldw	r2,-32744(gp)
    3dd8:	103ee83a 	callr	r2
    3ddc:	00000106 	br	3de4 <alt_get_errno+0x28>
    3de0:	d0a5f304 	addi	r2,gp,-26676
}
    3de4:	e037883a 	mov	sp,fp
    3de8:	dfc00117 	ldw	ra,4(sp)
    3dec:	df000017 	ldw	fp,0(sp)
    3df0:	dec00204 	addi	sp,sp,8
    3df4:	f800283a 	ret

00003df8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3df8:	defffa04 	addi	sp,sp,-24
    3dfc:	dfc00515 	stw	ra,20(sp)
    3e00:	df000415 	stw	fp,16(sp)
    3e04:	df000404 	addi	fp,sp,16
    3e08:	e13ffe15 	stw	r4,-8(fp)
    3e0c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3e10:	e0bffe17 	ldw	r2,-8(fp)
    3e14:	10000326 	beq	r2,zero,3e24 <alt_dev_llist_insert+0x2c>
    3e18:	e0bffe17 	ldw	r2,-8(fp)
    3e1c:	10800217 	ldw	r2,8(r2)
    3e20:	1000061e 	bne	r2,zero,3e3c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3e24:	0003dbc0 	call	3dbc <alt_get_errno>
    3e28:	1007883a 	mov	r3,r2
    3e2c:	00800584 	movi	r2,22
    3e30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3e34:	00bffa84 	movi	r2,-22
    3e38:	00001306 	br	3e88 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3e3c:	e0bffe17 	ldw	r2,-8(fp)
    3e40:	e0ffff17 	ldw	r3,-4(fp)
    3e44:	e0fffc15 	stw	r3,-16(fp)
    3e48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3e4c:	e0bffd17 	ldw	r2,-12(fp)
    3e50:	e0fffc17 	ldw	r3,-16(fp)
    3e54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3e58:	e0bffc17 	ldw	r2,-16(fp)
    3e5c:	10c00017 	ldw	r3,0(r2)
    3e60:	e0bffd17 	ldw	r2,-12(fp)
    3e64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3e68:	e0bffc17 	ldw	r2,-16(fp)
    3e6c:	10800017 	ldw	r2,0(r2)
    3e70:	e0fffd17 	ldw	r3,-12(fp)
    3e74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3e78:	e0bffc17 	ldw	r2,-16(fp)
    3e7c:	e0fffd17 	ldw	r3,-12(fp)
    3e80:	10c00015 	stw	r3,0(r2)

  return 0;  
    3e84:	0005883a 	mov	r2,zero
}
    3e88:	e037883a 	mov	sp,fp
    3e8c:	dfc00117 	ldw	ra,4(sp)
    3e90:	df000017 	ldw	fp,0(sp)
    3e94:	dec00204 	addi	sp,sp,8
    3e98:	f800283a 	ret

00003e9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    3e9c:	defffd04 	addi	sp,sp,-12
    3ea0:	dfc00215 	stw	ra,8(sp)
    3ea4:	df000115 	stw	fp,4(sp)
    3ea8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3eac:	00800034 	movhi	r2,0
    3eb0:	10942f04 	addi	r2,r2,20668
    3eb4:	e0bfff15 	stw	r2,-4(fp)
    3eb8:	00000606 	br	3ed4 <_do_ctors+0x38>
        (*ctor) (); 
    3ebc:	e0bfff17 	ldw	r2,-4(fp)
    3ec0:	10800017 	ldw	r2,0(r2)
    3ec4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3ec8:	e0bfff17 	ldw	r2,-4(fp)
    3ecc:	10bfff04 	addi	r2,r2,-4
    3ed0:	e0bfff15 	stw	r2,-4(fp)
    3ed4:	e0ffff17 	ldw	r3,-4(fp)
    3ed8:	00800034 	movhi	r2,0
    3edc:	10943004 	addi	r2,r2,20672
    3ee0:	18bff62e 	bgeu	r3,r2,3ebc <__alt_data_end+0xf8003ebc>
        (*ctor) (); 
}
    3ee4:	0001883a 	nop
    3ee8:	e037883a 	mov	sp,fp
    3eec:	dfc00117 	ldw	ra,4(sp)
    3ef0:	df000017 	ldw	fp,0(sp)
    3ef4:	dec00204 	addi	sp,sp,8
    3ef8:	f800283a 	ret

00003efc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3efc:	defffd04 	addi	sp,sp,-12
    3f00:	dfc00215 	stw	ra,8(sp)
    3f04:	df000115 	stw	fp,4(sp)
    3f08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3f0c:	00800034 	movhi	r2,0
    3f10:	10942f04 	addi	r2,r2,20668
    3f14:	e0bfff15 	stw	r2,-4(fp)
    3f18:	00000606 	br	3f34 <_do_dtors+0x38>
        (*dtor) (); 
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	10800017 	ldw	r2,0(r2)
    3f24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3f28:	e0bfff17 	ldw	r2,-4(fp)
    3f2c:	10bfff04 	addi	r2,r2,-4
    3f30:	e0bfff15 	stw	r2,-4(fp)
    3f34:	e0ffff17 	ldw	r3,-4(fp)
    3f38:	00800034 	movhi	r2,0
    3f3c:	10943004 	addi	r2,r2,20672
    3f40:	18bff62e 	bgeu	r3,r2,3f1c <__alt_data_end+0xf8003f1c>
        (*dtor) (); 
}
    3f44:	0001883a 	nop
    3f48:	e037883a 	mov	sp,fp
    3f4c:	dfc00117 	ldw	ra,4(sp)
    3f50:	df000017 	ldw	fp,0(sp)
    3f54:	dec00204 	addi	sp,sp,8
    3f58:	f800283a 	ret

00003f5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3f5c:	defffe04 	addi	sp,sp,-8
    3f60:	dfc00115 	stw	ra,4(sp)
    3f64:	df000015 	stw	fp,0(sp)
    3f68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    3f6c:	01440004 	movi	r5,4096
    3f70:	0009883a 	mov	r4,zero
    3f74:	0004a2c0 	call	4a2c <alt_icache_flush>
#endif
}
    3f78:	0001883a 	nop
    3f7c:	e037883a 	mov	sp,fp
    3f80:	dfc00117 	ldw	ra,4(sp)
    3f84:	df000017 	ldw	fp,0(sp)
    3f88:	dec00204 	addi	sp,sp,8
    3f8c:	f800283a 	ret

00003f90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    3f90:	defff904 	addi	sp,sp,-28
    3f94:	dfc00615 	stw	ra,24(sp)
    3f98:	df000515 	stw	fp,20(sp)
    3f9c:	df000504 	addi	fp,sp,20
    3fa0:	e13ffc15 	stw	r4,-16(fp)
    3fa4:	e17ffd15 	stw	r5,-12(fp)
    3fa8:	e1bffe15 	stw	r6,-8(fp)
    3fac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    3fb0:	e0800217 	ldw	r2,8(fp)
    3fb4:	d8800015 	stw	r2,0(sp)
    3fb8:	e1ffff17 	ldw	r7,-4(fp)
    3fbc:	e1bffe17 	ldw	r6,-8(fp)
    3fc0:	e17ffd17 	ldw	r5,-12(fp)
    3fc4:	e13ffc17 	ldw	r4,-16(fp)
    3fc8:	00041400 	call	4140 <alt_iic_isr_register>
}  
    3fcc:	e037883a 	mov	sp,fp
    3fd0:	dfc00117 	ldw	ra,4(sp)
    3fd4:	df000017 	ldw	fp,0(sp)
    3fd8:	dec00204 	addi	sp,sp,8
    3fdc:	f800283a 	ret

00003fe0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    3fe0:	defff904 	addi	sp,sp,-28
    3fe4:	df000615 	stw	fp,24(sp)
    3fe8:	df000604 	addi	fp,sp,24
    3fec:	e13ffe15 	stw	r4,-8(fp)
    3ff0:	e17fff15 	stw	r5,-4(fp)
    3ff4:	e0bfff17 	ldw	r2,-4(fp)
    3ff8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3ffc:	0005303a 	rdctl	r2,status
    4000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4004:	e0fffb17 	ldw	r3,-20(fp)
    4008:	00bfff84 	movi	r2,-2
    400c:	1884703a 	and	r2,r3,r2
    4010:	1001703a 	wrctl	status,r2
  
  return context;
    4014:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4018:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    401c:	00c00044 	movi	r3,1
    4020:	e0bffa17 	ldw	r2,-24(fp)
    4024:	1884983a 	sll	r2,r3,r2
    4028:	1007883a 	mov	r3,r2
    402c:	d0a5f017 	ldw	r2,-26688(gp)
    4030:	1884b03a 	or	r2,r3,r2
    4034:	d0a5f015 	stw	r2,-26688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4038:	d0a5f017 	ldw	r2,-26688(gp)
    403c:	100170fa 	wrctl	ienable,r2
    4040:	e0bffc17 	ldw	r2,-16(fp)
    4044:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4048:	e0bffd17 	ldw	r2,-12(fp)
    404c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4050:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    4054:	0001883a 	nop
}
    4058:	e037883a 	mov	sp,fp
    405c:	df000017 	ldw	fp,0(sp)
    4060:	dec00104 	addi	sp,sp,4
    4064:	f800283a 	ret

00004068 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4068:	defff904 	addi	sp,sp,-28
    406c:	df000615 	stw	fp,24(sp)
    4070:	df000604 	addi	fp,sp,24
    4074:	e13ffe15 	stw	r4,-8(fp)
    4078:	e17fff15 	stw	r5,-4(fp)
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4084:	0005303a 	rdctl	r2,status
    4088:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    408c:	e0fffb17 	ldw	r3,-20(fp)
    4090:	00bfff84 	movi	r2,-2
    4094:	1884703a 	and	r2,r3,r2
    4098:	1001703a 	wrctl	status,r2
  
  return context;
    409c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    40a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    40a4:	00c00044 	movi	r3,1
    40a8:	e0bffa17 	ldw	r2,-24(fp)
    40ac:	1884983a 	sll	r2,r3,r2
    40b0:	0084303a 	nor	r2,zero,r2
    40b4:	1007883a 	mov	r3,r2
    40b8:	d0a5f017 	ldw	r2,-26688(gp)
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	d0a5f015 	stw	r2,-26688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    40c4:	d0a5f017 	ldw	r2,-26688(gp)
    40c8:	100170fa 	wrctl	ienable,r2
    40cc:	e0bffc17 	ldw	r2,-16(fp)
    40d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    40d4:	e0bffd17 	ldw	r2,-12(fp)
    40d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    40dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    40e0:	0001883a 	nop
}
    40e4:	e037883a 	mov	sp,fp
    40e8:	df000017 	ldw	fp,0(sp)
    40ec:	dec00104 	addi	sp,sp,4
    40f0:	f800283a 	ret

000040f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    40f4:	defffc04 	addi	sp,sp,-16
    40f8:	df000315 	stw	fp,12(sp)
    40fc:	df000304 	addi	fp,sp,12
    4100:	e13ffe15 	stw	r4,-8(fp)
    4104:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4108:	000530fa 	rdctl	r2,ienable
    410c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4110:	00c00044 	movi	r3,1
    4114:	e0bfff17 	ldw	r2,-4(fp)
    4118:	1884983a 	sll	r2,r3,r2
    411c:	1007883a 	mov	r3,r2
    4120:	e0bffd17 	ldw	r2,-12(fp)
    4124:	1884703a 	and	r2,r3,r2
    4128:	1004c03a 	cmpne	r2,r2,zero
    412c:	10803fcc 	andi	r2,r2,255
}
    4130:	e037883a 	mov	sp,fp
    4134:	df000017 	ldw	fp,0(sp)
    4138:	dec00104 	addi	sp,sp,4
    413c:	f800283a 	ret

00004140 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4140:	defff504 	addi	sp,sp,-44
    4144:	dfc00a15 	stw	ra,40(sp)
    4148:	df000915 	stw	fp,36(sp)
    414c:	df000904 	addi	fp,sp,36
    4150:	e13ffc15 	stw	r4,-16(fp)
    4154:	e17ffd15 	stw	r5,-12(fp)
    4158:	e1bffe15 	stw	r6,-8(fp)
    415c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    4160:	00bffa84 	movi	r2,-22
    4164:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4168:	e0bffd17 	ldw	r2,-12(fp)
    416c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4170:	e0bff817 	ldw	r2,-32(fp)
    4174:	10800808 	cmpgei	r2,r2,32
    4178:	1000271e 	bne	r2,zero,4218 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    417c:	0005303a 	rdctl	r2,status
    4180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4184:	e0fffb17 	ldw	r3,-20(fp)
    4188:	00bfff84 	movi	r2,-2
    418c:	1884703a 	and	r2,r3,r2
    4190:	1001703a 	wrctl	status,r2
  
  return context;
    4194:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4198:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    419c:	00800074 	movhi	r2,1
    41a0:	10a0e604 	addi	r2,r2,-31848
    41a4:	e0fff817 	ldw	r3,-32(fp)
    41a8:	180690fa 	slli	r3,r3,3
    41ac:	10c5883a 	add	r2,r2,r3
    41b0:	e0fffe17 	ldw	r3,-8(fp)
    41b4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    41b8:	00800074 	movhi	r2,1
    41bc:	10a0e604 	addi	r2,r2,-31848
    41c0:	e0fff817 	ldw	r3,-32(fp)
    41c4:	180690fa 	slli	r3,r3,3
    41c8:	10c5883a 	add	r2,r2,r3
    41cc:	10800104 	addi	r2,r2,4
    41d0:	e0ffff17 	ldw	r3,-4(fp)
    41d4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    41d8:	e0bffe17 	ldw	r2,-8(fp)
    41dc:	10000526 	beq	r2,zero,41f4 <alt_iic_isr_register+0xb4>
    41e0:	e0bff817 	ldw	r2,-32(fp)
    41e4:	100b883a 	mov	r5,r2
    41e8:	e13ffc17 	ldw	r4,-16(fp)
    41ec:	0003fe00 	call	3fe0 <alt_ic_irq_enable>
    41f0:	00000406 	br	4204 <alt_iic_isr_register+0xc4>
    41f4:	e0bff817 	ldw	r2,-32(fp)
    41f8:	100b883a 	mov	r5,r2
    41fc:	e13ffc17 	ldw	r4,-16(fp)
    4200:	00040680 	call	4068 <alt_ic_irq_disable>
    4204:	e0bff715 	stw	r2,-36(fp)
    4208:	e0bffa17 	ldw	r2,-24(fp)
    420c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4210:	e0bff917 	ldw	r2,-28(fp)
    4214:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4218:	e0bff717 	ldw	r2,-36(fp)
}
    421c:	e037883a 	mov	sp,fp
    4220:	dfc00117 	ldw	ra,4(sp)
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00204 	addi	sp,sp,8
    422c:	f800283a 	ret

00004230 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4230:	defff904 	addi	sp,sp,-28
    4234:	dfc00615 	stw	ra,24(sp)
    4238:	df000515 	stw	fp,20(sp)
    423c:	df000504 	addi	fp,sp,20
    4240:	e13ffc15 	stw	r4,-16(fp)
    4244:	e17ffd15 	stw	r5,-12(fp)
    4248:	e1bffe15 	stw	r6,-8(fp)
    424c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4250:	e1bfff17 	ldw	r6,-4(fp)
    4254:	e17ffe17 	ldw	r5,-8(fp)
    4258:	e13ffd17 	ldw	r4,-12(fp)
    425c:	00044700 	call	4470 <open>
    4260:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    4264:	e0bffb17 	ldw	r2,-20(fp)
    4268:	10001c16 	blt	r2,zero,42dc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    426c:	00800034 	movhi	r2,0
    4270:	10998904 	addi	r2,r2,26148
    4274:	e0fffb17 	ldw	r3,-20(fp)
    4278:	18c00324 	muli	r3,r3,12
    427c:	10c5883a 	add	r2,r2,r3
    4280:	10c00017 	ldw	r3,0(r2)
    4284:	e0bffc17 	ldw	r2,-16(fp)
    4288:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    428c:	00800034 	movhi	r2,0
    4290:	10998904 	addi	r2,r2,26148
    4294:	e0fffb17 	ldw	r3,-20(fp)
    4298:	18c00324 	muli	r3,r3,12
    429c:	10c5883a 	add	r2,r2,r3
    42a0:	10800104 	addi	r2,r2,4
    42a4:	10c00017 	ldw	r3,0(r2)
    42a8:	e0bffc17 	ldw	r2,-16(fp)
    42ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    42b0:	00800034 	movhi	r2,0
    42b4:	10998904 	addi	r2,r2,26148
    42b8:	e0fffb17 	ldw	r3,-20(fp)
    42bc:	18c00324 	muli	r3,r3,12
    42c0:	10c5883a 	add	r2,r2,r3
    42c4:	10800204 	addi	r2,r2,8
    42c8:	10c00017 	ldw	r3,0(r2)
    42cc:	e0bffc17 	ldw	r2,-16(fp)
    42d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    42d4:	e13ffb17 	ldw	r4,-20(fp)
    42d8:	00045c40 	call	45c4 <alt_release_fd>
  }
} 
    42dc:	0001883a 	nop
    42e0:	e037883a 	mov	sp,fp
    42e4:	dfc00117 	ldw	ra,4(sp)
    42e8:	df000017 	ldw	fp,0(sp)
    42ec:	dec00204 	addi	sp,sp,8
    42f0:	f800283a 	ret

000042f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    42f4:	defffb04 	addi	sp,sp,-20
    42f8:	dfc00415 	stw	ra,16(sp)
    42fc:	df000315 	stw	fp,12(sp)
    4300:	df000304 	addi	fp,sp,12
    4304:	e13ffd15 	stw	r4,-12(fp)
    4308:	e17ffe15 	stw	r5,-8(fp)
    430c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4310:	01c07fc4 	movi	r7,511
    4314:	01800044 	movi	r6,1
    4318:	e17ffd17 	ldw	r5,-12(fp)
    431c:	01000034 	movhi	r4,0
    4320:	21198c04 	addi	r4,r4,26160
    4324:	00042300 	call	4230 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4328:	01c07fc4 	movi	r7,511
    432c:	000d883a 	mov	r6,zero
    4330:	e17ffe17 	ldw	r5,-8(fp)
    4334:	01000034 	movhi	r4,0
    4338:	21198904 	addi	r4,r4,26148
    433c:	00042300 	call	4230 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4340:	01c07fc4 	movi	r7,511
    4344:	01800044 	movi	r6,1
    4348:	e17fff17 	ldw	r5,-4(fp)
    434c:	01000034 	movhi	r4,0
    4350:	21198f04 	addi	r4,r4,26172
    4354:	00042300 	call	4230 <alt_open_fd>
}  
    4358:	0001883a 	nop
    435c:	e037883a 	mov	sp,fp
    4360:	dfc00117 	ldw	ra,4(sp)
    4364:	df000017 	ldw	fp,0(sp)
    4368:	dec00204 	addi	sp,sp,8
    436c:	f800283a 	ret

00004370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4370:	defffe04 	addi	sp,sp,-8
    4374:	dfc00115 	stw	ra,4(sp)
    4378:	df000015 	stw	fp,0(sp)
    437c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4380:	d0a00617 	ldw	r2,-32744(gp)
    4384:	10000326 	beq	r2,zero,4394 <alt_get_errno+0x24>
    4388:	d0a00617 	ldw	r2,-32744(gp)
    438c:	103ee83a 	callr	r2
    4390:	00000106 	br	4398 <alt_get_errno+0x28>
    4394:	d0a5f304 	addi	r2,gp,-26676
}
    4398:	e037883a 	mov	sp,fp
    439c:	dfc00117 	ldw	ra,4(sp)
    43a0:	df000017 	ldw	fp,0(sp)
    43a4:	dec00204 	addi	sp,sp,8
    43a8:	f800283a 	ret

000043ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    43ac:	defffd04 	addi	sp,sp,-12
    43b0:	df000215 	stw	fp,8(sp)
    43b4:	df000204 	addi	fp,sp,8
    43b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    43bc:	e0bfff17 	ldw	r2,-4(fp)
    43c0:	10800217 	ldw	r2,8(r2)
    43c4:	10d00034 	orhi	r3,r2,16384
    43c8:	e0bfff17 	ldw	r2,-4(fp)
    43cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    43d0:	e03ffe15 	stw	zero,-8(fp)
    43d4:	00001d06 	br	444c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    43d8:	00800034 	movhi	r2,0
    43dc:	10998904 	addi	r2,r2,26148
    43e0:	e0fffe17 	ldw	r3,-8(fp)
    43e4:	18c00324 	muli	r3,r3,12
    43e8:	10c5883a 	add	r2,r2,r3
    43ec:	10c00017 	ldw	r3,0(r2)
    43f0:	e0bfff17 	ldw	r2,-4(fp)
    43f4:	10800017 	ldw	r2,0(r2)
    43f8:	1880111e 	bne	r3,r2,4440 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    43fc:	00800034 	movhi	r2,0
    4400:	10998904 	addi	r2,r2,26148
    4404:	e0fffe17 	ldw	r3,-8(fp)
    4408:	18c00324 	muli	r3,r3,12
    440c:	10c5883a 	add	r2,r2,r3
    4410:	10800204 	addi	r2,r2,8
    4414:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4418:	1000090e 	bge	r2,zero,4440 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    441c:	e0bffe17 	ldw	r2,-8(fp)
    4420:	10c00324 	muli	r3,r2,12
    4424:	00800034 	movhi	r2,0
    4428:	10998904 	addi	r2,r2,26148
    442c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4430:	e0bfff17 	ldw	r2,-4(fp)
    4434:	18800226 	beq	r3,r2,4440 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4438:	00bffcc4 	movi	r2,-13
    443c:	00000806 	br	4460 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4440:	e0bffe17 	ldw	r2,-8(fp)
    4444:	10800044 	addi	r2,r2,1
    4448:	e0bffe15 	stw	r2,-8(fp)
    444c:	d0a00517 	ldw	r2,-32748(gp)
    4450:	1007883a 	mov	r3,r2
    4454:	e0bffe17 	ldw	r2,-8(fp)
    4458:	18bfdf2e 	bgeu	r3,r2,43d8 <__alt_data_end+0xf80043d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    445c:	0005883a 	mov	r2,zero
}
    4460:	e037883a 	mov	sp,fp
    4464:	df000017 	ldw	fp,0(sp)
    4468:	dec00104 	addi	sp,sp,4
    446c:	f800283a 	ret

00004470 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4470:	defff604 	addi	sp,sp,-40
    4474:	dfc00915 	stw	ra,36(sp)
    4478:	df000815 	stw	fp,32(sp)
    447c:	df000804 	addi	fp,sp,32
    4480:	e13ffd15 	stw	r4,-12(fp)
    4484:	e17ffe15 	stw	r5,-8(fp)
    4488:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    448c:	00bfffc4 	movi	r2,-1
    4490:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4494:	00bffb44 	movi	r2,-19
    4498:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    449c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    44a0:	d1600304 	addi	r5,gp,-32756
    44a4:	e13ffd17 	ldw	r4,-12(fp)
    44a8:	00047f00 	call	47f0 <alt_find_dev>
    44ac:	e0bff815 	stw	r2,-32(fp)
    44b0:	e0bff817 	ldw	r2,-32(fp)
    44b4:	1000051e 	bne	r2,zero,44cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    44b8:	e13ffd17 	ldw	r4,-12(fp)
    44bc:	00048800 	call	4880 <alt_find_file>
    44c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    44c4:	00800044 	movi	r2,1
    44c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    44cc:	e0bff817 	ldw	r2,-32(fp)
    44d0:	10002926 	beq	r2,zero,4578 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    44d4:	e13ff817 	ldw	r4,-32(fp)
    44d8:	00049880 	call	4988 <alt_get_fd>
    44dc:	e0bff915 	stw	r2,-28(fp)
    44e0:	e0bff917 	ldw	r2,-28(fp)
    44e4:	1000030e 	bge	r2,zero,44f4 <open+0x84>
    {
      status = index;
    44e8:	e0bff917 	ldw	r2,-28(fp)
    44ec:	e0bffa15 	stw	r2,-24(fp)
    44f0:	00002306 	br	4580 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    44f4:	e0bff917 	ldw	r2,-28(fp)
    44f8:	10c00324 	muli	r3,r2,12
    44fc:	00800034 	movhi	r2,0
    4500:	10998904 	addi	r2,r2,26148
    4504:	1885883a 	add	r2,r3,r2
    4508:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    450c:	e0fffe17 	ldw	r3,-8(fp)
    4510:	00900034 	movhi	r2,16384
    4514:	10bfffc4 	addi	r2,r2,-1
    4518:	1886703a 	and	r3,r3,r2
    451c:	e0bffc17 	ldw	r2,-16(fp)
    4520:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4524:	e0bffb17 	ldw	r2,-20(fp)
    4528:	1000051e 	bne	r2,zero,4540 <open+0xd0>
    452c:	e13ffc17 	ldw	r4,-16(fp)
    4530:	00043ac0 	call	43ac <alt_file_locked>
    4534:	e0bffa15 	stw	r2,-24(fp)
    4538:	e0bffa17 	ldw	r2,-24(fp)
    453c:	10001016 	blt	r2,zero,4580 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4540:	e0bff817 	ldw	r2,-32(fp)
    4544:	10800317 	ldw	r2,12(r2)
    4548:	10000826 	beq	r2,zero,456c <open+0xfc>
    454c:	e0bff817 	ldw	r2,-32(fp)
    4550:	10800317 	ldw	r2,12(r2)
    4554:	e1ffff17 	ldw	r7,-4(fp)
    4558:	e1bffe17 	ldw	r6,-8(fp)
    455c:	e17ffd17 	ldw	r5,-12(fp)
    4560:	e13ffc17 	ldw	r4,-16(fp)
    4564:	103ee83a 	callr	r2
    4568:	00000106 	br	4570 <open+0x100>
    456c:	0005883a 	mov	r2,zero
    4570:	e0bffa15 	stw	r2,-24(fp)
    4574:	00000206 	br	4580 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4578:	00bffb44 	movi	r2,-19
    457c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4580:	e0bffa17 	ldw	r2,-24(fp)
    4584:	1000090e 	bge	r2,zero,45ac <open+0x13c>
  {
    alt_release_fd (index);  
    4588:	e13ff917 	ldw	r4,-28(fp)
    458c:	00045c40 	call	45c4 <alt_release_fd>
    ALT_ERRNO = -status;
    4590:	00043700 	call	4370 <alt_get_errno>
    4594:	1007883a 	mov	r3,r2
    4598:	e0bffa17 	ldw	r2,-24(fp)
    459c:	0085c83a 	sub	r2,zero,r2
    45a0:	18800015 	stw	r2,0(r3)
    return -1;
    45a4:	00bfffc4 	movi	r2,-1
    45a8:	00000106 	br	45b0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    45ac:	e0bff917 	ldw	r2,-28(fp)
}
    45b0:	e037883a 	mov	sp,fp
    45b4:	dfc00117 	ldw	ra,4(sp)
    45b8:	df000017 	ldw	fp,0(sp)
    45bc:	dec00204 	addi	sp,sp,8
    45c0:	f800283a 	ret

000045c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    45c4:	defffe04 	addi	sp,sp,-8
    45c8:	df000115 	stw	fp,4(sp)
    45cc:	df000104 	addi	fp,sp,4
    45d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    45d4:	e0bfff17 	ldw	r2,-4(fp)
    45d8:	108000d0 	cmplti	r2,r2,3
    45dc:	10000d1e 	bne	r2,zero,4614 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    45e0:	00800034 	movhi	r2,0
    45e4:	10998904 	addi	r2,r2,26148
    45e8:	e0ffff17 	ldw	r3,-4(fp)
    45ec:	18c00324 	muli	r3,r3,12
    45f0:	10c5883a 	add	r2,r2,r3
    45f4:	10800204 	addi	r2,r2,8
    45f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    45fc:	00800034 	movhi	r2,0
    4600:	10998904 	addi	r2,r2,26148
    4604:	e0ffff17 	ldw	r3,-4(fp)
    4608:	18c00324 	muli	r3,r3,12
    460c:	10c5883a 	add	r2,r2,r3
    4610:	10000015 	stw	zero,0(r2)
  }
}
    4614:	0001883a 	nop
    4618:	e037883a 	mov	sp,fp
    461c:	df000017 	ldw	fp,0(sp)
    4620:	dec00104 	addi	sp,sp,4
    4624:	f800283a 	ret

00004628 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4628:	defffa04 	addi	sp,sp,-24
    462c:	df000515 	stw	fp,20(sp)
    4630:	df000504 	addi	fp,sp,20
    4634:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4638:	0005303a 	rdctl	r2,status
    463c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4640:	e0fffc17 	ldw	r3,-16(fp)
    4644:	00bfff84 	movi	r2,-2
    4648:	1884703a 	and	r2,r3,r2
    464c:	1001703a 	wrctl	status,r2
  
  return context;
    4650:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4654:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    4658:	e0bfff17 	ldw	r2,-4(fp)
    465c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4660:	e0bffd17 	ldw	r2,-12(fp)
    4664:	10800017 	ldw	r2,0(r2)
    4668:	e0fffd17 	ldw	r3,-12(fp)
    466c:	18c00117 	ldw	r3,4(r3)
    4670:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    4674:	e0bffd17 	ldw	r2,-12(fp)
    4678:	10800117 	ldw	r2,4(r2)
    467c:	e0fffd17 	ldw	r3,-12(fp)
    4680:	18c00017 	ldw	r3,0(r3)
    4684:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4688:	e0bffd17 	ldw	r2,-12(fp)
    468c:	e0fffd17 	ldw	r3,-12(fp)
    4690:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    4694:	e0bffd17 	ldw	r2,-12(fp)
    4698:	e0fffd17 	ldw	r3,-12(fp)
    469c:	10c00015 	stw	r3,0(r2)
    46a0:	e0bffb17 	ldw	r2,-20(fp)
    46a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46a8:	e0bffe17 	ldw	r2,-8(fp)
    46ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    46b0:	0001883a 	nop
    46b4:	e037883a 	mov	sp,fp
    46b8:	df000017 	ldw	fp,0(sp)
    46bc:	dec00104 	addi	sp,sp,4
    46c0:	f800283a 	ret

000046c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    46c4:	defffb04 	addi	sp,sp,-20
    46c8:	dfc00415 	stw	ra,16(sp)
    46cc:	df000315 	stw	fp,12(sp)
    46d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    46d4:	d0a00817 	ldw	r2,-32736(gp)
    46d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    46dc:	d0a5f217 	ldw	r2,-26680(gp)
    46e0:	10800044 	addi	r2,r2,1
    46e4:	d0a5f215 	stw	r2,-26680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    46e8:	00002e06 	br	47a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    46ec:	e0bffd17 	ldw	r2,-12(fp)
    46f0:	10800017 	ldw	r2,0(r2)
    46f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    46f8:	e0bffd17 	ldw	r2,-12(fp)
    46fc:	10800403 	ldbu	r2,16(r2)
    4700:	10803fcc 	andi	r2,r2,255
    4704:	10000426 	beq	r2,zero,4718 <alt_tick+0x54>
    4708:	d0a5f217 	ldw	r2,-26680(gp)
    470c:	1000021e 	bne	r2,zero,4718 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    4710:	e0bffd17 	ldw	r2,-12(fp)
    4714:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4718:	e0bffd17 	ldw	r2,-12(fp)
    471c:	10800217 	ldw	r2,8(r2)
    4720:	d0e5f217 	ldw	r3,-26680(gp)
    4724:	18801d36 	bltu	r3,r2,479c <alt_tick+0xd8>
    4728:	e0bffd17 	ldw	r2,-12(fp)
    472c:	10800403 	ldbu	r2,16(r2)
    4730:	10803fcc 	andi	r2,r2,255
    4734:	1000191e 	bne	r2,zero,479c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    4738:	e0bffd17 	ldw	r2,-12(fp)
    473c:	10800317 	ldw	r2,12(r2)
    4740:	e0fffd17 	ldw	r3,-12(fp)
    4744:	18c00517 	ldw	r3,20(r3)
    4748:	1809883a 	mov	r4,r3
    474c:	103ee83a 	callr	r2
    4750:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4754:	e0bfff17 	ldw	r2,-4(fp)
    4758:	1000031e 	bne	r2,zero,4768 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    475c:	e13ffd17 	ldw	r4,-12(fp)
    4760:	00046280 	call	4628 <alt_alarm_stop>
    4764:	00000d06 	br	479c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    4768:	e0bffd17 	ldw	r2,-12(fp)
    476c:	10c00217 	ldw	r3,8(r2)
    4770:	e0bfff17 	ldw	r2,-4(fp)
    4774:	1887883a 	add	r3,r3,r2
    4778:	e0bffd17 	ldw	r2,-12(fp)
    477c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4780:	e0bffd17 	ldw	r2,-12(fp)
    4784:	10c00217 	ldw	r3,8(r2)
    4788:	d0a5f217 	ldw	r2,-26680(gp)
    478c:	1880032e 	bgeu	r3,r2,479c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    4790:	e0bffd17 	ldw	r2,-12(fp)
    4794:	00c00044 	movi	r3,1
    4798:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    479c:	e0bffe17 	ldw	r2,-8(fp)
    47a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    47a4:	e0fffd17 	ldw	r3,-12(fp)
    47a8:	d0a00804 	addi	r2,gp,-32736
    47ac:	18bfcf1e 	bne	r3,r2,46ec <__alt_data_end+0xf80046ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    47b0:	0001883a 	nop
}
    47b4:	0001883a 	nop
    47b8:	e037883a 	mov	sp,fp
    47bc:	dfc00117 	ldw	ra,4(sp)
    47c0:	df000017 	ldw	fp,0(sp)
    47c4:	dec00204 	addi	sp,sp,8
    47c8:	f800283a 	ret

000047cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    47cc:	deffff04 	addi	sp,sp,-4
    47d0:	df000015 	stw	fp,0(sp)
    47d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    47d8:	000170fa 	wrctl	ienable,zero
}
    47dc:	0001883a 	nop
    47e0:	e037883a 	mov	sp,fp
    47e4:	df000017 	ldw	fp,0(sp)
    47e8:	dec00104 	addi	sp,sp,4
    47ec:	f800283a 	ret

000047f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    47f0:	defffa04 	addi	sp,sp,-24
    47f4:	dfc00515 	stw	ra,20(sp)
    47f8:	df000415 	stw	fp,16(sp)
    47fc:	df000404 	addi	fp,sp,16
    4800:	e13ffe15 	stw	r4,-8(fp)
    4804:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4808:	e0bfff17 	ldw	r2,-4(fp)
    480c:	10800017 	ldw	r2,0(r2)
    4810:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4814:	e13ffe17 	ldw	r4,-8(fp)
    4818:	0001c680 	call	1c68 <strlen>
    481c:	10800044 	addi	r2,r2,1
    4820:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4824:	00000d06 	br	485c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4828:	e0bffc17 	ldw	r2,-16(fp)
    482c:	10800217 	ldw	r2,8(r2)
    4830:	e0fffd17 	ldw	r3,-12(fp)
    4834:	180d883a 	mov	r6,r3
    4838:	e17ffe17 	ldw	r5,-8(fp)
    483c:	1009883a 	mov	r4,r2
    4840:	0004b080 	call	4b08 <memcmp>
    4844:	1000021e 	bne	r2,zero,4850 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4848:	e0bffc17 	ldw	r2,-16(fp)
    484c:	00000706 	br	486c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4850:	e0bffc17 	ldw	r2,-16(fp)
    4854:	10800017 	ldw	r2,0(r2)
    4858:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    485c:	e0fffc17 	ldw	r3,-16(fp)
    4860:	e0bfff17 	ldw	r2,-4(fp)
    4864:	18bff01e 	bne	r3,r2,4828 <__alt_data_end+0xf8004828>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4868:	0005883a 	mov	r2,zero
}
    486c:	e037883a 	mov	sp,fp
    4870:	dfc00117 	ldw	ra,4(sp)
    4874:	df000017 	ldw	fp,0(sp)
    4878:	dec00204 	addi	sp,sp,8
    487c:	f800283a 	ret

00004880 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4880:	defffb04 	addi	sp,sp,-20
    4884:	dfc00415 	stw	ra,16(sp)
    4888:	df000315 	stw	fp,12(sp)
    488c:	df000304 	addi	fp,sp,12
    4890:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4894:	d0a00117 	ldw	r2,-32764(gp)
    4898:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    489c:	00003106 	br	4964 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    48a0:	e0bffd17 	ldw	r2,-12(fp)
    48a4:	10800217 	ldw	r2,8(r2)
    48a8:	1009883a 	mov	r4,r2
    48ac:	0001c680 	call	1c68 <strlen>
    48b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    48b4:	e0bffd17 	ldw	r2,-12(fp)
    48b8:	10c00217 	ldw	r3,8(r2)
    48bc:	e0bffe17 	ldw	r2,-8(fp)
    48c0:	10bfffc4 	addi	r2,r2,-1
    48c4:	1885883a 	add	r2,r3,r2
    48c8:	10800003 	ldbu	r2,0(r2)
    48cc:	10803fcc 	andi	r2,r2,255
    48d0:	1080201c 	xori	r2,r2,128
    48d4:	10bfe004 	addi	r2,r2,-128
    48d8:	10800bd8 	cmpnei	r2,r2,47
    48dc:	1000031e 	bne	r2,zero,48ec <alt_find_file+0x6c>
    {
      len -= 1;
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10bfffc4 	addi	r2,r2,-1
    48e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    48ec:	e0bffe17 	ldw	r2,-8(fp)
    48f0:	e0ffff17 	ldw	r3,-4(fp)
    48f4:	1885883a 	add	r2,r3,r2
    48f8:	10800003 	ldbu	r2,0(r2)
    48fc:	10803fcc 	andi	r2,r2,255
    4900:	1080201c 	xori	r2,r2,128
    4904:	10bfe004 	addi	r2,r2,-128
    4908:	10800be0 	cmpeqi	r2,r2,47
    490c:	1000081e 	bne	r2,zero,4930 <alt_find_file+0xb0>
    4910:	e0bffe17 	ldw	r2,-8(fp)
    4914:	e0ffff17 	ldw	r3,-4(fp)
    4918:	1885883a 	add	r2,r3,r2
    491c:	10800003 	ldbu	r2,0(r2)
    4920:	10803fcc 	andi	r2,r2,255
    4924:	1080201c 	xori	r2,r2,128
    4928:	10bfe004 	addi	r2,r2,-128
    492c:	10000a1e 	bne	r2,zero,4958 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    4930:	e0bffd17 	ldw	r2,-12(fp)
    4934:	10800217 	ldw	r2,8(r2)
    4938:	e0fffe17 	ldw	r3,-8(fp)
    493c:	180d883a 	mov	r6,r3
    4940:	e17fff17 	ldw	r5,-4(fp)
    4944:	1009883a 	mov	r4,r2
    4948:	0004b080 	call	4b08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    494c:	1000021e 	bne	r2,zero,4958 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4950:	e0bffd17 	ldw	r2,-12(fp)
    4954:	00000706 	br	4974 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    4958:	e0bffd17 	ldw	r2,-12(fp)
    495c:	10800017 	ldw	r2,0(r2)
    4960:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4964:	e0fffd17 	ldw	r3,-12(fp)
    4968:	d0a00104 	addi	r2,gp,-32764
    496c:	18bfcc1e 	bne	r3,r2,48a0 <__alt_data_end+0xf80048a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4970:	0005883a 	mov	r2,zero
}
    4974:	e037883a 	mov	sp,fp
    4978:	dfc00117 	ldw	ra,4(sp)
    497c:	df000017 	ldw	fp,0(sp)
    4980:	dec00204 	addi	sp,sp,8
    4984:	f800283a 	ret

00004988 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4988:	defffc04 	addi	sp,sp,-16
    498c:	df000315 	stw	fp,12(sp)
    4990:	df000304 	addi	fp,sp,12
    4994:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    4998:	00bffa04 	movi	r2,-24
    499c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    49a0:	e03ffd15 	stw	zero,-12(fp)
    49a4:	00001906 	br	4a0c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    49a8:	00800034 	movhi	r2,0
    49ac:	10998904 	addi	r2,r2,26148
    49b0:	e0fffd17 	ldw	r3,-12(fp)
    49b4:	18c00324 	muli	r3,r3,12
    49b8:	10c5883a 	add	r2,r2,r3
    49bc:	10800017 	ldw	r2,0(r2)
    49c0:	10000f1e 	bne	r2,zero,4a00 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    49c4:	00800034 	movhi	r2,0
    49c8:	10998904 	addi	r2,r2,26148
    49cc:	e0fffd17 	ldw	r3,-12(fp)
    49d0:	18c00324 	muli	r3,r3,12
    49d4:	10c5883a 	add	r2,r2,r3
    49d8:	e0ffff17 	ldw	r3,-4(fp)
    49dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    49e0:	d0e00517 	ldw	r3,-32748(gp)
    49e4:	e0bffd17 	ldw	r2,-12(fp)
    49e8:	1880020e 	bge	r3,r2,49f4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    49ec:	e0bffd17 	ldw	r2,-12(fp)
    49f0:	d0a00515 	stw	r2,-32748(gp)
      }
      rc = i;
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    49fc:	00000606 	br	4a18 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4a00:	e0bffd17 	ldw	r2,-12(fp)
    4a04:	10800044 	addi	r2,r2,1
    4a08:	e0bffd15 	stw	r2,-12(fp)
    4a0c:	e0bffd17 	ldw	r2,-12(fp)
    4a10:	10800810 	cmplti	r2,r2,32
    4a14:	103fe41e 	bne	r2,zero,49a8 <__alt_data_end+0xf80049a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4a18:	e0bffe17 	ldw	r2,-8(fp)
}
    4a1c:	e037883a 	mov	sp,fp
    4a20:	df000017 	ldw	fp,0(sp)
    4a24:	dec00104 	addi	sp,sp,4
    4a28:	f800283a 	ret

00004a2c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    4a2c:	defffb04 	addi	sp,sp,-20
    4a30:	df000415 	stw	fp,16(sp)
    4a34:	df000404 	addi	fp,sp,16
    4a38:	e13ffe15 	stw	r4,-8(fp)
    4a3c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    4a40:	e0bfff17 	ldw	r2,-4(fp)
    4a44:	10840070 	cmpltui	r2,r2,4097
    4a48:	1000021e 	bne	r2,zero,4a54 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    4a4c:	00840004 	movi	r2,4096
    4a50:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    4a54:	e0fffe17 	ldw	r3,-8(fp)
    4a58:	e0bfff17 	ldw	r2,-4(fp)
    4a5c:	1885883a 	add	r2,r3,r2
    4a60:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4a64:	e0bffe17 	ldw	r2,-8(fp)
    4a68:	e0bffc15 	stw	r2,-16(fp)
    4a6c:	00000506 	br	4a84 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4a70:	e0bffc17 	ldw	r2,-16(fp)
    4a74:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4a78:	e0bffc17 	ldw	r2,-16(fp)
    4a7c:	10800804 	addi	r2,r2,32
    4a80:	e0bffc15 	stw	r2,-16(fp)
    4a84:	e0fffc17 	ldw	r3,-16(fp)
    4a88:	e0bffd17 	ldw	r2,-12(fp)
    4a8c:	18bff836 	bltu	r3,r2,4a70 <__alt_data_end+0xf8004a70>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4a90:	e0bffe17 	ldw	r2,-8(fp)
    4a94:	108007cc 	andi	r2,r2,31
    4a98:	10000226 	beq	r2,zero,4aa4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    4a9c:	e0bffc17 	ldw	r2,-16(fp)
    4aa0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    4aa4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    4aa8:	0001883a 	nop
    4aac:	e037883a 	mov	sp,fp
    4ab0:	df000017 	ldw	fp,0(sp)
    4ab4:	dec00104 	addi	sp,sp,4
    4ab8:	f800283a 	ret

00004abc <atexit>:
    4abc:	200b883a 	mov	r5,r4
    4ac0:	000f883a 	mov	r7,zero
    4ac4:	000d883a 	mov	r6,zero
    4ac8:	0009883a 	mov	r4,zero
    4acc:	0004df41 	jmpi	4df4 <__register_exitproc>

00004ad0 <exit>:
    4ad0:	defffe04 	addi	sp,sp,-8
    4ad4:	000b883a 	mov	r5,zero
    4ad8:	dc000015 	stw	r16,0(sp)
    4adc:	dfc00115 	stw	ra,4(sp)
    4ae0:	2021883a 	mov	r16,r4
    4ae4:	0004f0c0 	call	4f0c <__call_exitprocs>
    4ae8:	00800034 	movhi	r2,0
    4aec:	109afd04 	addi	r2,r2,27636
    4af0:	11000017 	ldw	r4,0(r2)
    4af4:	20800f17 	ldw	r2,60(r4)
    4af8:	10000126 	beq	r2,zero,4b00 <exit+0x30>
    4afc:	103ee83a 	callr	r2
    4b00:	8009883a 	mov	r4,r16
    4b04:	000508c0 	call	508c <_exit>

00004b08 <memcmp>:
    4b08:	01c000c4 	movi	r7,3
    4b0c:	3980192e 	bgeu	r7,r6,4b74 <memcmp+0x6c>
    4b10:	2144b03a 	or	r2,r4,r5
    4b14:	11c4703a 	and	r2,r2,r7
    4b18:	10000f26 	beq	r2,zero,4b58 <memcmp+0x50>
    4b1c:	20800003 	ldbu	r2,0(r4)
    4b20:	28c00003 	ldbu	r3,0(r5)
    4b24:	10c0151e 	bne	r2,r3,4b7c <memcmp+0x74>
    4b28:	31bfff84 	addi	r6,r6,-2
    4b2c:	01ffffc4 	movi	r7,-1
    4b30:	00000406 	br	4b44 <memcmp+0x3c>
    4b34:	20800003 	ldbu	r2,0(r4)
    4b38:	28c00003 	ldbu	r3,0(r5)
    4b3c:	31bfffc4 	addi	r6,r6,-1
    4b40:	10c00e1e 	bne	r2,r3,4b7c <memcmp+0x74>
    4b44:	21000044 	addi	r4,r4,1
    4b48:	29400044 	addi	r5,r5,1
    4b4c:	31fff91e 	bne	r6,r7,4b34 <__alt_data_end+0xf8004b34>
    4b50:	0005883a 	mov	r2,zero
    4b54:	f800283a 	ret
    4b58:	20c00017 	ldw	r3,0(r4)
    4b5c:	28800017 	ldw	r2,0(r5)
    4b60:	18bfee1e 	bne	r3,r2,4b1c <__alt_data_end+0xf8004b1c>
    4b64:	31bfff04 	addi	r6,r6,-4
    4b68:	21000104 	addi	r4,r4,4
    4b6c:	29400104 	addi	r5,r5,4
    4b70:	39bff936 	bltu	r7,r6,4b58 <__alt_data_end+0xf8004b58>
    4b74:	303fe91e 	bne	r6,zero,4b1c <__alt_data_end+0xf8004b1c>
    4b78:	003ff506 	br	4b50 <__alt_data_end+0xf8004b50>
    4b7c:	10c5c83a 	sub	r2,r2,r3
    4b80:	f800283a 	ret

00004b84 <memcpy>:
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	dfc00215 	stw	ra,8(sp)
    4b8c:	dc400115 	stw	r17,4(sp)
    4b90:	dc000015 	stw	r16,0(sp)
    4b94:	00c003c4 	movi	r3,15
    4b98:	2005883a 	mov	r2,r4
    4b9c:	1980452e 	bgeu	r3,r6,4cb4 <memcpy+0x130>
    4ba0:	2906b03a 	or	r3,r5,r4
    4ba4:	18c000cc 	andi	r3,r3,3
    4ba8:	1800441e 	bne	r3,zero,4cbc <memcpy+0x138>
    4bac:	347ffc04 	addi	r17,r6,-16
    4bb0:	8822d13a 	srli	r17,r17,4
    4bb4:	28c00104 	addi	r3,r5,4
    4bb8:	23400104 	addi	r13,r4,4
    4bbc:	8820913a 	slli	r16,r17,4
    4bc0:	2b000204 	addi	r12,r5,8
    4bc4:	22c00204 	addi	r11,r4,8
    4bc8:	84000504 	addi	r16,r16,20
    4bcc:	2a800304 	addi	r10,r5,12
    4bd0:	22400304 	addi	r9,r4,12
    4bd4:	2c21883a 	add	r16,r5,r16
    4bd8:	2811883a 	mov	r8,r5
    4bdc:	200f883a 	mov	r7,r4
    4be0:	41000017 	ldw	r4,0(r8)
    4be4:	1fc00017 	ldw	ra,0(r3)
    4be8:	63c00017 	ldw	r15,0(r12)
    4bec:	39000015 	stw	r4,0(r7)
    4bf0:	53800017 	ldw	r14,0(r10)
    4bf4:	6fc00015 	stw	ra,0(r13)
    4bf8:	5bc00015 	stw	r15,0(r11)
    4bfc:	4b800015 	stw	r14,0(r9)
    4c00:	18c00404 	addi	r3,r3,16
    4c04:	39c00404 	addi	r7,r7,16
    4c08:	42000404 	addi	r8,r8,16
    4c0c:	6b400404 	addi	r13,r13,16
    4c10:	63000404 	addi	r12,r12,16
    4c14:	5ac00404 	addi	r11,r11,16
    4c18:	52800404 	addi	r10,r10,16
    4c1c:	4a400404 	addi	r9,r9,16
    4c20:	1c3fef1e 	bne	r3,r16,4be0 <__alt_data_end+0xf8004be0>
    4c24:	89c00044 	addi	r7,r17,1
    4c28:	380e913a 	slli	r7,r7,4
    4c2c:	310003cc 	andi	r4,r6,15
    4c30:	02c000c4 	movi	r11,3
    4c34:	11c7883a 	add	r3,r2,r7
    4c38:	29cb883a 	add	r5,r5,r7
    4c3c:	5900212e 	bgeu	r11,r4,4cc4 <memcpy+0x140>
    4c40:	1813883a 	mov	r9,r3
    4c44:	2811883a 	mov	r8,r5
    4c48:	200f883a 	mov	r7,r4
    4c4c:	42800017 	ldw	r10,0(r8)
    4c50:	4a400104 	addi	r9,r9,4
    4c54:	39ffff04 	addi	r7,r7,-4
    4c58:	4abfff15 	stw	r10,-4(r9)
    4c5c:	42000104 	addi	r8,r8,4
    4c60:	59fffa36 	bltu	r11,r7,4c4c <__alt_data_end+0xf8004c4c>
    4c64:	213fff04 	addi	r4,r4,-4
    4c68:	2008d0ba 	srli	r4,r4,2
    4c6c:	318000cc 	andi	r6,r6,3
    4c70:	21000044 	addi	r4,r4,1
    4c74:	2109883a 	add	r4,r4,r4
    4c78:	2109883a 	add	r4,r4,r4
    4c7c:	1907883a 	add	r3,r3,r4
    4c80:	290b883a 	add	r5,r5,r4
    4c84:	30000626 	beq	r6,zero,4ca0 <memcpy+0x11c>
    4c88:	198d883a 	add	r6,r3,r6
    4c8c:	29c00003 	ldbu	r7,0(r5)
    4c90:	18c00044 	addi	r3,r3,1
    4c94:	29400044 	addi	r5,r5,1
    4c98:	19ffffc5 	stb	r7,-1(r3)
    4c9c:	19bffb1e 	bne	r3,r6,4c8c <__alt_data_end+0xf8004c8c>
    4ca0:	dfc00217 	ldw	ra,8(sp)
    4ca4:	dc400117 	ldw	r17,4(sp)
    4ca8:	dc000017 	ldw	r16,0(sp)
    4cac:	dec00304 	addi	sp,sp,12
    4cb0:	f800283a 	ret
    4cb4:	2007883a 	mov	r3,r4
    4cb8:	003ff206 	br	4c84 <__alt_data_end+0xf8004c84>
    4cbc:	2007883a 	mov	r3,r4
    4cc0:	003ff106 	br	4c88 <__alt_data_end+0xf8004c88>
    4cc4:	200d883a 	mov	r6,r4
    4cc8:	003fee06 	br	4c84 <__alt_data_end+0xf8004c84>

00004ccc <memset>:
    4ccc:	20c000cc 	andi	r3,r4,3
    4cd0:	2005883a 	mov	r2,r4
    4cd4:	18004426 	beq	r3,zero,4de8 <memset+0x11c>
    4cd8:	31ffffc4 	addi	r7,r6,-1
    4cdc:	30004026 	beq	r6,zero,4de0 <memset+0x114>
    4ce0:	2813883a 	mov	r9,r5
    4ce4:	200d883a 	mov	r6,r4
    4ce8:	2007883a 	mov	r3,r4
    4cec:	00000406 	br	4d00 <memset+0x34>
    4cf0:	3a3fffc4 	addi	r8,r7,-1
    4cf4:	31800044 	addi	r6,r6,1
    4cf8:	38003926 	beq	r7,zero,4de0 <memset+0x114>
    4cfc:	400f883a 	mov	r7,r8
    4d00:	18c00044 	addi	r3,r3,1
    4d04:	32400005 	stb	r9,0(r6)
    4d08:	1a0000cc 	andi	r8,r3,3
    4d0c:	403ff81e 	bne	r8,zero,4cf0 <__alt_data_end+0xf8004cf0>
    4d10:	010000c4 	movi	r4,3
    4d14:	21c02d2e 	bgeu	r4,r7,4dcc <memset+0x100>
    4d18:	29003fcc 	andi	r4,r5,255
    4d1c:	200c923a 	slli	r6,r4,8
    4d20:	3108b03a 	or	r4,r6,r4
    4d24:	200c943a 	slli	r6,r4,16
    4d28:	218cb03a 	or	r6,r4,r6
    4d2c:	010003c4 	movi	r4,15
    4d30:	21c0182e 	bgeu	r4,r7,4d94 <memset+0xc8>
    4d34:	3b3ffc04 	addi	r12,r7,-16
    4d38:	6018d13a 	srli	r12,r12,4
    4d3c:	1a000104 	addi	r8,r3,4
    4d40:	1ac00204 	addi	r11,r3,8
    4d44:	6008913a 	slli	r4,r12,4
    4d48:	1a800304 	addi	r10,r3,12
    4d4c:	1813883a 	mov	r9,r3
    4d50:	21000504 	addi	r4,r4,20
    4d54:	1909883a 	add	r4,r3,r4
    4d58:	49800015 	stw	r6,0(r9)
    4d5c:	41800015 	stw	r6,0(r8)
    4d60:	59800015 	stw	r6,0(r11)
    4d64:	51800015 	stw	r6,0(r10)
    4d68:	42000404 	addi	r8,r8,16
    4d6c:	4a400404 	addi	r9,r9,16
    4d70:	5ac00404 	addi	r11,r11,16
    4d74:	52800404 	addi	r10,r10,16
    4d78:	413ff71e 	bne	r8,r4,4d58 <__alt_data_end+0xf8004d58>
    4d7c:	63000044 	addi	r12,r12,1
    4d80:	6018913a 	slli	r12,r12,4
    4d84:	39c003cc 	andi	r7,r7,15
    4d88:	010000c4 	movi	r4,3
    4d8c:	1b07883a 	add	r3,r3,r12
    4d90:	21c00e2e 	bgeu	r4,r7,4dcc <memset+0x100>
    4d94:	1813883a 	mov	r9,r3
    4d98:	3811883a 	mov	r8,r7
    4d9c:	010000c4 	movi	r4,3
    4da0:	49800015 	stw	r6,0(r9)
    4da4:	423fff04 	addi	r8,r8,-4
    4da8:	4a400104 	addi	r9,r9,4
    4dac:	223ffc36 	bltu	r4,r8,4da0 <__alt_data_end+0xf8004da0>
    4db0:	393fff04 	addi	r4,r7,-4
    4db4:	2008d0ba 	srli	r4,r4,2
    4db8:	39c000cc 	andi	r7,r7,3
    4dbc:	21000044 	addi	r4,r4,1
    4dc0:	2109883a 	add	r4,r4,r4
    4dc4:	2109883a 	add	r4,r4,r4
    4dc8:	1907883a 	add	r3,r3,r4
    4dcc:	38000526 	beq	r7,zero,4de4 <memset+0x118>
    4dd0:	19cf883a 	add	r7,r3,r7
    4dd4:	19400005 	stb	r5,0(r3)
    4dd8:	18c00044 	addi	r3,r3,1
    4ddc:	38fffd1e 	bne	r7,r3,4dd4 <__alt_data_end+0xf8004dd4>
    4de0:	f800283a 	ret
    4de4:	f800283a 	ret
    4de8:	2007883a 	mov	r3,r4
    4dec:	300f883a 	mov	r7,r6
    4df0:	003fc706 	br	4d10 <__alt_data_end+0xf8004d10>

00004df4 <__register_exitproc>:
    4df4:	defffa04 	addi	sp,sp,-24
    4df8:	dc000315 	stw	r16,12(sp)
    4dfc:	04000034 	movhi	r16,0
    4e00:	841afd04 	addi	r16,r16,27636
    4e04:	80c00017 	ldw	r3,0(r16)
    4e08:	dc400415 	stw	r17,16(sp)
    4e0c:	dfc00515 	stw	ra,20(sp)
    4e10:	18805217 	ldw	r2,328(r3)
    4e14:	2023883a 	mov	r17,r4
    4e18:	10003726 	beq	r2,zero,4ef8 <__register_exitproc+0x104>
    4e1c:	10c00117 	ldw	r3,4(r2)
    4e20:	010007c4 	movi	r4,31
    4e24:	20c00e16 	blt	r4,r3,4e60 <__register_exitproc+0x6c>
    4e28:	1a000044 	addi	r8,r3,1
    4e2c:	8800221e 	bne	r17,zero,4eb8 <__register_exitproc+0xc4>
    4e30:	18c00084 	addi	r3,r3,2
    4e34:	18c7883a 	add	r3,r3,r3
    4e38:	18c7883a 	add	r3,r3,r3
    4e3c:	12000115 	stw	r8,4(r2)
    4e40:	10c7883a 	add	r3,r2,r3
    4e44:	19400015 	stw	r5,0(r3)
    4e48:	0005883a 	mov	r2,zero
    4e4c:	dfc00517 	ldw	ra,20(sp)
    4e50:	dc400417 	ldw	r17,16(sp)
    4e54:	dc000317 	ldw	r16,12(sp)
    4e58:	dec00604 	addi	sp,sp,24
    4e5c:	f800283a 	ret
    4e60:	00800034 	movhi	r2,0
    4e64:	10800004 	addi	r2,r2,0
    4e68:	10002626 	beq	r2,zero,4f04 <__register_exitproc+0x110>
    4e6c:	01006404 	movi	r4,400
    4e70:	d9400015 	stw	r5,0(sp)
    4e74:	d9800115 	stw	r6,4(sp)
    4e78:	d9c00215 	stw	r7,8(sp)
    4e7c:	00000000 	call	0 <__reset>
    4e80:	d9400017 	ldw	r5,0(sp)
    4e84:	d9800117 	ldw	r6,4(sp)
    4e88:	d9c00217 	ldw	r7,8(sp)
    4e8c:	10001d26 	beq	r2,zero,4f04 <__register_exitproc+0x110>
    4e90:	81000017 	ldw	r4,0(r16)
    4e94:	10000115 	stw	zero,4(r2)
    4e98:	02000044 	movi	r8,1
    4e9c:	22405217 	ldw	r9,328(r4)
    4ea0:	0007883a 	mov	r3,zero
    4ea4:	12400015 	stw	r9,0(r2)
    4ea8:	20805215 	stw	r2,328(r4)
    4eac:	10006215 	stw	zero,392(r2)
    4eb0:	10006315 	stw	zero,396(r2)
    4eb4:	883fde26 	beq	r17,zero,4e30 <__alt_data_end+0xf8004e30>
    4eb8:	18c9883a 	add	r4,r3,r3
    4ebc:	2109883a 	add	r4,r4,r4
    4ec0:	1109883a 	add	r4,r2,r4
    4ec4:	21802215 	stw	r6,136(r4)
    4ec8:	01800044 	movi	r6,1
    4ecc:	12406217 	ldw	r9,392(r2)
    4ed0:	30cc983a 	sll	r6,r6,r3
    4ed4:	4992b03a 	or	r9,r9,r6
    4ed8:	12406215 	stw	r9,392(r2)
    4edc:	21c04215 	stw	r7,264(r4)
    4ee0:	01000084 	movi	r4,2
    4ee4:	893fd21e 	bne	r17,r4,4e30 <__alt_data_end+0xf8004e30>
    4ee8:	11006317 	ldw	r4,396(r2)
    4eec:	218cb03a 	or	r6,r4,r6
    4ef0:	11806315 	stw	r6,396(r2)
    4ef4:	003fce06 	br	4e30 <__alt_data_end+0xf8004e30>
    4ef8:	18805304 	addi	r2,r3,332
    4efc:	18805215 	stw	r2,328(r3)
    4f00:	003fc606 	br	4e1c <__alt_data_end+0xf8004e1c>
    4f04:	00bfffc4 	movi	r2,-1
    4f08:	003fd006 	br	4e4c <__alt_data_end+0xf8004e4c>

00004f0c <__call_exitprocs>:
    4f0c:	defff504 	addi	sp,sp,-44
    4f10:	df000915 	stw	fp,36(sp)
    4f14:	dd400615 	stw	r21,24(sp)
    4f18:	dc800315 	stw	r18,12(sp)
    4f1c:	dfc00a15 	stw	ra,40(sp)
    4f20:	ddc00815 	stw	r23,32(sp)
    4f24:	dd800715 	stw	r22,28(sp)
    4f28:	dd000515 	stw	r20,20(sp)
    4f2c:	dcc00415 	stw	r19,16(sp)
    4f30:	dc400215 	stw	r17,8(sp)
    4f34:	dc000115 	stw	r16,4(sp)
    4f38:	d9000015 	stw	r4,0(sp)
    4f3c:	2839883a 	mov	fp,r5
    4f40:	04800044 	movi	r18,1
    4f44:	057fffc4 	movi	r21,-1
    4f48:	00800034 	movhi	r2,0
    4f4c:	109afd04 	addi	r2,r2,27636
    4f50:	12000017 	ldw	r8,0(r2)
    4f54:	45005217 	ldw	r20,328(r8)
    4f58:	44c05204 	addi	r19,r8,328
    4f5c:	a0001c26 	beq	r20,zero,4fd0 <__call_exitprocs+0xc4>
    4f60:	a0800117 	ldw	r2,4(r20)
    4f64:	15ffffc4 	addi	r23,r2,-1
    4f68:	b8000d16 	blt	r23,zero,4fa0 <__call_exitprocs+0x94>
    4f6c:	14000044 	addi	r16,r2,1
    4f70:	8421883a 	add	r16,r16,r16
    4f74:	8421883a 	add	r16,r16,r16
    4f78:	84402004 	addi	r17,r16,128
    4f7c:	a463883a 	add	r17,r20,r17
    4f80:	a421883a 	add	r16,r20,r16
    4f84:	e0001e26 	beq	fp,zero,5000 <__call_exitprocs+0xf4>
    4f88:	80804017 	ldw	r2,256(r16)
    4f8c:	e0801c26 	beq	fp,r2,5000 <__call_exitprocs+0xf4>
    4f90:	bdffffc4 	addi	r23,r23,-1
    4f94:	843fff04 	addi	r16,r16,-4
    4f98:	8c7fff04 	addi	r17,r17,-4
    4f9c:	bd7ff91e 	bne	r23,r21,4f84 <__alt_data_end+0xf8004f84>
    4fa0:	00800034 	movhi	r2,0
    4fa4:	10800004 	addi	r2,r2,0
    4fa8:	10000926 	beq	r2,zero,4fd0 <__call_exitprocs+0xc4>
    4fac:	a0800117 	ldw	r2,4(r20)
    4fb0:	1000301e 	bne	r2,zero,5074 <__call_exitprocs+0x168>
    4fb4:	a0800017 	ldw	r2,0(r20)
    4fb8:	10003226 	beq	r2,zero,5084 <__call_exitprocs+0x178>
    4fbc:	a009883a 	mov	r4,r20
    4fc0:	98800015 	stw	r2,0(r19)
    4fc4:	00000000 	call	0 <__reset>
    4fc8:	9d000017 	ldw	r20,0(r19)
    4fcc:	a03fe41e 	bne	r20,zero,4f60 <__alt_data_end+0xf8004f60>
    4fd0:	dfc00a17 	ldw	ra,40(sp)
    4fd4:	df000917 	ldw	fp,36(sp)
    4fd8:	ddc00817 	ldw	r23,32(sp)
    4fdc:	dd800717 	ldw	r22,28(sp)
    4fe0:	dd400617 	ldw	r21,24(sp)
    4fe4:	dd000517 	ldw	r20,20(sp)
    4fe8:	dcc00417 	ldw	r19,16(sp)
    4fec:	dc800317 	ldw	r18,12(sp)
    4ff0:	dc400217 	ldw	r17,8(sp)
    4ff4:	dc000117 	ldw	r16,4(sp)
    4ff8:	dec00b04 	addi	sp,sp,44
    4ffc:	f800283a 	ret
    5000:	a0800117 	ldw	r2,4(r20)
    5004:	80c00017 	ldw	r3,0(r16)
    5008:	10bfffc4 	addi	r2,r2,-1
    500c:	15c01426 	beq	r2,r23,5060 <__call_exitprocs+0x154>
    5010:	80000015 	stw	zero,0(r16)
    5014:	183fde26 	beq	r3,zero,4f90 <__alt_data_end+0xf8004f90>
    5018:	95c8983a 	sll	r4,r18,r23
    501c:	a0806217 	ldw	r2,392(r20)
    5020:	a5800117 	ldw	r22,4(r20)
    5024:	2084703a 	and	r2,r4,r2
    5028:	10000b26 	beq	r2,zero,5058 <__call_exitprocs+0x14c>
    502c:	a0806317 	ldw	r2,396(r20)
    5030:	2088703a 	and	r4,r4,r2
    5034:	20000c1e 	bne	r4,zero,5068 <__call_exitprocs+0x15c>
    5038:	89400017 	ldw	r5,0(r17)
    503c:	d9000017 	ldw	r4,0(sp)
    5040:	183ee83a 	callr	r3
    5044:	a0800117 	ldw	r2,4(r20)
    5048:	15bfbf1e 	bne	r2,r22,4f48 <__alt_data_end+0xf8004f48>
    504c:	98800017 	ldw	r2,0(r19)
    5050:	153fcf26 	beq	r2,r20,4f90 <__alt_data_end+0xf8004f90>
    5054:	003fbc06 	br	4f48 <__alt_data_end+0xf8004f48>
    5058:	183ee83a 	callr	r3
    505c:	003ff906 	br	5044 <__alt_data_end+0xf8005044>
    5060:	a5c00115 	stw	r23,4(r20)
    5064:	003feb06 	br	5014 <__alt_data_end+0xf8005014>
    5068:	89000017 	ldw	r4,0(r17)
    506c:	183ee83a 	callr	r3
    5070:	003ff406 	br	5044 <__alt_data_end+0xf8005044>
    5074:	a0800017 	ldw	r2,0(r20)
    5078:	a027883a 	mov	r19,r20
    507c:	1029883a 	mov	r20,r2
    5080:	003fb606 	br	4f5c <__alt_data_end+0xf8004f5c>
    5084:	0005883a 	mov	r2,zero
    5088:	003ffb06 	br	5078 <__alt_data_end+0xf8005078>

0000508c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    508c:	defffd04 	addi	sp,sp,-12
    5090:	df000215 	stw	fp,8(sp)
    5094:	df000204 	addi	fp,sp,8
    5098:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    509c:	0001883a 	nop
    50a0:	e0bfff17 	ldw	r2,-4(fp)
    50a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    50a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    50ac:	10000226 	beq	r2,zero,50b8 <_exit+0x2c>
    ALT_SIM_FAIL();
    50b0:	002af070 	cmpltui	zero,zero,43969
    50b4:	00000106 	br	50bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    50b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    50bc:	003fff06 	br	50bc <__alt_data_end+0xf80050bc>
